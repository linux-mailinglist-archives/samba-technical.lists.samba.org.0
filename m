Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id A1C1FC9F21
	for <lists+samba-technical@lfdr.de>; Thu,  3 Oct 2019 15:14:12 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=Cc:From:List-Id:Date:To:Subject;
	bh=ytpX7W26azm65H9VWwdLX8X4IEb5k8WeWInXmUYuut8=; b=HSXuKpeTWcHwYbhlr0dDcuxWhU
	L3JGdIk2njGxux1+Zs8mOTJj1RMph2JU8fqCH76rgH64mNJX16c/DhINTAgM+t6RU3ob7PN3eYW5k
	1aJ6UT8ZJ9tAFNQh+fon7niAUGQ4WLYzHVODY9t+C406Wg5QePYgAckzgLlTw/GjDF2NQTOwSibf0
	ODi+sNIi5ggAhh8mGK7mSLPbZBHnnws5uw3xmXd2gAGNfxvqSwTPBobKHL8xFrhlvZRZANFYlDLkh
	qt3Dil+bKFpC95HXLy9K9thFpl0dHvYc50cr9ermUzrMLgM07M8jSjVEtG/DTcbhKlT2d4XpWfyi4
	0V1cJTig==;
Received: from localhost ([::1]:63614 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1iG0vR-000jCE-RA; Thu, 03 Oct 2019 13:13:45 +0000
Received: from latitanza.investici.org ([82.94.249.234]:35319) 
 by hr1.samba.org with esmtps (TLS1.2:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1iG0vH-000jA5-I3
 for samba-technical@lists.samba.org; Thu, 03 Oct 2019 13:13:41 +0000
Received: from mx3.investici.org (localhost [127.0.0.1])
 by latitanza.investici.org (Postfix) with ESMTP id 080A912019F;
 Thu,  3 Oct 2019 13:13:32 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cryptolab.net;
 s=stigmate; t=1570108412;
 bh=ytpX7W26azm65H9VWwdLX8X4IEb5k8WeWInXmUYuut8=;
 h=Subject:From:To:Cc:Date:In-Reply-To:References:From;
 b=GGKgzaUGxsgG1ohxJC7HmVcAU38swqQyefCLyuzNzXNwjnIwAaz9Dg7BiaSgJtSJi
 W/ye+vR6uVZIemnh9VqkUdoosRfvEBl3dvV6UPyKXRC4WXUFdWQn3WDgKJcPaBSm5s
 I3uH6X4+xgQhwSHxz1+8qxbkAcSPU/WPeJdKOI7E=
Received: from [82.94.249.234] (mx3.investici.org [82.94.249.234])
 (Authenticated sender: anoopcs@autistici.org) by localhost (Postfix) with
 ESMTPSA id 8515912019D; Thu,  3 Oct 2019 13:13:29 +0000 (UTC)
Message-ID: <a71d6def280a3c6125009f3d1eafff54f8f059b4.camel@cryptolab.net>
Subject: Re: Implementing SMB_VFS_FCNTL in Samba
To: samba-technical <samba-technical@lists.samba.org>
Date: Thu, 03 Oct 2019 18:43:23 +0530
In-Reply-To: <e9469e1d026b34cf46c0012a463a2fbe610ffd17.camel@cryptolab.net>
References: <7024afc6236a656134f867288cdb37579425e3ee.camel@cryptolab.net>
 <20190923153107.GA4325@jeremy-ThinkPad-X1>
 <98add807a4ac55e5f401522fbdfd47ddf2358d16.camel@cryptolab.net>
 <e9469e1d026b34cf46c0012a463a2fbe610ffd17.camel@cryptolab.net>
Content-Type: multipart/mixed; boundary="=-tkAC6Hvg1qmkoFjdP/H8"
User-Agent: Evolution 3.32.4 (3.32.4-1.fc30) 
MIME-Version: 1.0
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Anoop C S via samba-technical <samba-technical@lists.samba.org>
Reply-To: Anoop C S <anoopcs@cryptolab.net>
Cc: Jeremy Allison <jra@samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>


--=-tkAC6Hvg1qmkoFjdP/H8
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit

On Sun, 2019-09-29 at 08:26 +0530, Anoop C S via samba-technical wrote:
> On Thu, 2019-09-26 at 00:09 +0530, Anoop C S via samba-technical
> wrote:
> > On Mon, 2019-09-23 at 08:31 -0700, Jeremy Allison via samba-
> > technical
> > wrote:
> > > On Mon, Sep 23, 2019 at 02:51:24PM +0530, Anoop C S wrote:
> > > > Hi all,
> > > > 
> > > > I am attaching a patch as an attempt to implement
> > > > SMB_VFS_FCNTL(for
> > > > a
> > > > background see https://bugzilla.samba.org/show_bug.cgi?id=14060
> > > > ).
> > > > But I
> > > > have the following question.
> > > > 
> > > > int fcntl(int fd, int cmd, ... /* arg */ );
> > > > 
> > > > As per man page, fcntl(2) system call can accept a third
> > > > optional
> > > > argument. If present it can be of type int, struct flock *,
> > > > struct
> > > > f_owner_ex * or uint64_t *. Our current SMB_VFS_LOCK and
> > > > SMB_VFS_GETLOCK takes care of "Advisory record locking" and
> > > > "Open
> > > > file
> > > > description locks" commands which requires third argument of
> > > > type
> > > > struct flock *. Other important fact here to notice is that in
> > > > most
> > > > cases the required third argument type is int. The patch I have
> > > > prepared right now assumes third argument type to be int. 
> > > > 
> > > > So should we rename the call to something else(keeping third
> > > > argument
> > > > as int) or change the implementation to consider optional third
> > > > argument as variable?
> > > 
> > > I think we need a varargs argument here like the real fcntl
> > > definition.
> > 
> > Please find the attached patch in the above suggested direction.
> > For
> > now it is compile tested only. I will respond back afterwards with
> > some basic testing results.
> 
> An unexpected crash(during runtime) had to be resolved and Gitlab CI
> pipeline revealed some missing changes. Attaching the patch set(near-
> to-final) which successfully completed the following pipeline:
> 
> https://gitlab.com/samba-team/devel/samba/pipelines/85180275
> 
> Few recent fcntl() cmd flags needs to be conditionally checked inside
> vfs_default which should be the only missing here.

OK. This should be it. I hope attached patch covers the missing part
where recent fcntl() commands are detected during configure. A pipeline
has been completed successfully for the attached patches.

https://gitlab.com/samba-team/devel/samba/pipelines/86263033

Reviews are appreciated.

--=-tkAC6Hvg1qmkoFjdP/H8
Content-Disposition: attachment; filename="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"
Content-Transfer-Encoding: base64
Content-Type: text/x-patch; name="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"; charset="UTF-8"

RnJvbSA0OTZkMzNjMzY5OTg4ZjM3NzFlNzU1NzU1M2M3MjMwNGM0MjZlOWRjIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbm9vcCBDIFMgPGFub29wY3NAcmVkaGF0LmNvbT4KRGF0ZTog
RnJpLCAyNyBTZXAgMjAxOSAxMToxOTozNyArMDUzMApTdWJqZWN0OiBbUEFUQ0ggMS8yXSBzMzog
VkZTOiBBZGQgU01CX1ZGU19GQ05UTAoKU2lnbmVkLW9mZi1ieTogQW5vb3AgQyBTIDxhbm9vcGNz
QHJlZGhhdC5jb20+Ci0tLQogZXhhbXBsZXMvVkZTL3NrZWxfb3BhcXVlLmMgICAgICAgICAgICB8
ICAgOCArKwogZXhhbXBsZXMvVkZTL3NrZWxfdHJhbnNwYXJlbnQuYyAgICAgICB8ICAxNiArKysr
CiBzb3VyY2UzL2luY2x1ZGUvcHJvdG8uaCAgICAgICAgICAgICAgIHwgICAxICsKIHNvdXJjZTMv
aW5jbHVkZS9zbWJwcm9maWxlLmggICAgICAgICAgfCAgIDEgKwogc291cmNlMy9pbmNsdWRlL3Zm
cy5oICAgICAgICAgICAgICAgICB8ICAgNyArKwogc291cmNlMy9pbmNsdWRlL3Zmc19tYWNyb3Mu
aCAgICAgICAgICB8ICAgNSArKwogc291cmNlMy9saWIvc3lzdGVtLmMgICAgICAgICAgICAgICAg
ICB8ICAxNCArKysrCiBzb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYyAgICAgICAgIHwgIDQ2
ICsrKysrKysrKysrCiBzb3VyY2UzL21vZHVsZXMvdmZzX2Z1bGxfYXVkaXQuYyAgICAgIHwgIDIx
ICsrKysrCiBzb3VyY2UzL21vZHVsZXMvdmZzX25vdF9pbXBsZW1lbnRlZC5jIHwgICA5ICsrKwog
c291cmNlMy9tb2R1bGVzL3Zmc190aW1lX2F1ZGl0LmMgICAgICB8ICAyNiArKysrKysKIHNvdXJj
ZTMvc21iZC92ZnMuYyAgICAgICAgICAgICAgICAgICAgfCAgMTUgKysrKwogc291cmNlMy93c2Ny
aXB0ICAgICAgICAgICAgICAgICAgICAgICB8IDEwOSArKysrKysrKysrKysrKysrKysrKysrKysr
KwogMTMgZmlsZXMgY2hhbmdlZCwgMjc4IGluc2VydGlvbnMoKykKCmRpZmYgLS1naXQgYS9leGFt
cGxlcy9WRlMvc2tlbF9vcGFxdWUuYyBiL2V4YW1wbGVzL1ZGUy9za2VsX29wYXF1ZS5jCmluZGV4
IDU5ODA0Njc1YzhlLi5iZTM3NzM5NjVlNyAxMDA2NDQKLS0tIGEvZXhhbXBsZXMvVkZTL3NrZWxf
b3BhcXVlLmMKKysrIGIvZXhhbXBsZXMvVkZTL3NrZWxfb3BhcXVlLmMKQEAgLTQ0NCw2ICs0NDQs
MTMgQEAgc3RhdGljIGludCBza2VsX2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwKIAlyZXR1cm4gLTE7CiB9CiAKK3N0YXRpYyBpbnQgc2tlbF9mY250bChzdHJ1
Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJICAgICAgc3RydWN0IGZpbGVzX3N0cnVj
dCAqZnNwLCBpbnQgY21kLCB2YV9saXN0IGNtZF9hcmcpCit7CisJZXJybm8gPSBFTk9TWVM7CisJ
cmV0dXJuIC0xOworfQorCiBzdGF0aWMgaW50IHNrZWxfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZm
c19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJCQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAq
ZnNwLCBpbnQgbGVhc2V0eXBlKQogewpAQCAtMTA5MSw2ICsxMDk4LDcgQEAgc3RhdGljIHN0cnVj
dCB2ZnNfZm5fcG9pbnRlcnMgc2tlbF9vcGFxdWVfZm5zID0gewogCS5mYWxsb2NhdGVfZm4gPSBz
a2VsX2ZhbGxvY2F0ZSwKIAkubG9ja19mbiA9IHNrZWxfbG9jaywKIAkua2VybmVsX2Zsb2NrX2Zu
ID0gc2tlbF9rZXJuZWxfZmxvY2ssCisJLmZjbnRsX2ZuID0gc2tlbF9mY250bCwKIAkubGludXhf
c2V0bGVhc2VfZm4gPSBza2VsX2xpbnV4X3NldGxlYXNlLAogCS5nZXRsb2NrX2ZuID0gc2tlbF9n
ZXRsb2NrLAogCS5zeW1saW5rYXRfZm4gPSBza2VsX3N5bWxpbmthdCwKZGlmZiAtLWdpdCBhL2V4
YW1wbGVzL1ZGUy9za2VsX3RyYW5zcGFyZW50LmMgYi9leGFtcGxlcy9WRlMvc2tlbF90cmFuc3Bh
cmVudC5jCmluZGV4IGM3M2MyYTI2OTJiLi4wNjNhZjhmM2FlZCAxMDA2NDQKLS0tIGEvZXhhbXBs
ZXMvVkZTL3NrZWxfdHJhbnNwYXJlbnQuYworKysgYi9leGFtcGxlcy9WRlMvc2tlbF90cmFuc3Bh
cmVudC5jCkBAIC01NTIsNiArNTUyLDIxIEBAIHN0YXRpYyBpbnQgc2tlbF9rZXJuZWxfZmxvY2so
c3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJcmV0dXJuIFNNQl9WRlNfTkVYVF9L
RVJORUxfRkxPQ0soaGFuZGxlLCBmc3AsIHNoYXJlX21vZGUsIGFjY2Vzc19tYXNrKTsKIH0KIAor
c3RhdGljIGludCBza2VsX2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAor
CQkgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIHZhX2xpc3QgY21kX2Fy
ZykKK3sKKwl2b2lkICphcmc7CisJdmFfbGlzdCBkdXBfY21kX2FyZzsKKwlpbnQgcmVzdWx0Owor
CisJdmFfY29weShkdXBfY21kX2FyZywgY21kX2FyZyk7CisJYXJnID0gdmFfYXJnKGR1cF9jbWRf
YXJnLCB2b2lkICopOworCXJlc3VsdCA9IFNNQl9WRlNfTkVYVF9GQ05UTChoYW5kbGUsIGZzcCwg
Y21kLCBhcmcpOworCXZhX2VuZChkdXBfY21kX2FyZyk7CisKKwlyZXR1cm4gcmVzdWx0OworfQor
CiBzdGF0aWMgaW50IHNrZWxfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCiAJCQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgbGVhc2V0
eXBlKQogewpAQCAtMTM3OSw2ICsxMzk0LDcgQEAgc3RhdGljIHN0cnVjdCB2ZnNfZm5fcG9pbnRl
cnMgc2tlbF90cmFuc3BhcmVudF9mbnMgPSB7CiAJLmZhbGxvY2F0ZV9mbiA9IHNrZWxfZmFsbG9j
YXRlLAogCS5sb2NrX2ZuID0gc2tlbF9sb2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSBza2VsX2tl
cm5lbF9mbG9jaywKKwkuZmNudGxfZm4gPSBza2VsX2ZjbnRsLAogCS5saW51eF9zZXRsZWFzZV9m
biA9IHNrZWxfbGludXhfc2V0bGVhc2UsCiAJLmdldGxvY2tfZm4gPSBza2VsX2dldGxvY2ssCiAJ
LnN5bWxpbmthdF9mbiA9IHNrZWxfc3ltbGlua2F0LApkaWZmIC0tZ2l0IGEvc291cmNlMy9pbmNs
dWRlL3Byb3RvLmggYi9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaAppbmRleCA5MWE3YzAwZmVmMi4u
Yzk4ZjdjZmEzNTEgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCisrKyBiL3Nv
dXJjZTMvaW5jbHVkZS9wcm90by5oCkBAIC0yMTksNiArMjE5LDcgQEAgc3NpemVfdCBzeXNfc2Vu
ZChpbnQgcywgY29uc3Qgdm9pZCAqbXNnLCBzaXplX3QgbGVuLCBpbnQgZmxhZ3MpOwogc3NpemVf
dCBzeXNfcmVjdmZyb20oaW50IHMsIHZvaWQgKmJ1Ziwgc2l6ZV90IGxlbiwgaW50IGZsYWdzLCBz
dHJ1Y3Qgc29ja2FkZHIgKmZyb20sIHNvY2tsZW5fdCAqZnJvbWxlbik7CiBpbnQgc3lzX2ZjbnRs
X3B0cihpbnQgZmQsIGludCBjbWQsIHZvaWQgKmFyZyk7CiBpbnQgc3lzX2ZjbnRsX2xvbmcoaW50
IGZkLCBpbnQgY21kLCBsb25nIGFyZyk7CitpbnQgc3lzX2ZjbnRsX2ludChpbnQgZmQsIGludCBj
bWQsIGludCBhcmcpOwogdm9pZCB1cGRhdGVfc3RhdF9leF9tdGltZShzdHJ1Y3Qgc3RhdF9leCAq
ZHN0LCBzdHJ1Y3QgdGltZXNwZWMgd3JpdGVfdHMpOwogdm9pZCB1cGRhdGVfc3RhdF9leF9pdGlt
ZShzdHJ1Y3Qgc3RhdF9leCAqZHN0LCBzdHJ1Y3QgdGltZXNwZWMgaXRpbWUpOwogdm9pZCB1cGRh
dGVfc3RhdF9leF9jcmVhdGVfdGltZShzdHJ1Y3Qgc3RhdF9leCAqZHN0LCBzdHJ1Y3QgdGltZXNw
ZWMgY3JlYXRlX3RpbWUpOwpkaWZmIC0tZ2l0IGEvc291cmNlMy9pbmNsdWRlL3NtYnByb2ZpbGUu
aCBiL3NvdXJjZTMvaW5jbHVkZS9zbWJwcm9maWxlLmgKaW5kZXggY2M1NGRlYTI3MTAuLmVhMmEy
OWEwNzU4IDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUvc21icHJvZmlsZS5oCisrKyBiL3Nv
dXJjZTMvaW5jbHVkZS9zbWJwcm9maWxlLmgKQEAgLTgwLDYgKzgwLDcgQEAgc3RydWN0IHRldmVu
dF9jb250ZXh0OwogCVNNQlBST0ZJTEVfU1RBVFNfQkFTSUMoc3lzY2FsbF9mYWxsb2NhdGUpIFwK
IAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfZmNudGxfbG9jaykgXAogCVNNQlBST0ZJ
TEVfU1RBVFNfQkFTSUMoc3lzY2FsbF9rZXJuZWxfZmxvY2spIFwKKwlTTUJQUk9GSUxFX1NUQVRT
X0JBU0lDKHN5c2NhbGxfZmNudGwpIFwKIAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxf
bGludXhfc2V0bGVhc2UpIFwKIAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfZmNudGxf
Z2V0bG9jaykgXAogCVNNQlBST0ZJTEVfU1RBVFNfQkFTSUMoc3lzY2FsbF9yZWFkbGlua2F0KSBc
CmRpZmYgLS1naXQgYS9zb3VyY2UzL2luY2x1ZGUvdmZzLmggYi9zb3VyY2UzL2luY2x1ZGUvdmZz
LmgKaW5kZXggNmJhNjUzZjU2YzcuLjMyNjY4N2Y1ZWUxIDEwMDY0NAotLS0gYS9zb3VyY2UzL2lu
Y2x1ZGUvdmZzLmgKKysrIGIvc291cmNlMy9pbmNsdWRlL3Zmcy5oCkBAIC0yODIsNiArMjgyLDcg
QEAKIC8qIFZlcnNpb24gNDIgLSBNb3ZlIGNoYW5nZV90b191c2VyX2J5X2ZzcCgpIC0+IGNoYW5n
ZV90b191c2VyX2FuZF9zZXJ2aWNlX2J5X2ZzcCgpICovCiAvKiBWZXJzaW9uIDQyIC0gTW92ZSBb
dW5dYmVjb21lX3VzZXIqKCkgLT4gW3VuXWJlY29tZV91c2VyX3dpdGhvdXRfc2VydmljZSooKSAq
LwogLyogVmVyc2lvbiA0MiAtIE1vdmUgU01CX1ZGU19VTkxJTksgLT4gU01CX1ZGU19VTkxJTktB
VC4gKi8KKy8qIFZlcnNpb24gNDIgLSBBZGQgU01CX1ZGU19GQ05UTCAqLwogCiAjZGVmaW5lIFNN
Ql9WRlNfSU5URVJGQUNFX1ZFUlNJT04gNDIKIApAQCAtODEwLDYgKzgxMSw4IEBAIHN0cnVjdCB2
ZnNfZm5fcG9pbnRlcnMgewogCWJvb2wgKCpsb2NrX2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgb3AsIG9mZl90IG9mZnNl
dCwgb2ZmX3QgY291bnQsIGludCB0eXBlKTsKIAlpbnQgKCprZXJuZWxfZmxvY2tfZm4pKHN0cnVj
dCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsCiAJ
CQkgICAgICAgdWludDMyX3Qgc2hhcmVfbW9kZSwgdWludDMyX3QgYWNjZXNzX21hc2spOworCWlu
dCAoKmZjbnRsX2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJCXN0cnVj
dCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGNtZCwgdmFfbGlzdCBjbWRfYXJnKTsKIAlpbnQgKCps
aW51eF9zZXRsZWFzZV9mbikoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIHN0cnVj
dCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlwZSk7CiAJYm9vbCAoKmdldGxvY2tfZm4p
KHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpm
c3AsIG9mZl90ICpwb2Zmc2V0LCBvZmZfdCAqcGNvdW50LCBpbnQgKnB0eXBlLCBwaWRfdCAqcHBp
ZCk7CiAJaW50ICgqc3ltbGlua2F0X2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRs
ZSwKQEAgLTEzNDUsNiArMTM0OCw4IEBAIGJvb2wgc21iX3Zmc19jYWxsX2xvY2soc3RydWN0IHZm
c19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiBpbnQgc21iX3Zmc19jYWxsX2tlcm5lbF9mbG9jayhz
dHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCSAgICAgIHN0cnVjdCBmaWxlc19z
dHJ1Y3QgKmZzcCwgdWludDMyX3Qgc2hhcmVfbW9kZSwKIAkJCSAgICAgIHVpbnQzMl90IGFjY2Vz
c19tYXNrKTsKK2ludCBzbWJfdmZzX2NhbGxfZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCisJCSAgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIC4u
Lik7CiBpbnQgc21iX3Zmc19jYWxsX2xpbnV4X3NldGxlYXNlKHN0cnVjdCB2ZnNfaGFuZGxlX3N0
cnVjdCAqaGFuZGxlLAogCQkJCXN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlw
ZSk7CiBib29sIHNtYl92ZnNfY2FsbF9nZXRsb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAq
aGFuZGxlLApAQCAtMTc4MCw2ICsxNzg1LDggQEAgYm9vbCB2ZnNfbm90X2ltcGxlbWVudGVkX2xv
Y2sodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwgZmlsZXNfc3RydWN0ICpmc3AsIGludAogaW50
IHZmc19ub3RfaW1wbGVtZW50ZWRfa2VybmVsX2Zsb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZGxlLAogCQkJCSAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLAogCQkJCSAgICAg
dWludDMyX3Qgc2hhcmVfbW9kZSwgdWludDMyX3QgYWNjZXNzX21hc2spOworaW50IHZmc19ub3Rf
aW1wbGVtZW50ZWRfZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCisJCQkg
ICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIHZhX2xpc3QgY21kX2FyZyk7
CiBpbnQgdmZzX25vdF9pbXBsZW1lbnRlZF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRs
ZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBp
bnQgbGVhc2V0eXBlKTsKIGJvb2wgdmZzX25vdF9pbXBsZW1lbnRlZF9nZXRsb2NrKHZmc19oYW5k
bGVfc3RydWN0ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAqZnNwLApkaWZmIC0tZ2l0IGEvc291cmNl
My9pbmNsdWRlL3Zmc19tYWNyb3MuaCBiL3NvdXJjZTMvaW5jbHVkZS92ZnNfbWFjcm9zLmgKaW5k
ZXggMjk3OTc2OWU3ZDUuLjJkZDU5NzExZTE5IDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUv
dmZzX21hY3Jvcy5oCisrKyBiL3NvdXJjZTMvaW5jbHVkZS92ZnNfbWFjcm9zLmgKQEAgLTI4Niw2
ICsyODYsMTEgQEAKICNkZWZpbmUgU01CX1ZGU19ORVhUX0tFUk5FTF9GTE9DSyhoYW5kbGUsIGZz
cCwgc2hhcmVfbW9kZSwgYWNjZXNzX21hc2spCVwKIAlzbWJfdmZzX2NhbGxfa2VybmVsX2Zsb2Nr
KChoYW5kbGUpLT5uZXh0LCAoZnNwKSwgKHNoYXJlX21vZGUpLCAoYWNjZXNzX21hc2spKQogCisj
ZGVmaW5lIFNNQl9WRlNfRkNOVEwoZnNwLCBjbWQsIC4uLikgXAorCXNtYl92ZnNfY2FsbF9mY250
bCgoZnNwKS0+Y29ubi0+dmZzX2hhbmRsZXMsIChmc3ApLCAoY21kKSwgKF9fVkFfQVJHU19fKSkK
KyNkZWZpbmUgU01CX1ZGU19ORVhUX0ZDTlRMKGhhbmRsZSwgZnNwLCBjbWQsIC4uLikgXAorCXNt
Yl92ZnNfY2FsbF9mY250bCgoaGFuZGxlKS0+bmV4dCwgKGZzcCksIChjbWQpLCAoX19WQV9BUkdT
X18pKQorCiAjZGVmaW5lIFNNQl9WRlNfTElOVVhfU0VUTEVBU0UoZnNwLCBsZWFzZXR5cGUpIFwK
IAlzbWJfdmZzX2NhbGxfbGludXhfc2V0bGVhc2UoKGZzcCktPmNvbm4tPnZmc19oYW5kbGVzLCAo
ZnNwKSwgKGxlYXNldHlwZSkpCiAjZGVmaW5lIFNNQl9WRlNfTkVYVF9MSU5VWF9TRVRMRUFTRSho
YW5kbGUsIGZzcCwgbGVhc2V0eXBlKSBcCmRpZmYgLS1naXQgYS9zb3VyY2UzL2xpYi9zeXN0ZW0u
YyBiL3NvdXJjZTMvbGliL3N5c3RlbS5jCmluZGV4IGRlZjgyODFmYzQzLi42NzkzMzIyNTVjMCAx
MDA2NDQKLS0tIGEvc291cmNlMy9saWIvc3lzdGVtLmMKKysrIGIvc291cmNlMy9saWIvc3lzdGVt
LmMKQEAgLTEwOCw2ICsxMDgsMjAgQEAgaW50IHN5c19mY250bF9sb25nKGludCBmZCwgaW50IGNt
ZCwgbG9uZyBhcmcpCiAJcmV0dXJuIHJldDsKIH0KIAorLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKK0EgZmNudGwgd3Jh
cHBlciB0aGF0IHdpbGwgZGVhbCB3aXRoIEVJTlRSLgorKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK2ludCBzeXNf
ZmNudGxfaW50KGludCBmZCwgaW50IGNtZCwgaW50IGFyZykKK3sKKwlpbnQgcmV0OworCisJZG8g
eworCQlyZXQgPSBmY250bChmZCwgY21kLCBhcmcpOworCX0gd2hpbGUgKHJldCA9PSAtMSAmJiBl
cnJubyA9PSBFSU5UUik7CisJcmV0dXJuIHJldDsKK30KKwogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
ICBHZXQvU2V0IGFsbCB0aGUgcG9zc2libGUgdGltZSBmaWVsZHMgZnJvbSBhIHN0YXQgc3RydWN0
IGFzIGEgdGltZXNwZWMuCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwpkaWZmIC0tZ2l0IGEvc291cmNl
My9tb2R1bGVzL3Zmc19kZWZhdWx0LmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYwpp
bmRleCA3MzhiZTNiZjJkNi4uMTZlZWM4M2VkMWUgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9kdWxl
cy92ZnNfZGVmYXVsdC5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVsdC5jCkBAIC0y
NjE1LDYgKzI2MTUsNTEgQEAgc3RhdGljIGludCB2ZnN3cmFwX2tlcm5lbF9mbG9jayh2ZnNfaGFu
ZGxlX3N0cnVjdCAqaGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZzcCwKIAlyZXR1cm4gMDsKIH0KIAor
c3RhdGljIGludCB2ZnN3cmFwX2ZjbnRsKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIGZpbGVz
X3N0cnVjdCAqZnNwLCBpbnQgY21kLAorCQkJIHZhX2xpc3QgY21kX2FyZykKK3sKKwl2b2lkICph
cmdwOworCXZhX2xpc3QgZHVwX2NtZF9hcmc7CisJaW50IHJlc3VsdDsKKwlpbnQgdmFsOworCisJ
U1RBUlRfUFJPRklMRShzeXNjYWxsX2ZjbnRsKTsKKworCXZhX2NvcHkoZHVwX2NtZF9hcmcsIGNt
ZF9hcmcpOworCisJc3dpdGNoKGNtZCkgeworCWNhc2UgRl9TRVRMSzoKKwljYXNlIEZfU0VUTEtX
OgorCWNhc2UgRl9HRVRMSzoKKyNpZiBkZWZpbmVkKEhBVkVfT0ZEX0xPQ0tTKQorCWNhc2UgRl9P
RkRfU0VUTEs6CisJY2FzZSBGX09GRF9TRVRMS1c6CisJY2FzZSBGX09GRF9HRVRMSzoKKyNlbmRp
ZgorI2lmIGRlZmluZWQoSEFWRV9PV05FUl9FWCkKKwljYXNlIEZfR0VUT1dOX0VYOgorCWNhc2Ug
Rl9TRVRPV05fRVg6CisjZW5kaWYKKyNpZiBkZWZpbmVkKEhBVkVfUldfSElOVFMpCisJY2FzZSBG
X0dFVF9SV19ISU5UOgorCWNhc2UgRl9TRVRfUldfSElOVDoKKwljYXNlIEZfR0VUX0ZJTEVfUldf
SElOVDoKKwljYXNlIEZfU0VUX0ZJTEVfUldfSElOVDoKKyNlbmRpZgorCQlhcmdwID0gdmFfYXJn
KGR1cF9jbWRfYXJnLCB2b2lkICopOworCQlyZXN1bHQgPSBzeXNfZmNudGxfcHRyKGZzcC0+Zmgt
PmZkLCBjbWQsIGFyZ3ApOworCQlicmVhazsKKwlkZWZhdWx0OgorCQl2YWwgPSB2YV9hcmcoZHVw
X2NtZF9hcmcsIGludCk7CisJCXJlc3VsdCA9IHN5c19mY250bF9pbnQoZnNwLT5maC0+ZmQsIGNt
ZCwgdmFsKTsKKwl9CisKKwl2YV9lbmQoZHVwX2NtZF9hcmcpOworCisJRU5EX1BST0ZJTEUoc3lz
Y2FsbF9mY250bCk7CisJcmV0dXJuIHJlc3VsdDsKK30KKwogc3RhdGljIGJvb2wgdmZzd3JhcF9n
ZXRsb2NrKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAqZnNwLCBvZmZf
dCAqcG9mZnNldCwgb2ZmX3QgKnBjb3VudCwgaW50ICpwdHlwZSwgcGlkX3QgKnBwaWQpCiB7CiAJ
Ym9vbCByZXN1bHQ7CkBAIC0zNTA2LDYgKzM1NTEsNyBAQCBzdGF0aWMgc3RydWN0IHZmc19mbl9w
b2ludGVycyB2ZnNfZGVmYXVsdF9mbnMgPSB7CiAJLmZhbGxvY2F0ZV9mbiA9IHZmc3dyYXBfZmFs
bG9jYXRlLAogCS5sb2NrX2ZuID0gdmZzd3JhcF9sb2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSB2
ZnN3cmFwX2tlcm5lbF9mbG9jaywKKwkuZmNudGxfZm4gPSB2ZnN3cmFwX2ZjbnRsLAogCS5saW51
eF9zZXRsZWFzZV9mbiA9IHZmc3dyYXBfbGludXhfc2V0bGVhc2UsCiAJLmdldGxvY2tfZm4gPSB2
ZnN3cmFwX2dldGxvY2ssCiAJLnN5bWxpbmthdF9mbiA9IHZmc3dyYXBfc3ltbGlua2F0LApkaWZm
IC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19mdWxsX2F1ZGl0LmMgYi9zb3VyY2UzL21vZHVs
ZXMvdmZzX2Z1bGxfYXVkaXQuYwppbmRleCBkZTU5MWViMjEzNi4uNzU3Y2QyNmQzZjEgMTAwNjQ0
Ci0tLSBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfZnVsbF9hdWRpdC5jCisrKyBiL3NvdXJjZTMvbW9k
dWxlcy92ZnNfZnVsbF9hdWRpdC5jCkBAIC0xNTEsNiArMTUxLDcgQEAgdHlwZWRlZiBlbnVtIF92
ZnNfb3BfdHlwZSB7CiAJU01CX1ZGU19PUF9GQUxMT0NBVEUsCiAJU01CX1ZGU19PUF9MT0NLLAog
CVNNQl9WRlNfT1BfS0VSTkVMX0ZMT0NLLAorCVNNQl9WRlNfT1BfRkNOVEwsCiAJU01CX1ZGU19P
UF9MSU5VWF9TRVRMRUFTRSwKIAlTTUJfVkZTX09QX0dFVExPQ0ssCiAJU01CX1ZGU19PUF9TWU1M
SU5LQVQsCkBAIC0xNzM0LDYgKzE3MzUsMjUgQEAgc3RhdGljIGludCBzbWJfZnVsbF9hdWRpdF9r
ZXJuZWxfZmxvY2soc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJcmV0dXJuIHJl
c3VsdDsKIH0KIAorc3RhdGljIGludCBzbWJfZnVsbF9hdWRpdF9mY250bChzdHJ1Y3QgdmZzX2hh
bmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJCQlzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsCisJCQkJ
aW50IGNtZCwgdmFfbGlzdCBjbWRfYXJnKQoreworCXZvaWQgKmFyZzsKKwl2YV9saXN0IGR1cF9j
bWRfYXJnOworCWludCByZXN1bHQ7CisKKwl2YV9jb3B5KGR1cF9jbWRfYXJnLCBjbWRfYXJnKTsK
KwlhcmcgPSB2YV9hcmcoZHVwX2NtZF9hcmcsIHZvaWQgKik7CisJcmVzdWx0ID0gU01CX1ZGU19O
RVhUX0ZDTlRMKGhhbmRsZSwgZnNwLCBjbWQsIGFyZyk7CisJdmFfZW5kKGR1cF9jbWRfYXJnKTsK
KworCWRvX2xvZyhTTUJfVkZTX09QX0ZDTlRMLCAocmVzdWx0ID49IDApLCBoYW5kbGUsICIlcyIs
CisJICAgICAgIGZzcF9zdHJfZG9fbG9nKGZzcCkpOworCisJcmV0dXJuIHJlc3VsdDsKK30KKwog
c3RhdGljIGludCBzbWJfZnVsbF9hdWRpdF9saW51eF9zZXRsZWFzZSh2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZzcCwKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIGludCBsZWFzZXR5cGUpCiB7CkBAIC0yOTgxLDYgKzMwMDEsNyBAQCBzdGF0aWMgc3Ry
dWN0IHZmc19mbl9wb2ludGVycyB2ZnNfZnVsbF9hdWRpdF9mbnMgPSB7CiAJLmZhbGxvY2F0ZV9m
biA9IHNtYl9mdWxsX2F1ZGl0X2ZhbGxvY2F0ZSwKIAkubG9ja19mbiA9IHNtYl9mdWxsX2F1ZGl0
X2xvY2ssCiAJLmtlcm5lbF9mbG9ja19mbiA9IHNtYl9mdWxsX2F1ZGl0X2tlcm5lbF9mbG9jaywK
KwkuZmNudGxfZm4gPSBzbWJfZnVsbF9hdWRpdF9mY250bCwKIAkubGludXhfc2V0bGVhc2VfZm4g
PSBzbWJfZnVsbF9hdWRpdF9saW51eF9zZXRsZWFzZSwKIAkuZ2V0bG9ja19mbiA9IHNtYl9mdWxs
X2F1ZGl0X2dldGxvY2ssCiAJLnN5bWxpbmthdF9mbiA9IHNtYl9mdWxsX2F1ZGl0X3N5bWxpbmth
dCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfbm90X2ltcGxlbWVudGVkLmMgYi9z
b3VyY2UzL21vZHVsZXMvdmZzX25vdF9pbXBsZW1lbnRlZC5jCmluZGV4IGZmY2JhN2JkOGRiLi4y
YjkwNmIzY2YyOCAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19ub3RfaW1wbGVtZW50
ZWQuYworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX25vdF9pbXBsZW1lbnRlZC5jCkBAIC00NDIs
NiArNDQyLDE0IEBAIGludCB2ZnNfbm90X2ltcGxlbWVudGVkX2tlcm5lbF9mbG9jayhzdHJ1Y3Qg
dmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAlyZXR1cm4gLTE7CiB9CiAKK2ludCB2ZnNfbm90
X2ltcGxlbWVudGVkX2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAorCQkJ
ICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgY21kLAorCQkJICAgICAgdmFfbGlz
dCBjbWRfYXJnKQoreworCWVycm5vID0gRU5PU1lTOworCXJldHVybiAtMTsKK30KKwogaW50IHZm
c19ub3RfaW1wbGVtZW50ZWRfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCiAJCQkJICAgICAgIHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNl
dHlwZSkKIHsKQEAgLTEwOTUsNiArMTEwMyw3IEBAIHN0YXRpYyBzdHJ1Y3QgdmZzX2ZuX3BvaW50
ZXJzIHZmc19ub3RfaW1wbGVtZW50ZWRfZm5zID0gewogCS5mYWxsb2NhdGVfZm4gPSB2ZnNfbm90
X2ltcGxlbWVudGVkX2ZhbGxvY2F0ZSwKIAkubG9ja19mbiA9IHZmc19ub3RfaW1wbGVtZW50ZWRf
bG9jaywKIAkua2VybmVsX2Zsb2NrX2ZuID0gdmZzX25vdF9pbXBsZW1lbnRlZF9rZXJuZWxfZmxv
Y2ssCisJLmZjbnRsX2ZuID0gdmZzX25vdF9pbXBsZW1lbnRlZF9mY250bCwKIAkubGludXhfc2V0
bGVhc2VfZm4gPSB2ZnNfbm90X2ltcGxlbWVudGVkX2xpbnV4X3NldGxlYXNlLAogCS5nZXRsb2Nr
X2ZuID0gdmZzX25vdF9pbXBsZW1lbnRlZF9nZXRsb2NrLAogCS5zeW1saW5rYXRfZm4gPSB2ZnNf
bm90X2ltcGxlbWVudGVkX3N5bWxpbmthdCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92
ZnNfdGltZV9hdWRpdC5jIGIvc291cmNlMy9tb2R1bGVzL3Zmc190aW1lX2F1ZGl0LmMKaW5kZXgg
MjEzZWExMGIxN2YuLjdmYTYxNjE5NDVhIDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZz
X3RpbWVfYXVkaXQuYworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX3RpbWVfYXVkaXQuYwpAQCAt
MTM0NCw2ICsxMzQ0LDMxIEBAIHN0YXRpYyBpbnQgc21iX3RpbWVfYXVkaXRfa2VybmVsX2Zsb2Nr
KHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCXJldHVybiByZXN1bHQ7CiB9CiAK
K3N0YXRpYyBpbnQgc21iX3RpbWVfYXVkaXRfZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCisJCQkJc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLAorCQkJCWludCBjbWQsIHZh
X2xpc3QgY21kX2FyZykKK3sKKwl2b2lkICphcmc7CisJdmFfbGlzdCBkdXBfY21kX2FyZzsKKwlp
bnQgcmVzdWx0OworCXN0cnVjdCB0aW1lc3BlYyB0czEsdHMyOworCWRvdWJsZSB0aW1lZGlmZjsK
KworCXZhX2NvcHkoZHVwX2NtZF9hcmcsIGNtZF9hcmcpOworCWFyZyA9IHZhX2FyZyhkdXBfY21k
X2FyZywgdm9pZCAqKTsKKwljbG9ja19nZXR0aW1lX21vbm8oJnRzMSk7CisJcmVzdWx0ID0gU01C
X1ZGU19ORVhUX0ZDTlRMKGhhbmRsZSwgZnNwLCBjbWQsIGFyZyk7CisJY2xvY2tfZ2V0dGltZV9t
b25vKCZ0czIpOworCXZhX2VuZChkdXBfY21kX2FyZyk7CisKKwl0aW1lZGlmZiA9IG5zZWNfdGlt
ZV9kaWZmKCZ0czIsJnRzMSkqMS4wZS05OworCWlmICh0aW1lZGlmZiA+IGF1ZGl0X3RpbWVvdXQp
IHsKKwkJc21iX3RpbWVfYXVkaXRfbG9nX2ZzcCgia2VybmVsX2Zsb2NrIiwgdGltZWRpZmYsIGZz
cCk7CisJfQorCisJcmV0dXJuIHJlc3VsdDsKK30KKwogc3RhdGljIGludCBzbWJfdGltZV9hdWRp
dF9saW51eF9zZXRsZWFzZSh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCQkJCQkgZmlsZXNf
c3RydWN0ICpmc3AsCiAJCQkJCSBpbnQgbGVhc2V0eXBlKQpAQCAtMjg2Niw2ICsyODkxLDcgQEAg
c3RhdGljIHN0cnVjdCB2ZnNfZm5fcG9pbnRlcnMgdmZzX3RpbWVfYXVkaXRfZm5zID0gewogCS5m
YWxsb2NhdGVfZm4gPSBzbWJfdGltZV9hdWRpdF9mYWxsb2NhdGUsCiAJLmxvY2tfZm4gPSBzbWJf
dGltZV9hdWRpdF9sb2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSBzbWJfdGltZV9hdWRpdF9rZXJu
ZWxfZmxvY2ssCisJLmZjbnRsX2ZuID0gc21iX3RpbWVfYXVkaXRfZmNudGwsCiAJLmxpbnV4X3Nl
dGxlYXNlX2ZuID0gc21iX3RpbWVfYXVkaXRfbGludXhfc2V0bGVhc2UsCiAJLmdldGxvY2tfZm4g
PSBzbWJfdGltZV9hdWRpdF9nZXRsb2NrLAogCS5zeW1saW5rYXRfZm4gPSBzbWJfdGltZV9hdWRp
dF9zeW1saW5rYXQsCmRpZmYgLS1naXQgYS9zb3VyY2UzL3NtYmQvdmZzLmMgYi9zb3VyY2UzL3Nt
YmQvdmZzLmMKaW5kZXggYjgzY2YxZTRkNTUuLmJlZjc5ZTRjNjRlIDEwMDY0NAotLS0gYS9zb3Vy
Y2UzL3NtYmQvdmZzLmMKKysrIGIvc291cmNlMy9zbWJkL3Zmcy5jCkBAIC0yMTk1LDYgKzIxOTUs
MjEgQEAgaW50IHNtYl92ZnNfY2FsbF9rZXJuZWxfZmxvY2soc3RydWN0IHZmc19oYW5kbGVfc3Ry
dWN0ICpoYW5kbGUsCiAJCQkJCSBhY2Nlc3NfbWFzayk7CiB9CiAKK2ludCBzbWJfdmZzX2NhbGxf
ZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCisJCSAgICAgICBzdHJ1Y3Qg
ZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIC4uLikKK3sKKwlpbnQgcmVzdWx0OworCXZhX2xp
c3QgY21kX2FyZzsKKworCVZGU19GSU5EKGZjbnRsKTsKKworCXZhX3N0YXJ0KGNtZF9hcmcsIGNt
ZCk7CisJcmVzdWx0ID0gaGFuZGxlLT5mbnMtPmZjbnRsX2ZuKGhhbmRsZSwgZnNwLCBjbWQsIGNt
ZF9hcmcpOworCXZhX2VuZChjbWRfYXJnKTsKKworCXJldHVybiByZXN1bHQ7Cit9CisKIGludCBz
bWJfdmZzX2NhbGxfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5k
bGUsCiAJCQkJc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgbGVhc2V0eXBlKQogewpkaWZm
IC0tZ2l0IGEvc291cmNlMy93c2NyaXB0IGIvc291cmNlMy93c2NyaXB0CmluZGV4IGQ0NTIyMjYy
NWM0Li5lMjliZjY1N2I1ZSAxMDA2NDQKLS0tIGEvc291cmNlMy93c2NyaXB0CisrKyBiL3NvdXJj
ZTMvd3NjcmlwdApAQCAtMTExOSw2ICsxMTE5LDExNSBAQCBlcnI6CiAgICAgICAgICAgICBleGVj
dXRlPVRydWUsCiAgICAgICAgICAgICBtc2c9IkNoZWNraW5nIHdoZXRoZXIgZmNudGwgbG9jayBz
dXBwb3J0cyBvcGVuIGZpbGUgZGVzY3JpcHRpb24gbG9ja3MiKQogCisgICAgY29uZi5DSEVDS19D
T0RFKCcnJworI2luY2x1ZGUgPGZjbnRsLmg+CisjaW5jbHVkZSA8dW5pc3RkLmg+CisjaW5jbHVk
ZSA8c3RkbGliLmg+CisjaW5jbHVkZSA8c3lzL3NvY2tldC5oPgorCitpbnQgbWFpbih2b2lkKQor
eworICAgICAgICBpbnQgc29ja2ZkLCByZXQ7CisgICAgICAgIHN0cnVjdCBmX293bmVyX2V4IG93
bmVyLCBnZXRfb3duZXI7CisKKyAgICAgICAgc29ja2ZkID0gc29ja2V0KEFGX1VOSVgsIFNPQ0tf
U1RSRUFNLCAwKTsKKyAgICAgICAgaWYgKHNvY2tmZCA9PSAtMSkgeworICAgICAgICAgICAgZ290
byBlcnI7CisgICAgICAgIH0KKworICAgICAgICBvd25lci50eXBlID0gRl9PV05FUl9QSUQ7Cisg
ICAgICAgIG93bmVyLnBpZCA9IGdldHBpZCgpOworCisgICAgICAgIHJldCA9IGZjbnRsKHNvY2tm
ZCwgRl9TRVRPV05fRVgsICZvd25lcik7CisgICAgICAgIGlmIChyZXQgPT0gLTEpIHsKKyAgICAg
ICAgICAgIGdvdG8gZXJyOworICAgICAgICB9CisKKyAgICAgICAgcmV0ID0gZmNudGwoc29ja2Zk
LCBGX0dFVE9XTl9FWCwgJmdldF9vd25lcik7CisgICAgICAgIGlmIChyZXQgPT0gLTEpIHsKKyAg
ICAgICAgICAgIGdvdG8gZXJyOworICAgICAgICB9CisKKyAgICAgICAgaWYgKGdldF9vd25lci50
eXBlICE9IEZfT1dORVJfUElEKSB7CisgICAgICAgICAgICBnb3RvIGVycjsKKyAgICAgICAgfQor
CisgICAgICAgIGlmIChnZXRfb3duZXIucGlkICE9IGdldHBpZCgpKSB7CisgICAgICAgICAgICBn
b3RvIGVycjsKKyAgICAgICAgfQorCisgICAgICAgIGNsb3NlKHNvY2tmZCk7CisgICAgICAgIGV4
aXQoMCk7CitlcnI6CisgICAgICAgIGNsb3NlKHNvY2tmZCk7CisgICAgICAgIGV4aXQoMSk7Cit9
JycnLAorICAgICAgICAgICAgJ0hBVkVfRl9PV05FUl9FWCcsCisgICAgICAgICAgICBhZGRtYWlu
PUZhbHNlLAorICAgICAgICAgICAgZXhlY3V0ZT1UcnVlLAorICAgICAgICAgICAgbXNnPSJDaGVj
a2luZyB3aGV0aGVyIGZjbnRsIHN1cHBvcnRzIGZsYWdzIHRvIHNlbmQgZGlyZWN0IEkvTyBhdmFp
bGFiaWxpdHkgc2lnbmFscyIpCisKKyAgICBjb25mLkNIRUNLX0NPREUoJycnCisjaW5jbHVkZSA8
ZmNudGwuaD4KKyNpbmNsdWRlIDx1bmlzdGQuaD4KKyNpbmNsdWRlIDxzdGRsaWIuaD4KKyNpbmNs
dWRlIDxzdGRpbnQuaD4KKworI2RlZmluZSBEQVRBICJoaW50dGVzdC5mY250bCIKKworaW50IG1h
aW4odm9pZCkKK3sKKyAgICAgICAgdWludDY0X3QgKmhpbnQsIGdldF9oaW50OworICAgICAgICBp
bnQgZmQ7CisKKyAgICAgICAgZmQgPSBvcGVuKERBVEEsIE9fUkRPTkxZIHwgT19DUkVBVCB8IE9f
RVhDTCk7CisgICAgICAgIGlmIChmZCA9PSAtMSkgeworICAgICAgICAgICAgZ290byBlcnI7Cisg
ICAgICAgIH0KKworICAgICAgICAqaGludCA9IFJXSF9XUklURV9MSUZFX1NIT1JUOworICAgICAg
ICBpbnQgcmV0ID0gZmNudGwoZmQsIEZfU0VUX1JXX0hJTlQsIGhpbnQpOworICAgICAgICBpZiAo
cmV0ID09IC0xKSB7CisgICAgICAgICAgICBnb3RvIGVycjsKKyAgICAgICAgfQorCisgICAgICAg
IHJldCA9IGZjbnRsKGZkLCBGX0dFVF9SV19ISU5ULCAmZ2V0X2hpbnQpOworICAgICAgICBpZiAo
cmV0ID09IC0xKSB7CisgICAgICAgICAgICBnb3RvIGVycjsKKyAgICAgICAgfQorCisgICAgICAg
IGlmIChnZXRfaGludCAhPSBSV0hfV1JJVEVfTElGRV9TSE9SVCkgeworICAgICAgICAgICAgZ290
byBlcnI7CisgICAgICAgIH0KKworICAgICAgICAqaGludCA9IFJXSF9XUklURV9MSUZFX0VYVFJF
TUU7CisgICAgICAgIHJldCA9IGZjbnRsKGZkLCBGX1NFVF9GSUxFX1JXX0hJTlQsIGhpbnQpOwor
ICAgICAgICBpZiAocmV0ID09IC0xKSB7CisgICAgICAgICAgICBnb3RvIGVycjsKKyAgICAgICAg
fQorCisgICAgICAgIHJldCA9IGZjbnRsKGZkLCBGX0dFVF9GSUxFX1JXX0hJTlQsICZnZXRfaGlu
dCk7CisgICAgICAgIGlmIChyZXQgPT0gLTEpIHsKKyAgICAgICAgICAgIGdvdG8gZXJyOworICAg
ICAgICB9CisKKyAgICAgICAgaWYgKGdldF9oaW50ICE9IFJXSF9XUklURV9MSUZFX0VYVFJFTUUp
IHsKKyAgICAgICAgICAgIGdvdG8gZXJyOworICAgICAgICB9CisKKyAgICAgICAgY2xvc2UoZmQp
OworICAgICAgICB1bmxpbmsoREFUQSk7CisgICAgICAgIGV4aXQoMCk7CitlcnI6CisgICAgICAg
IGNsb3NlKGZkKTsKKyAgICAgICAgdW5saW5rKERBVEEpOworICAgICAgICBleGl0KDEpOworfScn
JywKKyAgICAgICAgICAgICdIQVZFX1JXX0hJTlRTJywKKyAgICAgICAgICAgIGFkZG1haW49RmFs
c2UsCisgICAgICAgICAgICBleGVjdXRlPVRydWUsCisgICAgICAgICAgICBtc2c9IkNoZWNraW5n
IHdoZXRoZXIgZmNudGwgc3VwcG9ydHMgc2V0dGluZy9nZXRpbmcgaGludHMiKQorCiAgICAgY29u
Zi5DSEVDS19TVFJVQ1RVUkVfTUVNQkVSKCdzdHJ1Y3Qgc3RhdCcsICdzdF9tdGltLnR2X25zZWMn
LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmU9J0hBVkVfU1RSVUNUX1NU
QVRfU1RfTVRJTV9UVl9OU0VDJykgIyBMaW51eCwgU29sYXJpcwogICAgIGNvbmYuQ0hFQ0tfU1RS
VUNUVVJFX01FTUJFUignc3RydWN0IHN0YXQnLCAnc3RfbXRpbWVuc2VjJywKLS0gCjIuMjEuMAoK



--=-tkAC6Hvg1qmkoFjdP/H8
Content-Disposition: attachment;
	filename*0=0002-s3-VFS-Use-SMB_VFS_FCNTL-to-set-fd-flags-in-open_fil.pat;
	filename*1=ch
Content-Transfer-Encoding: base64
Content-Type: text/x-patch;
	name="0002-s3-VFS-Use-SMB_VFS_FCNTL-to-set-fd-flags-in-open_fil.patch";
	charset="UTF-8"

RnJvbSBlZTg1NDhiZWE5Yjg4Y2YxYjQxNmU4YmYyMmRhZGFjZjU4MjcxOGYyIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbm9vcCBDIFMgPGFub29wY3NAcmVkaGF0LmNvbT4KRGF0ZTog
RnJpLCAyNyBTZXAgMjAxOSAxMjowNzo0MCArMDUzMApTdWJqZWN0OiBbUEFUQ0ggMi8yXSBzMzog
VkZTOiBVc2UgU01CX1ZGU19GQ05UTCB0byBzZXQgZmQgZmxhZ3MgaW4gb3Blbl9maWxlKCkKClNp
Z25lZC1vZmYtYnk6IEFub29wIEMgUyA8YW5vb3Bjc0ByZWRoYXQuY29tPgotLS0KIHNvdXJjZTMv
c21iZC9vcGVuLmMgIHwgIDIgKy0KIHNvdXJjZTMvc21iZC9wcm90by5oIHwgIDEgKwogc291cmNl
My9zbWJkL3Zmcy5jICAgfCAzMCArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysKIDMgZmls
ZXMgY2hhbmdlZCwgMzIgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBh
L3NvdXJjZTMvc21iZC9vcGVuLmMgYi9zb3VyY2UzL3NtYmQvb3Blbi5jCmluZGV4IDU4NjAxNTUy
NjNiLi45NDkzMDIxYzQ4ZCAxMDA2NDQKLS0tIGEvc291cmNlMy9zbWJkL29wZW4uYworKysgYi9z
b3VyY2UzL3NtYmQvb3Blbi5jCkBAIC0xMzI3LDcgKzEzMjcsNyBAQCBzdGF0aWMgTlRTVEFUVVMg
b3Blbl9maWxlKGZpbGVzX3N0cnVjdCAqZnNwLAogCQkJICogdG9vLiBXaXRoIGJsb2NraW5nIGZp
bGUgZGVzY3JpcHRvcnMgdGhpcwogCQkJICogZG9lcyBub3QgaGFwcGVuLgogCQkJICovCi0JCQly
ZXQgPSBzZXRfYmxvY2tpbmcoZnNwLT5maC0+ZmQsIHRydWUpOworCQkJcmV0ID0gdmZzX3NldF9i
bG9ja2luZyhmc3AsIHRydWUpOwogCQkJaWYgKHJldCA9PSAtMSkgewogCQkJCXN0YXR1cyA9IG1h
cF9udF9lcnJvcl9mcm9tX3VuaXgoZXJybm8pOwogCQkJCURCR19XQVJOSU5HKCJDb3VsZCBub3Qg
c2V0IGZkIHRvIGJsb2NraW5nOiAiCmRpZmYgLS1naXQgYS9zb3VyY2UzL3NtYmQvcHJvdG8uaCBi
L3NvdXJjZTMvc21iZC9wcm90by5oCmluZGV4IDExYzlkYzBmOGIxLi5lOWQwNDQ3NGRmNiAxMDA2
NDQKLS0tIGEvc291cmNlMy9zbWJkL3Byb3RvLmgKKysrIGIvc291cmNlMy9zbWJkL3Byb3RvLmgK
QEAgLTEyMzAsNiArMTIzMCw3IEBAIGludCB2ZnNfYWxsb2NhdGVfZmlsZV9zcGFjZShmaWxlc19z
dHJ1Y3QgKmZzcCwgdWludDY0X3QgbGVuKTsKIGludCB2ZnNfc2V0X2ZpbGVsZW4oZmlsZXNfc3Ry
dWN0ICpmc3AsIG9mZl90IGxlbik7CiBpbnQgdmZzX3Nsb3dfZmFsbG9jYXRlKGZpbGVzX3N0cnVj
dCAqZnNwLCBvZmZfdCBvZmZzZXQsIG9mZl90IGxlbik7CiBpbnQgdmZzX2ZpbGxfc3BhcnNlKGZp
bGVzX3N0cnVjdCAqZnNwLCBvZmZfdCBsZW4pOworaW50IHZmc19zZXRfYmxvY2tpbmcoZmlsZXNf
c3RydWN0ICpmc3AsIGJvb2wgc2V0KTsKIG9mZl90IHZmc190cmFuc2Zlcl9maWxlKGZpbGVzX3N0
cnVjdCAqaW4sIGZpbGVzX3N0cnVjdCAqb3V0LCBvZmZfdCBuKTsKIGNvbnN0IGNoYXIgKnZmc19y
ZWFkZGlybmFtZShjb25uZWN0aW9uX3N0cnVjdCAqY29ubiwgdm9pZCAqcCwKIAkJCSAgICBTTUJf
U1RSVUNUX1NUQVQgKnNidWYsIGNoYXIgKip0YWxsb2NlZCk7CmRpZmYgLS1naXQgYS9zb3VyY2Uz
L3NtYmQvdmZzLmMgYi9zb3VyY2UzL3NtYmQvdmZzLmMKaW5kZXggYmVmNzllNGM2NGUuLmNkNmQw
ZjI1YzA0IDEwMDY0NAotLS0gYS9zb3VyY2UzL3NtYmQvdmZzLmMKKysrIGIvc291cmNlMy9zbWJk
L3Zmcy5jCkBAIC03MTEsNiArNzExLDM2IEBAIGludCB2ZnNfZmlsbF9zcGFyc2UoZmlsZXNfc3Ry
dWN0ICpmc3AsIG9mZl90IGxlbikKIAlyZXR1cm4gcmV0OwogfQogCisvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKgorIFNldCBhIGZkIGludG8gYmxvY2tpbmcvbm9uYmxvY2tpbmcgbW9kZSB0aHJvdWdo
IFZGUworKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKworaW50IHZmc19zZXRfYmxvY2tpbmcoZmls
ZXNfc3RydWN0ICpmc3AsIGJvb2wgc2V0KQoreworCWludCB2YWw7CisjaWZkZWYgT19OT05CTE9D
SworI2RlZmluZSBGTEFHX1RPX1NFVCBPX05PTkJMT0NLCisjZWxzZQorI2lmZGVmIFNZU1YKKyNk
ZWZpbmUgRkxBR19UT19TRVQgT19OREVMQVkKKyNlbHNlIC8qIEJTRCAqLworI2RlZmluZSBGTEFH
X1RPX1NFVCBGTkRFTEFZCisjZW5kaWYKKyNlbmRpZgorCWlmICgodmFsID0gU01CX1ZGU19GQ05U
TChmc3AsIEZfR0VURkwsIDApKSA9PSAtMSkgeworCQlyZXR1cm4gLTE7CisJfQorCisJaWYgKHNl
dCkgeworCQl2YWwgJj0gfkZMQUdfVE9fU0VUOworCX0gZWxzZSB7CisJCXZhbCB8PSBGTEFHX1RP
X1NFVDsKKwl9CisKKwlyZXR1cm4gU01CX1ZGU19GQ05UTChmc3AsIEZfU0VURkwsIHZhbCk7Cisj
dW5kZWYgRkxBR19UT19TRVQKK30KKwogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICBUcmFuc2ZlciBz
b21lIGRhdGEgKG4gYnl0ZXMpIGJldHdlZW4gdHdvIGZpbGVfc3RydWN0J3MuCiAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLwotLSAKMi4yMS4wCgo=


--=-tkAC6Hvg1qmkoFjdP/H8--


