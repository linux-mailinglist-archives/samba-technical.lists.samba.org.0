Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id EE4CCCB79A
	for <lists+samba-technical@lfdr.de>; Fri,  4 Oct 2019 11:49:45 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=Cc:From:List-Id:Date:To:Subject;
	bh=69BBKCuNzWdjdicsn9hBZWqT1k5Flim04MK4sF9+afA=; b=vKC4a4/gODOjWSFS+ufpUQZ9Ug
	CSDnuQx7B2WZKkXz6h2vZhWtL4JLwPQE8RdE84RJnf8Eus4Fniw+pGThzpSp01/MQi1UjB8mv9UA9
	qhA+6uHagJ17h1DCO8iLZzCV/LI/XiHolgy23luo6BugMDvVlYskUW+WhTVIM0i0mBlY9/uAFPCJ+
	VxpoxymzjrvuElyIubD0D6u0MLPMMomicBxCu6ri1Gj0VvcZH34PadK4YBJkSPBA7I+dNpVad/W52
	tjD1FOzx9xjoEfC+9qVRkNwB7WdZ+uo7sqETwTAs+wszWFEHrkO1QH/4+XpuW8Q1YxGLqWOF5w0Sa
	vYM37UGQ==;
Received: from localhost ([::1]:51608 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1iGKCe-0014li-OX; Fri, 04 Oct 2019 09:48:48 +0000
Received: from confino.investici.org ([212.103.72.250]:47141) 
 by hr1.samba.org with esmtps (TLS1.2:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1iGKCZ-0014la-FA
 for samba-technical@lists.samba.org; Fri, 04 Oct 2019 09:48:46 +0000
Received: from mx1.investici.org (localhost [127.0.0.1])
 by confino.investici.org (Postfix) with ESMTP id 29F81211C8;
 Fri,  4 Oct 2019 09:48:40 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cryptolab.net;
 s=stigmate; t=1570182520;
 bh=69BBKCuNzWdjdicsn9hBZWqT1k5Flim04MK4sF9+afA=;
 h=Subject:From:To:Cc:Date:In-Reply-To:References:From;
 b=MuOpvdoao+S5LFds4vKdPGFaTTMnp9I+PiWNFErRiRZN32R9ENRbflw41esYNUVN6
 oJhnnz0vzUCozmzqyC+FZxgIgx4IijbnYr4rHCnclBZ2LzXVdpYP96pLqQ2T9UQYba
 bTw+fHv0VdUMb5oFg+bpVMKy0RBcd/8aHtKOCng0=
Received: from [212.103.72.250] (mx1.investici.org [212.103.72.250])
 (Authenticated sender: anoopcs@autistici.org) by localhost (Postfix) with
 ESMTPSA id B5240211BE; Fri,  4 Oct 2019 09:48:36 +0000 (UTC)
Message-ID: <58c5330f19d13a00c107a7d4ddb4c365abb5e067.camel@cryptolab.net>
Subject: Re: Implementing SMB_VFS_FCNTL in Samba
To: samba-technical@lists.samba.org
Date: Fri, 04 Oct 2019 15:17:01 +0530
In-Reply-To: <67b7870a-faed-78bd-8651-6e3226142e70@samba.org>
References: <7024afc6236a656134f867288cdb37579425e3ee.camel@cryptolab.net>
 <20190923153107.GA4325@jeremy-ThinkPad-X1>
 <98add807a4ac55e5f401522fbdfd47ddf2358d16.camel@cryptolab.net>
 <e9469e1d026b34cf46c0012a463a2fbe610ffd17.camel@cryptolab.net>
 <a71d6def280a3c6125009f3d1eafff54f8f059b4.camel@cryptolab.net>
 <cb57dbab50e84cd24fdccd75530d11d5dbd002ed.camel@cryptolab.net>
 <67b7870a-faed-78bd-8651-6e3226142e70@samba.org>
Content-Type: multipart/mixed; boundary="=-1oB/HmJ46LG8d4VHOV59"
User-Agent: Evolution 3.32.4 (3.32.4-1.fc30) 
MIME-Version: 1.0
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Anoop C S via samba-technical <samba-technical@lists.samba.org>
Reply-To: Anoop C S <anoopcs@cryptolab.net>
Cc: Jeremy Allison <jra@samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>


--=-1oB/HmJ46LG8d4VHOV59
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit

On Fri, 2019-10-04 at 10:38 +0200, Ralph Boehme via samba-technical
wrote:
> On 10/3/19 3:20 PM, Anoop C S via samba-technical wrote:
> > On Thu, 2019-10-03 at 18:43 +0530, Anoop C S via samba-technical
> > wrote:
> > > OK. This should be it. I hope attached patch covers the missing
> > > part
> > > where recent fcntl() commands are detected during configure. A
> > > pipeline
> > > has been completed successfully for the attached patches.
> > > 
> > > https://gitlab.com/samba-team/devel/samba/pipelines/86263033
> > > 
> > > Reviews are appreciated.
> > 
> > Please ignore the previous version which had a typo in checking
> > HAVE_XX_XX inside vfs_default. Attaching the patches after
> > correction.
> 
> nice addition, thanks!
> 
> One nitpick and one general question.
> 
> Please don't do function calls in if expressions:
> 
> if ((val = SMB_VFS_FCNTL(fsp, F_GETFL, 0)) == -1) {
>     return -1;
> }
> 
> Instead:
> 
> val = SMB_VFS_FCNTL(fsp, F_GETFL, 0);
> if (val == -1) {
>     return -1;
> }

Right. I was also skeptical in putting it that way(frankly speaking it
is a copy of current set_blocking() function). :-)

Please see the new patch set attached.

> Then, I wonder why you make a copy of va_args in the time_audit and
> full_audit VFS modules before calling the NEXT function. Can't we
> just pass the va_list on to the NEXT function?

Two reasons:

* Both SMB_VFS_FCNTL and SMB_VFS_NEXT_FCNTL invoke same
smb_vfs_call_fcntl() function which does a va_start() on the received
variable arguments. Thus if va_list is passed as variable argument to
SMB_VFS_NEXT_FCNTL we again end up calling va_start() on it and a
subsequent va_arg() would not give us the required(/original) argument.
This lead me to do argument extraction before passing it to
SMB_VFS_NEXT_FCNTL. Now here comes the next problem..

* This is the prominent one and I mentioned in one of my previous
responses in this thread. Basically the program(in our case smbd)
crashes when va_arg() is done directly on the received va_list without
duplication. Following blog tries to explain this in some detail:

https://julio.meroh.net/2011/09/using-vacopy-to-safely-pass-ap.html

It may be platform dependent but va_copy() seems to be the right way.

--=-1oB/HmJ46LG8d4VHOV59
Content-Disposition: attachment; filename="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"
Content-Type: text/x-patch; name="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"; charset="UTF-8"
Content-Transfer-Encoding: base64

RnJvbSBlMDYzYzBjNjEwOTk1ZGI0NWFlNGJlNzc4NTdkMjc3MGYxZGFhMjFlIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbm9vcCBDIFMgPGFub29wY3NAcmVkaGF0LmNvbT4KRGF0ZTog
RnJpLCAyNyBTZXAgMjAxOSAxMToxOTozNyArMDUzMApTdWJqZWN0OiBbUEFUQ0ggMS8yXSBzMzog
VkZTOiBBZGQgU01CX1ZGU19GQ05UTAoKU2lnbmVkLW9mZi1ieTogQW5vb3AgQyBTIDxhbm9vcGNz
QHJlZGhhdC5jb20+Ci0tLQogZXhhbXBsZXMvVkZTL3NrZWxfb3BhcXVlLmMgICAgICAgICAgICB8
ICAgOCArKwogZXhhbXBsZXMvVkZTL3NrZWxfdHJhbnNwYXJlbnQuYyAgICAgICB8ICAxNiArKysr
CiBzb3VyY2UzL2luY2x1ZGUvcHJvdG8uaCAgICAgICAgICAgICAgIHwgICAxICsKIHNvdXJjZTMv
aW5jbHVkZS9zbWJwcm9maWxlLmggICAgICAgICAgfCAgIDEgKwogc291cmNlMy9pbmNsdWRlL3Zm
cy5oICAgICAgICAgICAgICAgICB8ICAgNyArKwogc291cmNlMy9pbmNsdWRlL3Zmc19tYWNyb3Mu
aCAgICAgICAgICB8ICAgNSArKwogc291cmNlMy9saWIvc3lzdGVtLmMgICAgICAgICAgICAgICAg
ICB8ICAxNCArKysrCiBzb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYyAgICAgICAgIHwgIDQ2
ICsrKysrKysrKysrCiBzb3VyY2UzL21vZHVsZXMvdmZzX2Z1bGxfYXVkaXQuYyAgICAgIHwgIDIx
ICsrKysrCiBzb3VyY2UzL21vZHVsZXMvdmZzX25vdF9pbXBsZW1lbnRlZC5jIHwgICA5ICsrKwog
c291cmNlMy9tb2R1bGVzL3Zmc190aW1lX2F1ZGl0LmMgICAgICB8ICAyNiArKysrKysKIHNvdXJj
ZTMvc21iZC92ZnMuYyAgICAgICAgICAgICAgICAgICAgfCAgMTUgKysrKwogc291cmNlMy93c2Ny
aXB0ICAgICAgICAgICAgICAgICAgICAgICB8IDEwOSArKysrKysrKysrKysrKysrKysrKysrKysr
KwogMTMgZmlsZXMgY2hhbmdlZCwgMjc4IGluc2VydGlvbnMoKykKCmRpZmYgLS1naXQgYS9leGFt
cGxlcy9WRlMvc2tlbF9vcGFxdWUuYyBiL2V4YW1wbGVzL1ZGUy9za2VsX29wYXF1ZS5jCmluZGV4
IDU5ODA0Njc1YzhlLi5iZTM3NzM5NjVlNyAxMDA2NDQKLS0tIGEvZXhhbXBsZXMvVkZTL3NrZWxf
b3BhcXVlLmMKKysrIGIvZXhhbXBsZXMvVkZTL3NrZWxfb3BhcXVlLmMKQEAgLTQ0NCw2ICs0NDQs
MTMgQEAgc3RhdGljIGludCBza2VsX2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwKIAlyZXR1cm4gLTE7CiB9CiAKK3N0YXRpYyBpbnQgc2tlbF9mY250bChzdHJ1
Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJICAgICAgc3RydWN0IGZpbGVzX3N0cnVj
dCAqZnNwLCBpbnQgY21kLCB2YV9saXN0IGNtZF9hcmcpCit7CisJZXJybm8gPSBFTk9TWVM7CisJ
cmV0dXJuIC0xOworfQorCiBzdGF0aWMgaW50IHNrZWxfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZm
c19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJCQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAq
ZnNwLCBpbnQgbGVhc2V0eXBlKQogewpAQCAtMTA5MSw2ICsxMDk4LDcgQEAgc3RhdGljIHN0cnVj
dCB2ZnNfZm5fcG9pbnRlcnMgc2tlbF9vcGFxdWVfZm5zID0gewogCS5mYWxsb2NhdGVfZm4gPSBz
a2VsX2ZhbGxvY2F0ZSwKIAkubG9ja19mbiA9IHNrZWxfbG9jaywKIAkua2VybmVsX2Zsb2NrX2Zu
ID0gc2tlbF9rZXJuZWxfZmxvY2ssCisJLmZjbnRsX2ZuID0gc2tlbF9mY250bCwKIAkubGludXhf
c2V0bGVhc2VfZm4gPSBza2VsX2xpbnV4X3NldGxlYXNlLAogCS5nZXRsb2NrX2ZuID0gc2tlbF9n
ZXRsb2NrLAogCS5zeW1saW5rYXRfZm4gPSBza2VsX3N5bWxpbmthdCwKZGlmZiAtLWdpdCBhL2V4
YW1wbGVzL1ZGUy9za2VsX3RyYW5zcGFyZW50LmMgYi9leGFtcGxlcy9WRlMvc2tlbF90cmFuc3Bh
cmVudC5jCmluZGV4IGM3M2MyYTI2OTJiLi4wNjNhZjhmM2FlZCAxMDA2NDQKLS0tIGEvZXhhbXBs
ZXMvVkZTL3NrZWxfdHJhbnNwYXJlbnQuYworKysgYi9leGFtcGxlcy9WRlMvc2tlbF90cmFuc3Bh
cmVudC5jCkBAIC01NTIsNiArNTUyLDIxIEBAIHN0YXRpYyBpbnQgc2tlbF9rZXJuZWxfZmxvY2so
c3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJcmV0dXJuIFNNQl9WRlNfTkVYVF9L
RVJORUxfRkxPQ0soaGFuZGxlLCBmc3AsIHNoYXJlX21vZGUsIGFjY2Vzc19tYXNrKTsKIH0KIAor
c3RhdGljIGludCBza2VsX2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAor
CQkgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIHZhX2xpc3QgY21kX2Fy
ZykKK3sKKwl2b2lkICphcmc7CisJdmFfbGlzdCBkdXBfY21kX2FyZzsKKwlpbnQgcmVzdWx0Owor
CisJdmFfY29weShkdXBfY21kX2FyZywgY21kX2FyZyk7CisJYXJnID0gdmFfYXJnKGR1cF9jbWRf
YXJnLCB2b2lkICopOworCXJlc3VsdCA9IFNNQl9WRlNfTkVYVF9GQ05UTChoYW5kbGUsIGZzcCwg
Y21kLCBhcmcpOworCXZhX2VuZChkdXBfY21kX2FyZyk7CisKKwlyZXR1cm4gcmVzdWx0OworfQor
CiBzdGF0aWMgaW50IHNrZWxfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCiAJCQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgbGVhc2V0
eXBlKQogewpAQCAtMTM3OSw2ICsxMzk0LDcgQEAgc3RhdGljIHN0cnVjdCB2ZnNfZm5fcG9pbnRl
cnMgc2tlbF90cmFuc3BhcmVudF9mbnMgPSB7CiAJLmZhbGxvY2F0ZV9mbiA9IHNrZWxfZmFsbG9j
YXRlLAogCS5sb2NrX2ZuID0gc2tlbF9sb2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSBza2VsX2tl
cm5lbF9mbG9jaywKKwkuZmNudGxfZm4gPSBza2VsX2ZjbnRsLAogCS5saW51eF9zZXRsZWFzZV9m
biA9IHNrZWxfbGludXhfc2V0bGVhc2UsCiAJLmdldGxvY2tfZm4gPSBza2VsX2dldGxvY2ssCiAJ
LnN5bWxpbmthdF9mbiA9IHNrZWxfc3ltbGlua2F0LApkaWZmIC0tZ2l0IGEvc291cmNlMy9pbmNs
dWRlL3Byb3RvLmggYi9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaAppbmRleCA5MWE3YzAwZmVmMi4u
Yzk4ZjdjZmEzNTEgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCisrKyBiL3Nv
dXJjZTMvaW5jbHVkZS9wcm90by5oCkBAIC0yMTksNiArMjE5LDcgQEAgc3NpemVfdCBzeXNfc2Vu
ZChpbnQgcywgY29uc3Qgdm9pZCAqbXNnLCBzaXplX3QgbGVuLCBpbnQgZmxhZ3MpOwogc3NpemVf
dCBzeXNfcmVjdmZyb20oaW50IHMsIHZvaWQgKmJ1Ziwgc2l6ZV90IGxlbiwgaW50IGZsYWdzLCBz
dHJ1Y3Qgc29ja2FkZHIgKmZyb20sIHNvY2tsZW5fdCAqZnJvbWxlbik7CiBpbnQgc3lzX2ZjbnRs
X3B0cihpbnQgZmQsIGludCBjbWQsIHZvaWQgKmFyZyk7CiBpbnQgc3lzX2ZjbnRsX2xvbmcoaW50
IGZkLCBpbnQgY21kLCBsb25nIGFyZyk7CitpbnQgc3lzX2ZjbnRsX2ludChpbnQgZmQsIGludCBj
bWQsIGludCBhcmcpOwogdm9pZCB1cGRhdGVfc3RhdF9leF9tdGltZShzdHJ1Y3Qgc3RhdF9leCAq
ZHN0LCBzdHJ1Y3QgdGltZXNwZWMgd3JpdGVfdHMpOwogdm9pZCB1cGRhdGVfc3RhdF9leF9pdGlt
ZShzdHJ1Y3Qgc3RhdF9leCAqZHN0LCBzdHJ1Y3QgdGltZXNwZWMgaXRpbWUpOwogdm9pZCB1cGRh
dGVfc3RhdF9leF9jcmVhdGVfdGltZShzdHJ1Y3Qgc3RhdF9leCAqZHN0LCBzdHJ1Y3QgdGltZXNw
ZWMgY3JlYXRlX3RpbWUpOwpkaWZmIC0tZ2l0IGEvc291cmNlMy9pbmNsdWRlL3NtYnByb2ZpbGUu
aCBiL3NvdXJjZTMvaW5jbHVkZS9zbWJwcm9maWxlLmgKaW5kZXggY2M1NGRlYTI3MTAuLmVhMmEy
OWEwNzU4IDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUvc21icHJvZmlsZS5oCisrKyBiL3Nv
dXJjZTMvaW5jbHVkZS9zbWJwcm9maWxlLmgKQEAgLTgwLDYgKzgwLDcgQEAgc3RydWN0IHRldmVu
dF9jb250ZXh0OwogCVNNQlBST0ZJTEVfU1RBVFNfQkFTSUMoc3lzY2FsbF9mYWxsb2NhdGUpIFwK
IAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfZmNudGxfbG9jaykgXAogCVNNQlBST0ZJ
TEVfU1RBVFNfQkFTSUMoc3lzY2FsbF9rZXJuZWxfZmxvY2spIFwKKwlTTUJQUk9GSUxFX1NUQVRT
X0JBU0lDKHN5c2NhbGxfZmNudGwpIFwKIAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxf
bGludXhfc2V0bGVhc2UpIFwKIAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfZmNudGxf
Z2V0bG9jaykgXAogCVNNQlBST0ZJTEVfU1RBVFNfQkFTSUMoc3lzY2FsbF9yZWFkbGlua2F0KSBc
CmRpZmYgLS1naXQgYS9zb3VyY2UzL2luY2x1ZGUvdmZzLmggYi9zb3VyY2UzL2luY2x1ZGUvdmZz
LmgKaW5kZXggNmJhNjUzZjU2YzcuLjMyNjY4N2Y1ZWUxIDEwMDY0NAotLS0gYS9zb3VyY2UzL2lu
Y2x1ZGUvdmZzLmgKKysrIGIvc291cmNlMy9pbmNsdWRlL3Zmcy5oCkBAIC0yODIsNiArMjgyLDcg
QEAKIC8qIFZlcnNpb24gNDIgLSBNb3ZlIGNoYW5nZV90b191c2VyX2J5X2ZzcCgpIC0+IGNoYW5n
ZV90b191c2VyX2FuZF9zZXJ2aWNlX2J5X2ZzcCgpICovCiAvKiBWZXJzaW9uIDQyIC0gTW92ZSBb
dW5dYmVjb21lX3VzZXIqKCkgLT4gW3VuXWJlY29tZV91c2VyX3dpdGhvdXRfc2VydmljZSooKSAq
LwogLyogVmVyc2lvbiA0MiAtIE1vdmUgU01CX1ZGU19VTkxJTksgLT4gU01CX1ZGU19VTkxJTktB
VC4gKi8KKy8qIFZlcnNpb24gNDIgLSBBZGQgU01CX1ZGU19GQ05UTCAqLwogCiAjZGVmaW5lIFNN
Ql9WRlNfSU5URVJGQUNFX1ZFUlNJT04gNDIKIApAQCAtODEwLDYgKzgxMSw4IEBAIHN0cnVjdCB2
ZnNfZm5fcG9pbnRlcnMgewogCWJvb2wgKCpsb2NrX2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgb3AsIG9mZl90IG9mZnNl
dCwgb2ZmX3QgY291bnQsIGludCB0eXBlKTsKIAlpbnQgKCprZXJuZWxfZmxvY2tfZm4pKHN0cnVj
dCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsCiAJ
CQkgICAgICAgdWludDMyX3Qgc2hhcmVfbW9kZSwgdWludDMyX3QgYWNjZXNzX21hc2spOworCWlu
dCAoKmZjbnRsX2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJCXN0cnVj
dCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGNtZCwgdmFfbGlzdCBjbWRfYXJnKTsKIAlpbnQgKCps
aW51eF9zZXRsZWFzZV9mbikoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIHN0cnVj
dCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlwZSk7CiAJYm9vbCAoKmdldGxvY2tfZm4p
KHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpm
c3AsIG9mZl90ICpwb2Zmc2V0LCBvZmZfdCAqcGNvdW50LCBpbnQgKnB0eXBlLCBwaWRfdCAqcHBp
ZCk7CiAJaW50ICgqc3ltbGlua2F0X2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRs
ZSwKQEAgLTEzNDUsNiArMTM0OCw4IEBAIGJvb2wgc21iX3Zmc19jYWxsX2xvY2soc3RydWN0IHZm
c19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiBpbnQgc21iX3Zmc19jYWxsX2tlcm5lbF9mbG9jayhz
dHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCSAgICAgIHN0cnVjdCBmaWxlc19z
dHJ1Y3QgKmZzcCwgdWludDMyX3Qgc2hhcmVfbW9kZSwKIAkJCSAgICAgIHVpbnQzMl90IGFjY2Vz
c19tYXNrKTsKK2ludCBzbWJfdmZzX2NhbGxfZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCisJCSAgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIC4u
Lik7CiBpbnQgc21iX3Zmc19jYWxsX2xpbnV4X3NldGxlYXNlKHN0cnVjdCB2ZnNfaGFuZGxlX3N0
cnVjdCAqaGFuZGxlLAogCQkJCXN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlw
ZSk7CiBib29sIHNtYl92ZnNfY2FsbF9nZXRsb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAq
aGFuZGxlLApAQCAtMTc4MCw2ICsxNzg1LDggQEAgYm9vbCB2ZnNfbm90X2ltcGxlbWVudGVkX2xv
Y2sodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwgZmlsZXNfc3RydWN0ICpmc3AsIGludAogaW50
IHZmc19ub3RfaW1wbGVtZW50ZWRfa2VybmVsX2Zsb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZGxlLAogCQkJCSAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLAogCQkJCSAgICAg
dWludDMyX3Qgc2hhcmVfbW9kZSwgdWludDMyX3QgYWNjZXNzX21hc2spOworaW50IHZmc19ub3Rf
aW1wbGVtZW50ZWRfZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCisJCQkg
ICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIHZhX2xpc3QgY21kX2FyZyk7
CiBpbnQgdmZzX25vdF9pbXBsZW1lbnRlZF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRs
ZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBp
bnQgbGVhc2V0eXBlKTsKIGJvb2wgdmZzX25vdF9pbXBsZW1lbnRlZF9nZXRsb2NrKHZmc19oYW5k
bGVfc3RydWN0ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAqZnNwLApkaWZmIC0tZ2l0IGEvc291cmNl
My9pbmNsdWRlL3Zmc19tYWNyb3MuaCBiL3NvdXJjZTMvaW5jbHVkZS92ZnNfbWFjcm9zLmgKaW5k
ZXggMjk3OTc2OWU3ZDUuLjJkZDU5NzExZTE5IDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUv
dmZzX21hY3Jvcy5oCisrKyBiL3NvdXJjZTMvaW5jbHVkZS92ZnNfbWFjcm9zLmgKQEAgLTI4Niw2
ICsyODYsMTEgQEAKICNkZWZpbmUgU01CX1ZGU19ORVhUX0tFUk5FTF9GTE9DSyhoYW5kbGUsIGZz
cCwgc2hhcmVfbW9kZSwgYWNjZXNzX21hc2spCVwKIAlzbWJfdmZzX2NhbGxfa2VybmVsX2Zsb2Nr
KChoYW5kbGUpLT5uZXh0LCAoZnNwKSwgKHNoYXJlX21vZGUpLCAoYWNjZXNzX21hc2spKQogCisj
ZGVmaW5lIFNNQl9WRlNfRkNOVEwoZnNwLCBjbWQsIC4uLikgXAorCXNtYl92ZnNfY2FsbF9mY250
bCgoZnNwKS0+Y29ubi0+dmZzX2hhbmRsZXMsIChmc3ApLCAoY21kKSwgKF9fVkFfQVJHU19fKSkK
KyNkZWZpbmUgU01CX1ZGU19ORVhUX0ZDTlRMKGhhbmRsZSwgZnNwLCBjbWQsIC4uLikgXAorCXNt
Yl92ZnNfY2FsbF9mY250bCgoaGFuZGxlKS0+bmV4dCwgKGZzcCksIChjbWQpLCAoX19WQV9BUkdT
X18pKQorCiAjZGVmaW5lIFNNQl9WRlNfTElOVVhfU0VUTEVBU0UoZnNwLCBsZWFzZXR5cGUpIFwK
IAlzbWJfdmZzX2NhbGxfbGludXhfc2V0bGVhc2UoKGZzcCktPmNvbm4tPnZmc19oYW5kbGVzLCAo
ZnNwKSwgKGxlYXNldHlwZSkpCiAjZGVmaW5lIFNNQl9WRlNfTkVYVF9MSU5VWF9TRVRMRUFTRSho
YW5kbGUsIGZzcCwgbGVhc2V0eXBlKSBcCmRpZmYgLS1naXQgYS9zb3VyY2UzL2xpYi9zeXN0ZW0u
YyBiL3NvdXJjZTMvbGliL3N5c3RlbS5jCmluZGV4IGRlZjgyODFmYzQzLi42NzkzMzIyNTVjMCAx
MDA2NDQKLS0tIGEvc291cmNlMy9saWIvc3lzdGVtLmMKKysrIGIvc291cmNlMy9saWIvc3lzdGVt
LmMKQEAgLTEwOCw2ICsxMDgsMjAgQEAgaW50IHN5c19mY250bF9sb25nKGludCBmZCwgaW50IGNt
ZCwgbG9uZyBhcmcpCiAJcmV0dXJuIHJldDsKIH0KIAorLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKK0EgZmNudGwgd3Jh
cHBlciB0aGF0IHdpbGwgZGVhbCB3aXRoIEVJTlRSLgorKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK2ludCBzeXNf
ZmNudGxfaW50KGludCBmZCwgaW50IGNtZCwgaW50IGFyZykKK3sKKwlpbnQgcmV0OworCisJZG8g
eworCQlyZXQgPSBmY250bChmZCwgY21kLCBhcmcpOworCX0gd2hpbGUgKHJldCA9PSAtMSAmJiBl
cnJubyA9PSBFSU5UUik7CisJcmV0dXJuIHJldDsKK30KKwogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
ICBHZXQvU2V0IGFsbCB0aGUgcG9zc2libGUgdGltZSBmaWVsZHMgZnJvbSBhIHN0YXQgc3RydWN0
IGFzIGEgdGltZXNwZWMuCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwpkaWZmIC0tZ2l0IGEvc291cmNl
My9tb2R1bGVzL3Zmc19kZWZhdWx0LmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYwpp
bmRleCA3MzhiZTNiZjJkNi4uOWJmODAwNWJjZDcgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9kdWxl
cy92ZnNfZGVmYXVsdC5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVsdC5jCkBAIC0y
NjE1LDYgKzI2MTUsNTEgQEAgc3RhdGljIGludCB2ZnN3cmFwX2tlcm5lbF9mbG9jayh2ZnNfaGFu
ZGxlX3N0cnVjdCAqaGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZzcCwKIAlyZXR1cm4gMDsKIH0KIAor
c3RhdGljIGludCB2ZnN3cmFwX2ZjbnRsKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIGZpbGVz
X3N0cnVjdCAqZnNwLCBpbnQgY21kLAorCQkJIHZhX2xpc3QgY21kX2FyZykKK3sKKwl2b2lkICph
cmdwOworCXZhX2xpc3QgZHVwX2NtZF9hcmc7CisJaW50IHJlc3VsdDsKKwlpbnQgdmFsOworCisJ
U1RBUlRfUFJPRklMRShzeXNjYWxsX2ZjbnRsKTsKKworCXZhX2NvcHkoZHVwX2NtZF9hcmcsIGNt
ZF9hcmcpOworCisJc3dpdGNoKGNtZCkgeworCWNhc2UgRl9TRVRMSzoKKwljYXNlIEZfU0VUTEtX
OgorCWNhc2UgRl9HRVRMSzoKKyNpZiBkZWZpbmVkKEhBVkVfT0ZEX0xPQ0tTKQorCWNhc2UgRl9P
RkRfU0VUTEs6CisJY2FzZSBGX09GRF9TRVRMS1c6CisJY2FzZSBGX09GRF9HRVRMSzoKKyNlbmRp
ZgorI2lmIGRlZmluZWQoSEFWRV9GX09XTkVSX0VYKQorCWNhc2UgRl9HRVRPV05fRVg6CisJY2Fz
ZSBGX1NFVE9XTl9FWDoKKyNlbmRpZgorI2lmIGRlZmluZWQoSEFWRV9SV19ISU5UUykKKwljYXNl
IEZfR0VUX1JXX0hJTlQ6CisJY2FzZSBGX1NFVF9SV19ISU5UOgorCWNhc2UgRl9HRVRfRklMRV9S
V19ISU5UOgorCWNhc2UgRl9TRVRfRklMRV9SV19ISU5UOgorI2VuZGlmCisJCWFyZ3AgPSB2YV9h
cmcoZHVwX2NtZF9hcmcsIHZvaWQgKik7CisJCXJlc3VsdCA9IHN5c19mY250bF9wdHIoZnNwLT5m
aC0+ZmQsIGNtZCwgYXJncCk7CisJCWJyZWFrOworCWRlZmF1bHQ6CisJCXZhbCA9IHZhX2FyZyhk
dXBfY21kX2FyZywgaW50KTsKKwkJcmVzdWx0ID0gc3lzX2ZjbnRsX2ludChmc3AtPmZoLT5mZCwg
Y21kLCB2YWwpOworCX0KKworCXZhX2VuZChkdXBfY21kX2FyZyk7CisKKwlFTkRfUFJPRklMRShz
eXNjYWxsX2ZjbnRsKTsKKwlyZXR1cm4gcmVzdWx0OworfQorCiBzdGF0aWMgYm9vbCB2ZnN3cmFw
X2dldGxvY2sodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwgZmlsZXNfc3RydWN0ICpmc3AsIG9m
Zl90ICpwb2Zmc2V0LCBvZmZfdCAqcGNvdW50LCBpbnQgKnB0eXBlLCBwaWRfdCAqcHBpZCkKIHsK
IAlib29sIHJlc3VsdDsKQEAgLTM1MDYsNiArMzU1MSw3IEBAIHN0YXRpYyBzdHJ1Y3QgdmZzX2Zu
X3BvaW50ZXJzIHZmc19kZWZhdWx0X2ZucyA9IHsKIAkuZmFsbG9jYXRlX2ZuID0gdmZzd3JhcF9m
YWxsb2NhdGUsCiAJLmxvY2tfZm4gPSB2ZnN3cmFwX2xvY2ssCiAJLmtlcm5lbF9mbG9ja19mbiA9
IHZmc3dyYXBfa2VybmVsX2Zsb2NrLAorCS5mY250bF9mbiA9IHZmc3dyYXBfZmNudGwsCiAJLmxp
bnV4X3NldGxlYXNlX2ZuID0gdmZzd3JhcF9saW51eF9zZXRsZWFzZSwKIAkuZ2V0bG9ja19mbiA9
IHZmc3dyYXBfZ2V0bG9jaywKIAkuc3ltbGlua2F0X2ZuID0gdmZzd3JhcF9zeW1saW5rYXQsCmRp
ZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZzX2Z1bGxfYXVkaXQuYyBiL3NvdXJjZTMvbW9k
dWxlcy92ZnNfZnVsbF9hdWRpdC5jCmluZGV4IGRlNTkxZWIyMTM2Li43NTdjZDI2ZDNmMSAxMDA2
NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19mdWxsX2F1ZGl0LmMKKysrIGIvc291cmNlMy9t
b2R1bGVzL3Zmc19mdWxsX2F1ZGl0LmMKQEAgLTE1MSw2ICsxNTEsNyBAQCB0eXBlZGVmIGVudW0g
X3Zmc19vcF90eXBlIHsKIAlTTUJfVkZTX09QX0ZBTExPQ0FURSwKIAlTTUJfVkZTX09QX0xPQ0ss
CiAJU01CX1ZGU19PUF9LRVJORUxfRkxPQ0ssCisJU01CX1ZGU19PUF9GQ05UTCwKIAlTTUJfVkZT
X09QX0xJTlVYX1NFVExFQVNFLAogCVNNQl9WRlNfT1BfR0VUTE9DSywKIAlTTUJfVkZTX09QX1NZ
TUxJTktBVCwKQEAgLTE3MzQsNiArMTczNSwyNSBAQCBzdGF0aWMgaW50IHNtYl9mdWxsX2F1ZGl0
X2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAlyZXR1cm4g
cmVzdWx0OwogfQogCitzdGF0aWMgaW50IHNtYl9mdWxsX2F1ZGl0X2ZjbnRsKHN0cnVjdCB2ZnNf
aGFuZGxlX3N0cnVjdCAqaGFuZGxlLAorCQkJCXN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwKKwkJ
CQlpbnQgY21kLCB2YV9saXN0IGNtZF9hcmcpCit7CisJdm9pZCAqYXJnOworCXZhX2xpc3QgZHVw
X2NtZF9hcmc7CisJaW50IHJlc3VsdDsKKworCXZhX2NvcHkoZHVwX2NtZF9hcmcsIGNtZF9hcmcp
OworCWFyZyA9IHZhX2FyZyhkdXBfY21kX2FyZywgdm9pZCAqKTsKKwlyZXN1bHQgPSBTTUJfVkZT
X05FWFRfRkNOVEwoaGFuZGxlLCBmc3AsIGNtZCwgYXJnKTsKKwl2YV9lbmQoZHVwX2NtZF9hcmcp
OworCisJZG9fbG9nKFNNQl9WRlNfT1BfRkNOVEwsIChyZXN1bHQgPj0gMCksIGhhbmRsZSwgIiVz
IiwKKwkgICAgICAgZnNwX3N0cl9kb19sb2coZnNwKSk7CisKKwlyZXR1cm4gcmVzdWx0OworfQor
CiBzdGF0aWMgaW50IHNtYl9mdWxsX2F1ZGl0X2xpbnV4X3NldGxlYXNlKHZmc19oYW5kbGVfc3Ry
dWN0ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAqZnNwLAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgaW50IGxlYXNldHlwZSkKIHsKQEAgLTI5ODEsNiArMzAwMSw3IEBAIHN0YXRpYyBz
dHJ1Y3QgdmZzX2ZuX3BvaW50ZXJzIHZmc19mdWxsX2F1ZGl0X2ZucyA9IHsKIAkuZmFsbG9jYXRl
X2ZuID0gc21iX2Z1bGxfYXVkaXRfZmFsbG9jYXRlLAogCS5sb2NrX2ZuID0gc21iX2Z1bGxfYXVk
aXRfbG9jaywKIAkua2VybmVsX2Zsb2NrX2ZuID0gc21iX2Z1bGxfYXVkaXRfa2VybmVsX2Zsb2Nr
LAorCS5mY250bF9mbiA9IHNtYl9mdWxsX2F1ZGl0X2ZjbnRsLAogCS5saW51eF9zZXRsZWFzZV9m
biA9IHNtYl9mdWxsX2F1ZGl0X2xpbnV4X3NldGxlYXNlLAogCS5nZXRsb2NrX2ZuID0gc21iX2Z1
bGxfYXVkaXRfZ2V0bG9jaywKIAkuc3ltbGlua2F0X2ZuID0gc21iX2Z1bGxfYXVkaXRfc3ltbGlu
a2F0LApkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19ub3RfaW1wbGVtZW50ZWQuYyBi
L3NvdXJjZTMvbW9kdWxlcy92ZnNfbm90X2ltcGxlbWVudGVkLmMKaW5kZXggZmZjYmE3YmQ4ZGIu
LjJiOTA2YjNjZjI4IDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZzX25vdF9pbXBsZW1l
bnRlZC5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfbm90X2ltcGxlbWVudGVkLmMKQEAgLTQ0
Miw2ICs0NDIsMTQgQEAgaW50IHZmc19ub3RfaW1wbGVtZW50ZWRfa2VybmVsX2Zsb2NrKHN0cnVj
dCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCXJldHVybiAtMTsKIH0KIAoraW50IHZmc19u
b3RfaW1wbGVtZW50ZWRfZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCisJ
CQkgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsCisJCQkgICAgICB2YV9s
aXN0IGNtZF9hcmcpCit7CisJZXJybm8gPSBFTk9TWVM7CisJcmV0dXJuIC0xOworfQorCiBpbnQg
dmZzX25vdF9pbXBsZW1lbnRlZF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwKIAkJCQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgbGVh
c2V0eXBlKQogewpAQCAtMTA5NSw2ICsxMTAzLDcgQEAgc3RhdGljIHN0cnVjdCB2ZnNfZm5fcG9p
bnRlcnMgdmZzX25vdF9pbXBsZW1lbnRlZF9mbnMgPSB7CiAJLmZhbGxvY2F0ZV9mbiA9IHZmc19u
b3RfaW1wbGVtZW50ZWRfZmFsbG9jYXRlLAogCS5sb2NrX2ZuID0gdmZzX25vdF9pbXBsZW1lbnRl
ZF9sb2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSB2ZnNfbm90X2ltcGxlbWVudGVkX2tlcm5lbF9m
bG9jaywKKwkuZmNudGxfZm4gPSB2ZnNfbm90X2ltcGxlbWVudGVkX2ZjbnRsLAogCS5saW51eF9z
ZXRsZWFzZV9mbiA9IHZmc19ub3RfaW1wbGVtZW50ZWRfbGludXhfc2V0bGVhc2UsCiAJLmdldGxv
Y2tfZm4gPSB2ZnNfbm90X2ltcGxlbWVudGVkX2dldGxvY2ssCiAJLnN5bWxpbmthdF9mbiA9IHZm
c19ub3RfaW1wbGVtZW50ZWRfc3ltbGlua2F0LApkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVz
L3Zmc190aW1lX2F1ZGl0LmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX3RpbWVfYXVkaXQuYwppbmRl
eCAyMTNlYTEwYjE3Zi4uN2ZhNjE2MTk0NWEgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9kdWxlcy92
ZnNfdGltZV9hdWRpdC5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfdGltZV9hdWRpdC5jCkBA
IC0xMzQ0LDYgKzEzNDQsMzEgQEAgc3RhdGljIGludCBzbWJfdGltZV9hdWRpdF9rZXJuZWxfZmxv
Y2soc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJcmV0dXJuIHJlc3VsdDsKIH0K
IAorc3RhdGljIGludCBzbWJfdGltZV9hdWRpdF9mY250bChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwKKwkJCQlzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsCisJCQkJaW50IGNtZCwg
dmFfbGlzdCBjbWRfYXJnKQoreworCXZvaWQgKmFyZzsKKwl2YV9saXN0IGR1cF9jbWRfYXJnOwor
CWludCByZXN1bHQ7CisJc3RydWN0IHRpbWVzcGVjIHRzMSx0czI7CisJZG91YmxlIHRpbWVkaWZm
OworCisJdmFfY29weShkdXBfY21kX2FyZywgY21kX2FyZyk7CisJYXJnID0gdmFfYXJnKGR1cF9j
bWRfYXJnLCB2b2lkICopOworCWNsb2NrX2dldHRpbWVfbW9ubygmdHMxKTsKKwlyZXN1bHQgPSBT
TUJfVkZTX05FWFRfRkNOVEwoaGFuZGxlLCBmc3AsIGNtZCwgYXJnKTsKKwljbG9ja19nZXR0aW1l
X21vbm8oJnRzMik7CisJdmFfZW5kKGR1cF9jbWRfYXJnKTsKKworCXRpbWVkaWZmID0gbnNlY190
aW1lX2RpZmYoJnRzMiwmdHMxKSoxLjBlLTk7CisJaWYgKHRpbWVkaWZmID4gYXVkaXRfdGltZW91
dCkgeworCQlzbWJfdGltZV9hdWRpdF9sb2dfZnNwKCJrZXJuZWxfZmxvY2siLCB0aW1lZGlmZiwg
ZnNwKTsKKwl9CisKKwlyZXR1cm4gcmVzdWx0OworfQorCiBzdGF0aWMgaW50IHNtYl90aW1lX2F1
ZGl0X2xpbnV4X3NldGxlYXNlKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJCQkJCSBmaWxl
c19zdHJ1Y3QgKmZzcCwKIAkJCQkJIGludCBsZWFzZXR5cGUpCkBAIC0yODY2LDYgKzI4OTEsNyBA
QCBzdGF0aWMgc3RydWN0IHZmc19mbl9wb2ludGVycyB2ZnNfdGltZV9hdWRpdF9mbnMgPSB7CiAJ
LmZhbGxvY2F0ZV9mbiA9IHNtYl90aW1lX2F1ZGl0X2ZhbGxvY2F0ZSwKIAkubG9ja19mbiA9IHNt
Yl90aW1lX2F1ZGl0X2xvY2ssCiAJLmtlcm5lbF9mbG9ja19mbiA9IHNtYl90aW1lX2F1ZGl0X2tl
cm5lbF9mbG9jaywKKwkuZmNudGxfZm4gPSBzbWJfdGltZV9hdWRpdF9mY250bCwKIAkubGludXhf
c2V0bGVhc2VfZm4gPSBzbWJfdGltZV9hdWRpdF9saW51eF9zZXRsZWFzZSwKIAkuZ2V0bG9ja19m
biA9IHNtYl90aW1lX2F1ZGl0X2dldGxvY2ssCiAJLnN5bWxpbmthdF9mbiA9IHNtYl90aW1lX2F1
ZGl0X3N5bWxpbmthdCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMvc21iZC92ZnMuYyBiL3NvdXJjZTMv
c21iZC92ZnMuYwppbmRleCBiODNjZjFlNGQ1NS4uYmVmNzllNGM2NGUgMTAwNjQ0Ci0tLSBhL3Nv
dXJjZTMvc21iZC92ZnMuYworKysgYi9zb3VyY2UzL3NtYmQvdmZzLmMKQEAgLTIxOTUsNiArMjE5
NSwyMSBAQCBpbnQgc21iX3Zmc19jYWxsX2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9z
dHJ1Y3QgKmhhbmRsZSwKIAkJCQkJIGFjY2Vzc19tYXNrKTsKIH0KIAoraW50IHNtYl92ZnNfY2Fs
bF9mY250bChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJICAgICAgIHN0cnVj
dCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGNtZCwgLi4uKQoreworCWludCByZXN1bHQ7CisJdmFf
bGlzdCBjbWRfYXJnOworCisJVkZTX0ZJTkQoZmNudGwpOworCisJdmFfc3RhcnQoY21kX2FyZywg
Y21kKTsKKwlyZXN1bHQgPSBoYW5kbGUtPmZucy0+ZmNudGxfZm4oaGFuZGxlLCBmc3AsIGNtZCwg
Y21kX2FyZyk7CisJdmFfZW5kKGNtZF9hcmcpOworCisJcmV0dXJuIHJlc3VsdDsKK30KKwogaW50
IHNtYl92ZnNfY2FsbF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhh
bmRsZSwKIAkJCQlzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBsZWFzZXR5cGUpCiB7CmRp
ZmYgLS1naXQgYS9zb3VyY2UzL3dzY3JpcHQgYi9zb3VyY2UzL3dzY3JpcHQKaW5kZXggZDQ1MjIy
NjI1YzQuLmUyOWJmNjU3YjVlIDEwMDY0NAotLS0gYS9zb3VyY2UzL3dzY3JpcHQKKysrIGIvc291
cmNlMy93c2NyaXB0CkBAIC0xMTE5LDYgKzExMTksMTE1IEBAIGVycjoKICAgICAgICAgICAgIGV4
ZWN1dGU9VHJ1ZSwKICAgICAgICAgICAgIG1zZz0iQ2hlY2tpbmcgd2hldGhlciBmY250bCBsb2Nr
IHN1cHBvcnRzIG9wZW4gZmlsZSBkZXNjcmlwdGlvbiBsb2NrcyIpCiAKKyAgICBjb25mLkNIRUNL
X0NPREUoJycnCisjaW5jbHVkZSA8ZmNudGwuaD4KKyNpbmNsdWRlIDx1bmlzdGQuaD4KKyNpbmNs
dWRlIDxzdGRsaWIuaD4KKyNpbmNsdWRlIDxzeXMvc29ja2V0Lmg+CisKK2ludCBtYWluKHZvaWQp
Cit7CisgICAgICAgIGludCBzb2NrZmQsIHJldDsKKyAgICAgICAgc3RydWN0IGZfb3duZXJfZXgg
b3duZXIsIGdldF9vd25lcjsKKworICAgICAgICBzb2NrZmQgPSBzb2NrZXQoQUZfVU5JWCwgU09D
S19TVFJFQU0sIDApOworICAgICAgICBpZiAoc29ja2ZkID09IC0xKSB7CisgICAgICAgICAgICBn
b3RvIGVycjsKKyAgICAgICAgfQorCisgICAgICAgIG93bmVyLnR5cGUgPSBGX09XTkVSX1BJRDsK
KyAgICAgICAgb3duZXIucGlkID0gZ2V0cGlkKCk7CisKKyAgICAgICAgcmV0ID0gZmNudGwoc29j
a2ZkLCBGX1NFVE9XTl9FWCwgJm93bmVyKTsKKyAgICAgICAgaWYgKHJldCA9PSAtMSkgeworICAg
ICAgICAgICAgZ290byBlcnI7CisgICAgICAgIH0KKworICAgICAgICByZXQgPSBmY250bChzb2Nr
ZmQsIEZfR0VUT1dOX0VYLCAmZ2V0X293bmVyKTsKKyAgICAgICAgaWYgKHJldCA9PSAtMSkgewor
ICAgICAgICAgICAgZ290byBlcnI7CisgICAgICAgIH0KKworICAgICAgICBpZiAoZ2V0X293bmVy
LnR5cGUgIT0gRl9PV05FUl9QSUQpIHsKKyAgICAgICAgICAgIGdvdG8gZXJyOworICAgICAgICB9
CisKKyAgICAgICAgaWYgKGdldF9vd25lci5waWQgIT0gZ2V0cGlkKCkpIHsKKyAgICAgICAgICAg
IGdvdG8gZXJyOworICAgICAgICB9CisKKyAgICAgICAgY2xvc2Uoc29ja2ZkKTsKKyAgICAgICAg
ZXhpdCgwKTsKK2VycjoKKyAgICAgICAgY2xvc2Uoc29ja2ZkKTsKKyAgICAgICAgZXhpdCgxKTsK
K30nJycsCisgICAgICAgICAgICAnSEFWRV9GX09XTkVSX0VYJywKKyAgICAgICAgICAgIGFkZG1h
aW49RmFsc2UsCisgICAgICAgICAgICBleGVjdXRlPVRydWUsCisgICAgICAgICAgICBtc2c9IkNo
ZWNraW5nIHdoZXRoZXIgZmNudGwgc3VwcG9ydHMgZmxhZ3MgdG8gc2VuZCBkaXJlY3QgSS9PIGF2
YWlsYWJpbGl0eSBzaWduYWxzIikKKworICAgIGNvbmYuQ0hFQ0tfQ09ERSgnJycKKyNpbmNsdWRl
IDxmY250bC5oPgorI2luY2x1ZGUgPHVuaXN0ZC5oPgorI2luY2x1ZGUgPHN0ZGxpYi5oPgorI2lu
Y2x1ZGUgPHN0ZGludC5oPgorCisjZGVmaW5lIERBVEEgImhpbnR0ZXN0LmZjbnRsIgorCitpbnQg
bWFpbih2b2lkKQoreworICAgICAgICB1aW50NjRfdCAqaGludCwgZ2V0X2hpbnQ7CisgICAgICAg
IGludCBmZDsKKworICAgICAgICBmZCA9IG9wZW4oREFUQSwgT19SRE9OTFkgfCBPX0NSRUFUIHwg
T19FWENMKTsKKyAgICAgICAgaWYgKGZkID09IC0xKSB7CisgICAgICAgICAgICBnb3RvIGVycjsK
KyAgICAgICAgfQorCisgICAgICAgICpoaW50ID0gUldIX1dSSVRFX0xJRkVfU0hPUlQ7CisgICAg
ICAgIGludCByZXQgPSBmY250bChmZCwgRl9TRVRfUldfSElOVCwgaGludCk7CisgICAgICAgIGlm
IChyZXQgPT0gLTEpIHsKKyAgICAgICAgICAgIGdvdG8gZXJyOworICAgICAgICB9CisKKyAgICAg
ICAgcmV0ID0gZmNudGwoZmQsIEZfR0VUX1JXX0hJTlQsICZnZXRfaGludCk7CisgICAgICAgIGlm
IChyZXQgPT0gLTEpIHsKKyAgICAgICAgICAgIGdvdG8gZXJyOworICAgICAgICB9CisKKyAgICAg
ICAgaWYgKGdldF9oaW50ICE9IFJXSF9XUklURV9MSUZFX1NIT1JUKSB7CisgICAgICAgICAgICBn
b3RvIGVycjsKKyAgICAgICAgfQorCisgICAgICAgICpoaW50ID0gUldIX1dSSVRFX0xJRkVfRVhU
UkVNRTsKKyAgICAgICAgcmV0ID0gZmNudGwoZmQsIEZfU0VUX0ZJTEVfUldfSElOVCwgaGludCk7
CisgICAgICAgIGlmIChyZXQgPT0gLTEpIHsKKyAgICAgICAgICAgIGdvdG8gZXJyOworICAgICAg
ICB9CisKKyAgICAgICAgcmV0ID0gZmNudGwoZmQsIEZfR0VUX0ZJTEVfUldfSElOVCwgJmdldF9o
aW50KTsKKyAgICAgICAgaWYgKHJldCA9PSAtMSkgeworICAgICAgICAgICAgZ290byBlcnI7Cisg
ICAgICAgIH0KKworICAgICAgICBpZiAoZ2V0X2hpbnQgIT0gUldIX1dSSVRFX0xJRkVfRVhUUkVN
RSkgeworICAgICAgICAgICAgZ290byBlcnI7CisgICAgICAgIH0KKworICAgICAgICBjbG9zZShm
ZCk7CisgICAgICAgIHVubGluayhEQVRBKTsKKyAgICAgICAgZXhpdCgwKTsKK2VycjoKKyAgICAg
ICAgY2xvc2UoZmQpOworICAgICAgICB1bmxpbmsoREFUQSk7CisgICAgICAgIGV4aXQoMSk7Cit9
JycnLAorICAgICAgICAgICAgJ0hBVkVfUldfSElOVFMnLAorICAgICAgICAgICAgYWRkbWFpbj1G
YWxzZSwKKyAgICAgICAgICAgIGV4ZWN1dGU9VHJ1ZSwKKyAgICAgICAgICAgIG1zZz0iQ2hlY2tp
bmcgd2hldGhlciBmY250bCBzdXBwb3J0cyBzZXR0aW5nL2dldGluZyBoaW50cyIpCisKICAgICBj
b25mLkNIRUNLX1NUUlVDVFVSRV9NRU1CRVIoJ3N0cnVjdCBzdGF0JywgJ3N0X210aW0udHZfbnNl
YycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZT0nSEFWRV9TVFJVQ1Rf
U1RBVF9TVF9NVElNX1RWX05TRUMnKSAjIExpbnV4LCBTb2xhcmlzCiAgICAgY29uZi5DSEVDS19T
VFJVQ1RVUkVfTUVNQkVSKCdzdHJ1Y3Qgc3RhdCcsICdzdF9tdGltZW5zZWMnLAotLSAKMi4yMS4w
Cgo=


--=-1oB/HmJ46LG8d4VHOV59
Content-Disposition: attachment;
	filename*0=0002-s3-VFS-Use-SMB_VFS_FCNTL-to-set-fd-flags-in-open_fil.pat;
	filename*1=ch
Content-Type: text/x-patch;
	name="0002-s3-VFS-Use-SMB_VFS_FCNTL-to-set-fd-flags-in-open_fil.patch";
	charset="UTF-8"
Content-Transfer-Encoding: base64

RnJvbSA1ZGY2YzQ0ZmIxNzU2ODc1NmE3YTY1MDZlNjFmNTIwZjA5Zjk4ZjUyIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbm9vcCBDIFMgPGFub29wY3NAcmVkaGF0LmNvbT4KRGF0ZTog
RnJpLCAyNyBTZXAgMjAxOSAxMjowNzo0MCArMDUzMApTdWJqZWN0OiBbUEFUQ0ggMi8yXSBzMzog
VkZTOiBVc2UgU01CX1ZGU19GQ05UTCB0byBzZXQgZmQgZmxhZ3MgaW4gb3Blbl9maWxlKCkKClNp
Z25lZC1vZmYtYnk6IEFub29wIEMgUyA8YW5vb3Bjc0ByZWRoYXQuY29tPgotLS0KIHNvdXJjZTMv
c21iZC9vcGVuLmMgIHwgIDIgKy0KIHNvdXJjZTMvc21iZC9wcm90by5oIHwgIDEgKwogc291cmNl
My9zbWJkL3Zmcy5jICAgfCAzMSArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrCiAzIGZp
bGVzIGNoYW5nZWQsIDMzIGluc2VydGlvbnMoKyksIDEgZGVsZXRpb24oLSkKCmRpZmYgLS1naXQg
YS9zb3VyY2UzL3NtYmQvb3Blbi5jIGIvc291cmNlMy9zbWJkL29wZW4uYwppbmRleCA1ODYwMTU1
MjYzYi4uOTQ5MzAyMWM0OGQgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvc21iZC9vcGVuLmMKKysrIGIv
c291cmNlMy9zbWJkL29wZW4uYwpAQCAtMTMyNyw3ICsxMzI3LDcgQEAgc3RhdGljIE5UU1RBVFVT
IG9wZW5fZmlsZShmaWxlc19zdHJ1Y3QgKmZzcCwKIAkJCSAqIHRvby4gV2l0aCBibG9ja2luZyBm
aWxlIGRlc2NyaXB0b3JzIHRoaXMKIAkJCSAqIGRvZXMgbm90IGhhcHBlbi4KIAkJCSAqLwotCQkJ
cmV0ID0gc2V0X2Jsb2NraW5nKGZzcC0+ZmgtPmZkLCB0cnVlKTsKKwkJCXJldCA9IHZmc19zZXRf
YmxvY2tpbmcoZnNwLCB0cnVlKTsKIAkJCWlmIChyZXQgPT0gLTEpIHsKIAkJCQlzdGF0dXMgPSBt
YXBfbnRfZXJyb3JfZnJvbV91bml4KGVycm5vKTsKIAkJCQlEQkdfV0FSTklORygiQ291bGQgbm90
IHNldCBmZCB0byBibG9ja2luZzogIgpkaWZmIC0tZ2l0IGEvc291cmNlMy9zbWJkL3Byb3RvLmgg
Yi9zb3VyY2UzL3NtYmQvcHJvdG8uaAppbmRleCAxMWM5ZGMwZjhiMS4uZTlkMDQ0NzRkZjYgMTAw
NjQ0Ci0tLSBhL3NvdXJjZTMvc21iZC9wcm90by5oCisrKyBiL3NvdXJjZTMvc21iZC9wcm90by5o
CkBAIC0xMjMwLDYgKzEyMzAsNyBAQCBpbnQgdmZzX2FsbG9jYXRlX2ZpbGVfc3BhY2UoZmlsZXNf
c3RydWN0ICpmc3AsIHVpbnQ2NF90IGxlbik7CiBpbnQgdmZzX3NldF9maWxlbGVuKGZpbGVzX3N0
cnVjdCAqZnNwLCBvZmZfdCBsZW4pOwogaW50IHZmc19zbG93X2ZhbGxvY2F0ZShmaWxlc19zdHJ1
Y3QgKmZzcCwgb2ZmX3Qgb2Zmc2V0LCBvZmZfdCBsZW4pOwogaW50IHZmc19maWxsX3NwYXJzZShm
aWxlc19zdHJ1Y3QgKmZzcCwgb2ZmX3QgbGVuKTsKK2ludCB2ZnNfc2V0X2Jsb2NraW5nKGZpbGVz
X3N0cnVjdCAqZnNwLCBib29sIHNldCk7CiBvZmZfdCB2ZnNfdHJhbnNmZXJfZmlsZShmaWxlc19z
dHJ1Y3QgKmluLCBmaWxlc19zdHJ1Y3QgKm91dCwgb2ZmX3Qgbik7CiBjb25zdCBjaGFyICp2ZnNf
cmVhZGRpcm5hbWUoY29ubmVjdGlvbl9zdHJ1Y3QgKmNvbm4sIHZvaWQgKnAsCiAJCQkgICAgU01C
X1NUUlVDVF9TVEFUICpzYnVmLCBjaGFyICoqdGFsbG9jZWQpOwpkaWZmIC0tZ2l0IGEvc291cmNl
My9zbWJkL3Zmcy5jIGIvc291cmNlMy9zbWJkL3Zmcy5jCmluZGV4IGJlZjc5ZTRjNjRlLi41MzMy
ZjAwZTg3NiAxMDA2NDQKLS0tIGEvc291cmNlMy9zbWJkL3Zmcy5jCisrKyBiL3NvdXJjZTMvc21i
ZC92ZnMuYwpAQCAtNzExLDYgKzcxMSwzNyBAQCBpbnQgdmZzX2ZpbGxfc3BhcnNlKGZpbGVzX3N0
cnVjdCAqZnNwLCBvZmZfdCBsZW4pCiAJcmV0dXJuIHJldDsKIH0KIAorLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKKyBTZXQgYSBmZCBpbnRvIGJsb2NraW5nL25vbmJsb2NraW5nIG1vZGUgdGhyb3Vn
aCBWRlMKKyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK2ludCB2ZnNfc2V0X2Jsb2NraW5nKGZp
bGVzX3N0cnVjdCAqZnNwLCBib29sIHNldCkKK3sKKwlpbnQgdmFsOworI2lmZGVmIE9fTk9OQkxP
Q0sKKyNkZWZpbmUgRkxBR19UT19TRVQgT19OT05CTE9DSworI2Vsc2UKKyNpZmRlZiBTWVNWCisj
ZGVmaW5lIEZMQUdfVE9fU0VUIE9fTkRFTEFZCisjZWxzZSAvKiBCU0QgKi8KKyNkZWZpbmUgRkxB
R19UT19TRVQgRk5ERUxBWQorI2VuZGlmCisjZW5kaWYKKwl2YWwgPSBTTUJfVkZTX0ZDTlRMKGZz
cCwgRl9HRVRGTCwgMCk7CisJaWYgKHZhbCA9PSAtMSkgeworCQlyZXR1cm4gLTE7CisJfQorCisJ
aWYgKHNldCkgeworCQl2YWwgJj0gfkZMQUdfVE9fU0VUOworCX0gZWxzZSB7CisJCXZhbCB8PSBG
TEFHX1RPX1NFVDsKKwl9CisKKwlyZXR1cm4gU01CX1ZGU19GQ05UTChmc3AsIEZfU0VURkwsIHZh
bCk7CisjdW5kZWYgRkxBR19UT19TRVQKK30KKwogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICBUcmFu
c2ZlciBzb21lIGRhdGEgKG4gYnl0ZXMpIGJldHdlZW4gdHdvIGZpbGVfc3RydWN0J3MuCiAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqLwotLSAKMi4yMS4wCgo=


--=-1oB/HmJ46LG8d4VHOV59--


