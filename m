Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id 678BF1E9A0F
	for <lists+samba-technical@lfdr.de>; Sun, 31 May 2020 21:20:40 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=From:List-Id:To:Subject:Date:cc;
	bh=B0k4RBB31VCcLY9FkU0V96aYjczPRjwRLsRLsvmhuaQ=; b=cO9Upc8MoJBMn+LzsBxtKXm7hw
	pMofV9rPU+ndRP12epf1SBPSQUc3FHrOossZk8zC5/4SOeZZ/O5BaNTFYa3Sx2pxjD4sxt3ZxTDpW
	r9dLpWOytrD1yqd4L2IUmV8c5yw//XcTeAEeKLe4c1o9zl+MmdMVDkBdNzfXi8C92uuS1D7G9gxdp
	jDNRDMq9KrJauWMHPfR53GYPFSC2DNSgCNf8NkRBC5zoi57iDMkqkDS65a6Zx+sl13Zc/YPo5lSDy
	NZUzcoeR4saEl5nZwKODAUk+d/BFDDtC1F7IDeRZPu8KUg6ArE2dSGPi2zOpd3g7GFBKCdkPtl39H
	kAsYMBpw==;
Received: from localhost ([::1]:26056 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1jfTV5-006Vwd-SL; Sun, 31 May 2020 19:20:03 +0000
Received: from mail-yb1-xb41.google.com ([2607:f8b0:4864:20::b41]:33870) 
 by hr1.samba.org with esmtps (TLS1.3:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1jfTUy-006Vvy-5P
 for samba-technical@lists.samba.org; Sun, 31 May 2020 19:20:00 +0000
Received: by mail-yb1-xb41.google.com with SMTP id a80so3314891ybg.1
 for <samba-technical@lists.samba.org>; Sun, 31 May 2020 12:19:55 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=mime-version:from:date:message-id:subject:to:cc;
 bh=B0k4RBB31VCcLY9FkU0V96aYjczPRjwRLsRLsvmhuaQ=;
 b=DmgpZJgTpcr1SRFD/Na2zKI0HbkHRtjGBiJ3qWUStKte6Jlc9Hxu+PzGMtV18wjle0
 WPOUGh7lyem4hXseD9UCzCuRuYb4a8eEvS/lAlKhcDWWNk6uD5vmlzC314PA3m2+0QsN
 Ah9f7/gNLZpXPLbU3GCHS9NcsmrY55IUjFNZPFLMdF4vuOXMSmvAkd7VrJNsfdtrdsDz
 H9vZAkWFMwTkHbcQ2wSb8QN7rj5AgAVc/HvV/UHL4gGm119DGv1LF6r9weTs52mjIPol
 qtwxYHGO9gW8GKg0FZip+n+6op7EAbBtz+QjViJcG6Bk3fiPuhqBj+k3nnRukrRi9ak1
 TEXQ==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to:cc;
 bh=B0k4RBB31VCcLY9FkU0V96aYjczPRjwRLsRLsvmhuaQ=;
 b=MhvEYZ7LAqo0Udp2AD/cR+FO9KZI4hYA0eBEEAQxszinB6JCRV9Nt1M5swwLHSGFwF
 rjgLnhlA8HtT2fOewCcaeDI3o0bdWAkD6GCvLZbcSBpaKzSB4To7An5f6zt5kWyS3+Ap
 wdHZBvAOjVUKzirr1Wjbib5gQJtJ0o+7qznFoBTBo3T2aqUJlZOlKBrpNs7cwKT+qxbJ
 xzz6mEUcGrQRcxQVC2eMUxmZsyJklXtmCCXqh32WubrsJ9kaUwGN2EgeGSRmlGPhwWXa
 /WtTNJn5Jpbi7ZLRPPzaF7XPjFNLsIE8mhcF/FLZi4pUluIhjXY3Dd8Q3ZbVF1gD6jza
 3YUw==
X-Gm-Message-State: AOAM532YtluaEh2+q7sQ1NnZJIKiJUH47hVkfkv3E697X3VXNnQpQnbb
 6Nhlrpskj/BDY/bgWYsn16QQoI+kY4XAWg1MJ3gqadSHiqs=
X-Google-Smtp-Source: ABdhPJwHWJKX7VqzWdXMcII1UcMuOn4O8ta7hRAiTZ/dFC4T2ljNB4bm+kYR4DpQGWTjFixQ94d6BIHXTC7CM5xbnWk=
X-Received: by 2002:a25:ba0f:: with SMTP id t15mr30751540ybg.376.1590952793932; 
 Sun, 31 May 2020 12:19:53 -0700 (PDT)
MIME-Version: 1.0
Date: Sun, 31 May 2020 14:19:42 -0500
Message-ID: <CAH2r5mtkjLYuy7+--JNuixnQQq4hSdUqFBr+b257nxJsSz5_hA@mail.gmail.com>
Subject: [PATCH 2 of 4][SMB3] multichannel: move channel selection above
 transport layer
To: samba-technical <samba-technical@lists.samba.org>,
 CIFS <linux-cifs@vger.kernel.org>, 
 =?UTF-8?Q?Aur=C3=A9lien_Aptel?= <aaptel@suse.com>
Content-Type: multipart/mixed; boundary="00000000000023432d05a6f6904b"
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Steve French via samba-technical <samba-technical@lists.samba.org>
Reply-To: Steve French <smfrench@gmail.com>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>

--00000000000023432d05a6f6904b
Content-Type: text/plain; charset="UTF-8"

Slightly updated version of Aurelien's multichannel patch 2 of 4
(works around merge conflict with Ronnie's stack size reduction
patch).

    Move the channel (TCP_Server_Info*) selection from the tranport
    layer to higher in the call stack so that:

    - credit handling is done with the server that will actually be used
      to send.
      * ->wait_mtu_credit
      * ->set_credits / set_credits
      * ->add_credits / add_credits
      * add_credits_and_wake_if

    - potential reconnection (smb2_reconnect) done when initializing a
      request is checked and done with the server that will actually be
      used to send.

    To do this:

    - remove the cifs_pick_channel() call out of compound_send_recv()

    - select channel and pass it down by adding a cifs_pick_channel(ses)
      call in:
      - smb311_posix_mkdir
      - SMB2_open
      - SMB2_ioctl
      - __SMB2_close
      - query_info
     - SMB2_change_notify
      - SMB2_flush
      - smb2_async_readv  (if none provided in context param)
      - SMB2_read         (if none provided in context param)
      - smb2_async_writev (if none provided in context param)
      - SMB2_write        (if none provided in context param)
      - SMB2_query_directory
      - send_set_info
      - SMB2_oplock_break
      - SMB311_posix_qfs_info
      - SMB2_QFS_info
      - SMB2_QFS_attr
      - smb2_lockv
      - SMB2_lease_break
        - smb2_compound_op
      - smb2_set_ea
      - smb2_ioctl_query_info
      - smb2_query_dir_first
      - smb2_query_info_comound
      - smb2_query_symlink
      - cifs_writepages
      - cifs_write_from_iter
      - cifs_send_async_read
      - cifs_read
      - cifs_readpages

    - add TCP_Server_Info *server param argument to:
      - cifs_send_recv
      - compound_send_recv
      - SMB2_open_init
      - SMB2_query_info_init
      - SMB2_set_info_init
      - SMB2_close_init
      - SMB2_ioctl_init
      - smb2_iotcl_req_init
      - SMB2_query_directory_init
      - SMB2_notify_init
      - SMB2_flush_init
      - build_qfs_info_req
      - smb2_hdr_assemble
      - smb2_reconnect
      - fill_small_buf
      - smb2_plain_req_init
      - __smb2_plain_req_init

    The read/write codepath is different than the rest as it is using
    pages, io iterators and async calls. To deal with those we add a
    server pointer in the cifs_writedata/cifs_readdata/cifs_io_parms
    context struct and set it in:

    - cifs_writepages      (wdata)
    - cifs_write_from_iter (wdata)
    - cifs_readpages       (rdata)
    - cifs_send_async_read (rdata)

    The [rw]data->server pointer is eventually copied to
    cifs_io_parms->server to pass it down to SMB2_read/SMB2_write.
    If SMB2_read/SMB2_write is called from a different place that doesn't
    set the server field it will pick a channel.

    Some places do not pick a channel and just use ses->server or
    cifs_ses_server(ses). All cifs_ses_server(ses) calls are in codepaths
    involving negprot/sess.setup.

    - SMB2_negotiate         (binding channel)
    - SMB2_sess_alloc_buffer (binding channel)
    - SMB2_echo              (uses provided one)
    - SMB2_logoff            (uses master)
    - SMB2_tdis              (uses master)

    (list not exhaustive)

    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>



-- 
Thanks,

Steve

--00000000000023432d05a6f6904b
Content-Type: text/x-patch; charset="US-ASCII"; 
	name="0001-cifs-multichannel-move-channel-selection-above-trans.patch"
Content-Disposition: attachment; 
	filename="0001-cifs-multichannel-move-channel-selection-above-trans.patch"
Content-Transfer-Encoding: base64
Content-ID: <f_kavg78us0>
X-Attachment-Id: f_kavg78us0

RnJvbSBkMjBhNDIzMzYzN2Y1NWFlOWFjODIxZjQ4MWI5N2ZjNjI5ZjI1NjU1IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBdXJlbGllbiBBcHRlbCA8YWFwdGVsQHN1c2UuY29tPgpEYXRl
OiBTdW4sIDMxIE1heSAyMDIwIDEyOjM4OjIyIC0wNTAwClN1YmplY3Q6IFtQQVRDSF0gY2lmczog
bXVsdGljaGFubmVsOiBtb3ZlIGNoYW5uZWwgc2VsZWN0aW9uIGFib3ZlIHRyYW5zcG9ydAogbGF5
ZXIKCk1vdmUgdGhlIGNoYW5uZWwgKFRDUF9TZXJ2ZXJfSW5mbyopIHNlbGVjdGlvbiBmcm9tIHRo
ZSB0cmFucG9ydApsYXllciB0byBoaWdoZXIgaW4gdGhlIGNhbGwgc3RhY2sgc28gdGhhdDoKCi0g
Y3JlZGl0IGhhbmRsaW5nIGlzIGRvbmUgd2l0aCB0aGUgc2VydmVyIHRoYXQgd2lsbCBhY3R1YWxs
eSBiZSB1c2VkCiAgdG8gc2VuZC4KICAqIC0+d2FpdF9tdHVfY3JlZGl0CiAgKiAtPnNldF9jcmVk
aXRzIC8gc2V0X2NyZWRpdHMKICAqIC0+YWRkX2NyZWRpdHMgLyBhZGRfY3JlZGl0cwogICogYWRk
X2NyZWRpdHNfYW5kX3dha2VfaWYKCi0gcG90ZW50aWFsIHJlY29ubmVjdGlvbiAoc21iMl9yZWNv
bm5lY3QpIGRvbmUgd2hlbiBpbml0aWFsaXppbmcgYQogIHJlcXVlc3QgaXMgY2hlY2tlZCBhbmQg
ZG9uZSB3aXRoIHRoZSBzZXJ2ZXIgdGhhdCB3aWxsIGFjdHVhbGx5IGJlCiAgdXNlZCB0byBzZW5k
LgoKVG8gZG8gdGhpczoKCi0gcmVtb3ZlIHRoZSBjaWZzX3BpY2tfY2hhbm5lbCgpIGNhbGwgb3V0
IG9mIGNvbXBvdW5kX3NlbmRfcmVjdigpCgotIHNlbGVjdCBjaGFubmVsIGFuZCBwYXNzIGl0IGRv
d24gYnkgYWRkaW5nIGEgY2lmc19waWNrX2NoYW5uZWwoc2VzKQogIGNhbGwgaW46CiAgLSBzbWIz
MTFfcG9zaXhfbWtkaXIKICAtIFNNQjJfb3BlbgogIC0gU01CMl9pb2N0bAogIC0gX19TTUIyX2Ns
b3NlCiAgLSBxdWVyeV9pbmZvCiAgLSBTTUIyX2NoYW5nZV9ub3RpZnkKICAtIFNNQjJfZmx1c2gK
ICAtIHNtYjJfYXN5bmNfcmVhZHYgIChpZiBub25lIHByb3ZpZGVkIGluIGNvbnRleHQgcGFyYW0p
CiAgLSBTTUIyX3JlYWQgICAgICAgICAoaWYgbm9uZSBwcm92aWRlZCBpbiBjb250ZXh0IHBhcmFt
KQogIC0gc21iMl9hc3luY193cml0ZXYgKGlmIG5vbmUgcHJvdmlkZWQgaW4gY29udGV4dCBwYXJh
bSkKICAtIFNNQjJfd3JpdGUgICAgICAgIChpZiBub25lIHByb3ZpZGVkIGluIGNvbnRleHQgcGFy
YW0pCiAgLSBTTUIyX3F1ZXJ5X2RpcmVjdG9yeQogIC0gc2VuZF9zZXRfaW5mbwogIC0gU01CMl9v
cGxvY2tfYnJlYWsKICAtIFNNQjMxMV9wb3NpeF9xZnNfaW5mbwogIC0gU01CMl9RRlNfaW5mbwog
IC0gU01CMl9RRlNfYXR0cgogIC0gc21iMl9sb2NrdgogIC0gU01CMl9sZWFzZV9icmVhawogICAg
LSBzbWIyX2NvbXBvdW5kX29wCiAgLSBzbWIyX3NldF9lYQogIC0gc21iMl9pb2N0bF9xdWVyeV9p
bmZvCiAgLSBzbWIyX3F1ZXJ5X2Rpcl9maXJzdAogIC0gc21iMl9xdWVyeV9pbmZvX2NvbW91bmQK
ICAtIHNtYjJfcXVlcnlfc3ltbGluawogIC0gY2lmc193cml0ZXBhZ2VzCiAgLSBjaWZzX3dyaXRl
X2Zyb21faXRlcgogIC0gY2lmc19zZW5kX2FzeW5jX3JlYWQKICAtIGNpZnNfcmVhZAogIC0gY2lm
c19yZWFkcGFnZXMKCi0gYWRkIFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyIHBhcmFtIGFyZ3VtZW50
IHRvOgogIC0gY2lmc19zZW5kX3JlY3YKICAtIGNvbXBvdW5kX3NlbmRfcmVjdgogIC0gU01CMl9v
cGVuX2luaXQKICAtIFNNQjJfcXVlcnlfaW5mb19pbml0CiAgLSBTTUIyX3NldF9pbmZvX2luaXQK
ICAtIFNNQjJfY2xvc2VfaW5pdAogIC0gU01CMl9pb2N0bF9pbml0CiAgLSBzbWIyX2lvdGNsX3Jl
cV9pbml0CiAgLSBTTUIyX3F1ZXJ5X2RpcmVjdG9yeV9pbml0CiAgLSBTTUIyX25vdGlmeV9pbml0
CiAgLSBTTUIyX2ZsdXNoX2luaXQKICAtIGJ1aWxkX3Fmc19pbmZvX3JlcQogIC0gc21iMl9oZHJf
YXNzZW1ibGUKICAtIHNtYjJfcmVjb25uZWN0CiAgLSBmaWxsX3NtYWxsX2J1ZgogIC0gc21iMl9w
bGFpbl9yZXFfaW5pdAogIC0gX19zbWIyX3BsYWluX3JlcV9pbml0CgpUaGUgcmVhZC93cml0ZSBj
b2RlcGF0aCBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgcmVzdCBhcyBpdCBpcyB1c2luZwpwYWdlcywg
aW8gaXRlcmF0b3JzIGFuZCBhc3luYyBjYWxscy4gVG8gZGVhbCB3aXRoIHRob3NlIHdlIGFkZCBh
CnNlcnZlciBwb2ludGVyIGluIHRoZSBjaWZzX3dyaXRlZGF0YS9jaWZzX3JlYWRkYXRhL2NpZnNf
aW9fcGFybXMKY29udGV4dCBzdHJ1Y3QgYW5kIHNldCBpdCBpbjoKCi0gY2lmc193cml0ZXBhZ2Vz
ICAgICAgKHdkYXRhKQotIGNpZnNfd3JpdGVfZnJvbV9pdGVyICh3ZGF0YSkKLSBjaWZzX3JlYWRw
YWdlcyAgICAgICAocmRhdGEpCi0gY2lmc19zZW5kX2FzeW5jX3JlYWQgKHJkYXRhKQoKVGhlIFty
d11kYXRhLT5zZXJ2ZXIgcG9pbnRlciBpcyBldmVudHVhbGx5IGNvcGllZCB0bwpjaWZzX2lvX3Bh
cm1zLT5zZXJ2ZXIgdG8gcGFzcyBpdCBkb3duIHRvIFNNQjJfcmVhZC9TTUIyX3dyaXRlLgpJZiBT
TUIyX3JlYWQvU01CMl93cml0ZSBpcyBjYWxsZWQgZnJvbSBhIGRpZmZlcmVudCBwbGFjZSB0aGF0
IGRvZXNuJ3QKc2V0IHRoZSBzZXJ2ZXIgZmllbGQgaXQgd2lsbCBwaWNrIGEgY2hhbm5lbC4KClNv
bWUgcGxhY2VzIGRvIG5vdCBwaWNrIGEgY2hhbm5lbCBhbmQganVzdCB1c2Ugc2VzLT5zZXJ2ZXIg
b3IKY2lmc19zZXNfc2VydmVyKHNlcykuIEFsbCBjaWZzX3Nlc19zZXJ2ZXIoc2VzKSBjYWxscyBh
cmUgaW4gY29kZXBhdGhzCmludm9sdmluZyBuZWdwcm90L3Nlc3Muc2V0dXAuCgotIFNNQjJfbmVn
b3RpYXRlICAgICAgICAgKGJpbmRpbmcgY2hhbm5lbCkKLSBTTUIyX3Nlc3NfYWxsb2NfYnVmZmVy
IChiaW5kaW5nIGNoYW5uZWwpCi0gU01CMl9lY2hvICAgICAgICAgICAgICAodXNlcyBwcm92aWRl
ZCBvbmUpCi0gU01CMl9sb2dvZmYgICAgICAgICAgICAodXNlcyBtYXN0ZXIpCi0gU01CMl90ZGlz
ICAgICAgICAgICAgICAodXNlcyBtYXN0ZXIpCgoobGlzdCBub3QgZXhoYXVzdGl2ZSkKClNpZ25l
ZC1vZmYtYnk6IEF1cmVsaWVuIEFwdGVsIDxhYXB0ZWxAc3VzZS5jb20+ClNpZ25lZC1vZmYtYnk6
IFN0ZXZlIEZyZW5jaCA8c3RmcmVuY2hAbWljcm9zb2Z0LmNvbT4KLS0tCiBmcy9jaWZzL2NpZnNn
bG9iLmggIHwgICAzICsKIGZzL2NpZnMvY2lmc3Byb3RvLmggfCAgIDIgKwogZnMvY2lmcy9maWxl
LmMgICAgICB8ICAzMiArKy0tCiBmcy9jaWZzL2xpbmsuYyAgICAgIHwgICAyICstCiBmcy9jaWZz
L3NtYjJpbm9kZS5jIHwgIDQ0ICsrKystLQogZnMvY2lmcy9zbWIyb3BzLmMgICB8ICA3OSArKysr
KystLS0tCiBmcy9jaWZzL3NtYjJwZHUuYyAgIHwgMzUzICsrKysrKysrKysrKysrKysrKysrKysr
KysrKy0tLS0tLS0tLS0tLS0tLS0tCiBmcy9jaWZzL3NtYjJwcm90by5oIHwgIDI1ICsrKy0KIGZz
L2NpZnMvdHJhbnNwb3J0LmMgfCAgMTQgKy0KIDkgZmlsZXMgY2hhbmdlZCwgMzU2IGluc2VydGlv
bnMoKyksIDE5OCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9mcy9jaWZzL2NpZnNnbG9iLmgg
Yi9mcy9jaWZzL2NpZnNnbG9iLmgKaW5kZXggNGQyNjFmZDc4ZmNiLi5jMGNiYmQwYmJiMWQgMTAw
NjQ0Ci0tLSBhL2ZzL2NpZnMvY2lmc2dsb2IuaAorKysgYi9mcy9jaWZzL2NpZnNnbG9iLmgKQEAg
LTEzMzUsNiArMTMzNSw3IEBAIHN0cnVjdCBjaWZzX2lvX3Bhcm1zIHsKIAlfX3U2NCBvZmZzZXQ7
CiAJdW5zaWduZWQgaW50IGxlbmd0aDsKIAlzdHJ1Y3QgY2lmc190Y29uICp0Y29uOworCXN0cnVj
dCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlcjsKIH07CiAKIHN0cnVjdCBjaWZzX2Fpb19jdHggewpA
QCAtMTM4Miw2ICsxMzgzLDcgQEAgc3RydWN0IGNpZnNfcmVhZGRhdGEgewogCQkJCXN0cnVjdCBj
aWZzX3JlYWRkYXRhICpyZGF0YSwKIAkJCQlzdHJ1Y3QgaW92X2l0ZXIgKml0ZXIpOwogCXN0cnVj
dCBrdmVjCQkJaW92WzJdOworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8JCSpzZXJ2ZXI7CiAjaWZk
ZWYgQ09ORklHX0NJRlNfU01CX0RJUkVDVAogCXN0cnVjdCBzbWJkX21yCQkJKm1yOwogI2VuZGlm
CkBAIC0xNDA4LDYgKzE0MTAsNyBAQCBzdHJ1Y3QgY2lmc193cml0ZWRhdGEgewogCXBpZF90CQkJ
CXBpZDsKIAl1bnNpZ25lZCBpbnQJCQlieXRlczsKIAlpbnQJCQkJcmVzdWx0OworCXN0cnVjdCBU
Q1BfU2VydmVyX0luZm8JCSpzZXJ2ZXI7CiAjaWZkZWYgQ09ORklHX0NJRlNfU01CX0RJUkVDVAog
CXN0cnVjdCBzbWJkX21yCQkJKm1yOwogI2VuZGlmCmRpZmYgLS1naXQgYS9mcy9jaWZzL2NpZnNw
cm90by5oIGIvZnMvY2lmcy9jaWZzcHJvdG8uaAppbmRleCA5NzY3ZjliNWQzMTUuLmEyNWE0NjIz
N2Y5ZiAxMDA2NDQKLS0tIGEvZnMvY2lmcy9jaWZzcHJvdG8uaAorKysgYi9mcy9jaWZzL2NpZnNw
cm90by5oCkBAIC05OCw5ICs5OCwxMSBAQCBleHRlcm4gaW50IGNpZnNfY2FsbF9hc3luYyhzdHJ1
Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCiAJCQljb25zdCBzdHJ1Y3QgY2lmc19jcmVkaXRz
ICpleGlzdF9jcmVkaXRzKTsKIGV4dGVybiBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpjaWZzX3Bp
Y2tfY2hhbm5lbChzdHJ1Y3QgY2lmc19zZXMgKnNlcyk7CiBleHRlcm4gaW50IGNpZnNfc2VuZF9y
ZWN2KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3NlcyAqc2VzLAorCQkJICBz
dHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCiAJCQkgIHN0cnVjdCBzbWJfcnFzdCAqcnFz
dCwgaW50ICpyZXNwX2J1Zl90eXBlLAogCQkJICBjb25zdCBpbnQgZmxhZ3MsIHN0cnVjdCBrdmVj
ICpyZXNwX2lvdik7CiBleHRlcm4gaW50IGNvbXBvdW5kX3NlbmRfcmVjdihjb25zdCB1bnNpZ25l
ZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19zZXMgKnNlcywKKwkJCSAgICAgIHN0cnVjdCBUQ1BfU2Vy
dmVyX0luZm8gKnNlcnZlciwKIAkJCSAgICAgIGNvbnN0IGludCBmbGFncywgY29uc3QgaW50IG51
bV9ycXN0LAogCQkJICAgICAgc3RydWN0IHNtYl9ycXN0ICpycXN0LCBpbnQgKnJlc3BfYnVmX3R5
cGUsCiAJCQkgICAgICBzdHJ1Y3Qga3ZlYyAqcmVzcF9pb3YpOwpkaWZmIC0tZ2l0IGEvZnMvY2lm
cy9maWxlLmMgYi9mcy9jaWZzL2ZpbGUuYwppbmRleCAyMjZiZmE1ZTk0NDQuLmE0MDMzZjJmOTZl
MCAxMDA2NDQKLS0tIGEvZnMvY2lmcy9maWxlLmMKKysrIGIvZnMvY2lmcy9maWxlLmMKQEAgLTIy
OTIsOCArMjI5Miw2IEBAIHdkYXRhX3NlbmRfcGFnZXMoc3RydWN0IGNpZnNfd3JpdGVkYXRhICp3
ZGF0YSwgdW5zaWduZWQgaW50IG5yX3BhZ2VzLAogCQkgc3RydWN0IGFkZHJlc3Nfc3BhY2UgKm1h
cHBpbmcsIHN0cnVjdCB3cml0ZWJhY2tfY29udHJvbCAqd2JjKQogewogCWludCByYzsKLQlzdHJ1
Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPQotCQkJCXRsaW5rX3Rjb24od2RhdGEtPmNmaWxl
LT50bGluayktPnNlcy0+c2VydmVyOwogCiAJd2RhdGEtPnN5bmNfbW9kZSA9IHdiYy0+c3luY19t
b2RlOwogCXdkYXRhLT5ucl9wYWdlcyA9IG5yX3BhZ2VzOwpAQCAtMjMwNSwxNCArMjMwMywxNSBA
QCB3ZGF0YV9zZW5kX3BhZ2VzKHN0cnVjdCBjaWZzX3dyaXRlZGF0YSAqd2RhdGEsIHVuc2lnbmVk
IGludCBucl9wYWdlcywKIAl3ZGF0YS0+Ynl0ZXMgPSAoKG5yX3BhZ2VzIC0gMSkgKiBQQUdFX1NJ
WkUpICsgd2RhdGEtPnRhaWxzejsKIAl3ZGF0YS0+cGlkID0gd2RhdGEtPmNmaWxlLT5waWQ7CiAK
LQlyYyA9IGFkanVzdF9jcmVkaXRzKHNlcnZlciwgJndkYXRhLT5jcmVkaXRzLCB3ZGF0YS0+Ynl0
ZXMpOworCXJjID0gYWRqdXN0X2NyZWRpdHMod2RhdGEtPnNlcnZlciwgJndkYXRhLT5jcmVkaXRz
LCB3ZGF0YS0+Ynl0ZXMpOwogCWlmIChyYykKIAkJcmV0dXJuIHJjOwogCiAJaWYgKHdkYXRhLT5j
ZmlsZS0+aW52YWxpZEhhbmRsZSkKIAkJcmMgPSAtRUFHQUlOOwogCWVsc2UKLQkJcmMgPSBzZXJ2
ZXItPm9wcy0+YXN5bmNfd3JpdGV2KHdkYXRhLCBjaWZzX3dyaXRlZGF0YV9yZWxlYXNlKTsKKwkJ
cmMgPSB3ZGF0YS0+c2VydmVyLT5vcHMtPmFzeW5jX3dyaXRldih3ZGF0YSwKKwkJCQkJCSAgICAg
IGNpZnNfd3JpdGVkYXRhX3JlbGVhc2UpOwogCiAJcmV0dXJuIHJjOwogfQpAQCAtMjM0OSw3ICsy
MzQ4LDggQEAgc3RhdGljIGludCBjaWZzX3dyaXRlcGFnZXMoc3RydWN0IGFkZHJlc3Nfc3BhY2Ug
Km1hcHBpbmcsCiAJCQlyYW5nZV93aG9sZSA9IHRydWU7CiAJCXNjYW5uZWQgPSB0cnVlOwogCX0K
LQlzZXJ2ZXIgPSBjaWZzX3NiX21hc3Rlcl90Y29uKGNpZnNfc2IpLT5zZXMtPnNlcnZlcjsKKwlz
ZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbChjaWZzX3NiX21hc3Rlcl90Y29uKGNpZnNfc2IpLT5z
ZXMpOworCiByZXRyeToKIAl3aGlsZSAoIWRvbmUgJiYgaW5kZXggPD0gZW5kKSB7CiAJCXVuc2ln
bmVkIGludCBpLCBucl9wYWdlcywgZm91bmRfcGFnZXMsIHdzaXplOwpAQCAtMjQwMyw2ICsyNDAz
LDcgQEAgc3RhdGljIGludCBjaWZzX3dyaXRlcGFnZXMoc3RydWN0IGFkZHJlc3Nfc3BhY2UgKm1h
cHBpbmcsCiAKIAkJd2RhdGEtPmNyZWRpdHMgPSBjcmVkaXRzX29uX3N0YWNrOwogCQl3ZGF0YS0+
Y2ZpbGUgPSBjZmlsZTsKKwkJd2RhdGEtPnNlcnZlciA9IHNlcnZlcjsKIAkJY2ZpbGUgPSBOVUxM
OwogCiAJCWlmICghd2RhdGEtPmNmaWxlKSB7CkBAIC0yODA2LDggKzI4MDcsNyBAQCBjaWZzX3Jl
c2VuZF93ZGF0YShzdHJ1Y3QgY2lmc193cml0ZWRhdGEgKndkYXRhLCBzdHJ1Y3QgbGlzdF9oZWFk
ICp3ZGF0YV9saXN0LAogCXVuc2lnbmVkIGludCB3c2l6ZTsKIAlzdHJ1Y3QgY2lmc19jcmVkaXRz
IGNyZWRpdHM7CiAJaW50IHJjOwotCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciA9Ci0J
CXRsaW5rX3Rjb24od2RhdGEtPmNmaWxlLT50bGluayktPnNlcy0+c2VydmVyOworCXN0cnVjdCBU
Q1BfU2VydmVyX0luZm8gKnNlcnZlciA9IHdkYXRhLT5zZXJ2ZXI7CiAKIAlkbyB7CiAJCWlmICh3
ZGF0YS0+Y2ZpbGUtPmludmFsaWRIYW5kbGUpIHsKQEAgLTI4OTMsNyArMjg5Myw3IEBAIGNpZnNf
d3JpdGVfZnJvbV9pdGVyKGxvZmZfdCBvZmZzZXQsIHNpemVfdCBsZW4sIHN0cnVjdCBpb3ZfaXRl
ciAqZnJvbSwKIAllbHNlCiAJCXBpZCA9IGN1cnJlbnQtPnRnaWQ7CiAKLQlzZXJ2ZXIgPSB0bGlu
a190Y29uKG9wZW5fZmlsZS0+dGxpbmspLT5zZXMtPnNlcnZlcjsKKwlzZXJ2ZXIgPSBjaWZzX3Bp
Y2tfY2hhbm5lbCh0bGlua190Y29uKG9wZW5fZmlsZS0+dGxpbmspLT5zZXMpOwogCXhpZCA9IGdl
dF94aWQoKTsKIAogCWRvIHsKQEAgLTI5OTcsNiArMjk5Nyw3IEBAIGNpZnNfd3JpdGVfZnJvbV9p
dGVyKGxvZmZfdCBvZmZzZXQsIHNpemVfdCBsZW4sIHN0cnVjdCBpb3ZfaXRlciAqZnJvbSwKIAkJ
d2RhdGEtPm5yX3BhZ2VzID0gbnJfcGFnZXM7CiAJCXdkYXRhLT5vZmZzZXQgPSAoX191NjQpb2Zm
c2V0OwogCQl3ZGF0YS0+Y2ZpbGUgPSBjaWZzRmlsZUluZm9fZ2V0KG9wZW5fZmlsZSk7CisJCXdk
YXRhLT5zZXJ2ZXIgPSBzZXJ2ZXI7CiAJCXdkYXRhLT5waWQgPSBwaWQ7CiAJCXdkYXRhLT5ieXRl
cyA9IGN1cl9sZW47CiAJCXdkYXRhLT5wYWdlc3ogPSBQQUdFX1NJWkU7CkBAIC0zNTM4LDggKzM1
MzksMTAgQEAgc3RhdGljIGludCBjaWZzX3Jlc2VuZF9yZGF0YShzdHJ1Y3QgY2lmc19yZWFkZGF0
YSAqcmRhdGEsCiAJdW5zaWduZWQgaW50IHJzaXplOwogCXN0cnVjdCBjaWZzX2NyZWRpdHMgY3Jl
ZGl0czsKIAlpbnQgcmM7Ci0Jc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyID0KLQkJdGxp
bmtfdGNvbihyZGF0YS0+Y2ZpbGUtPnRsaW5rKS0+c2VzLT5zZXJ2ZXI7CisJc3RydWN0IFRDUF9T
ZXJ2ZXJfSW5mbyAqc2VydmVyOworCisJLyogWFhYOiBzaG91bGQgd2UgcGljayBhIG5ldyBjaGFu
bmVsIGhlcmU/ICovCisJc2VydmVyID0gcmRhdGEtPnNlcnZlcjsKIAogCWRvIHsKIAkJaWYgKHJk
YXRhLT5jZmlsZS0+aW52YWxpZEhhbmRsZSkgewpAQCAtMzYxOCw3ICszNjIxLDcgQEAgY2lmc19z
ZW5kX2FzeW5jX3JlYWQobG9mZl90IG9mZnNldCwgc2l6ZV90IGxlbiwgc3RydWN0IGNpZnNGaWxl
SW5mbyAqb3Blbl9maWxlLAogCXNpemVfdCBzdGFydDsKIAlzdHJ1Y3QgaW92X2l0ZXIgZGlyZWN0
X2lvdiA9IGN0eC0+aXRlcjsKIAotCXNlcnZlciA9IHRsaW5rX3Rjb24ob3Blbl9maWxlLT50bGlu
ayktPnNlcy0+c2VydmVyOworCXNlcnZlciA9IGNpZnNfcGlja19jaGFubmVsKHRsaW5rX3Rjb24o
b3Blbl9maWxlLT50bGluayktPnNlcyk7CiAKIAlpZiAoY2lmc19zYi0+bW50X2NpZnNfZmxhZ3Mg
JiBDSUZTX01PVU5UX1JXUElERk9SV0FSRCkKIAkJcGlkID0gb3Blbl9maWxlLT5waWQ7CkBAIC0z
NzAyLDYgKzM3MDUsNyBAQCBjaWZzX3NlbmRfYXN5bmNfcmVhZChsb2ZmX3Qgb2Zmc2V0LCBzaXpl
X3QgbGVuLCBzdHJ1Y3QgY2lmc0ZpbGVJbmZvICpvcGVuX2ZpbGUsCiAJCQlyZGF0YS0+dGFpbHN6
ID0gUEFHRV9TSVpFOwogCQl9CiAKKwkJcmRhdGEtPnNlcnZlciA9IHNlcnZlcjsKIAkJcmRhdGEt
PmNmaWxlID0gY2lmc0ZpbGVJbmZvX2dldChvcGVuX2ZpbGUpOwogCQlyZGF0YS0+bnJfcGFnZXMg
PSBucGFnZXM7CiAJCXJkYXRhLT5vZmZzZXQgPSBvZmZzZXQ7CkBAIC00MDMxLDcgKzQwMzUsNyBA
QCBjaWZzX3JlYWQoc3RydWN0IGZpbGUgKmZpbGUsIGNoYXIgKnJlYWRfZGF0YSwgc2l6ZV90IHJl
YWRfc2l6ZSwgbG9mZl90ICpvZmZzZXQpCiAJfQogCW9wZW5fZmlsZSA9IGZpbGUtPnByaXZhdGVf
ZGF0YTsKIAl0Y29uID0gdGxpbmtfdGNvbihvcGVuX2ZpbGUtPnRsaW5rKTsKLQlzZXJ2ZXIgPSB0
Y29uLT5zZXMtPnNlcnZlcjsKKwlzZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbCh0Y29uLT5zZXMp
OwogCiAJaWYgKCFzZXJ2ZXItPm9wcy0+c3luY19yZWFkKSB7CiAJCWZyZWVfeGlkKHhpZCk7CkBA
IC00MDcwLDYgKzQwNzQsNyBAQCBjaWZzX3JlYWQoc3RydWN0IGZpbGUgKmZpbGUsIGNoYXIgKnJl
YWRfZGF0YSwgc2l6ZV90IHJlYWRfc2l6ZSwgbG9mZl90ICpvZmZzZXQpCiAJCQlpb19wYXJtcy50
Y29uID0gdGNvbjsKIAkJCWlvX3Bhcm1zLm9mZnNldCA9ICpvZmZzZXQ7CiAJCQlpb19wYXJtcy5s
ZW5ndGggPSBjdXJyZW50X3JlYWRfc2l6ZTsKKwkJCWlvX3Bhcm1zLnNlcnZlciA9IHNlcnZlcjsK
IAkJCXJjID0gc2VydmVyLT5vcHMtPnN5bmNfcmVhZCh4aWQsICZvcGVuX2ZpbGUtPmZpZCwgJmlv
X3Bhcm1zLAogCQkJCQkJICAgICZieXRlc19yZWFkLCAmY3VyX29mZnNldCwKIAkJCQkJCSAgICAm
YnVmX3R5cGUpOwpAQCAtNDM3Miw3ICs0Mzc3LDcgQEAgc3RhdGljIGludCBjaWZzX3JlYWRwYWdl
cyhzdHJ1Y3QgZmlsZSAqZmlsZSwgc3RydWN0IGFkZHJlc3Nfc3BhY2UgKm1hcHBpbmcsCiAJCXBp
ZCA9IGN1cnJlbnQtPnRnaWQ7CiAKIAlyYyA9IDA7Ci0Jc2VydmVyID0gdGxpbmtfdGNvbihvcGVu
X2ZpbGUtPnRsaW5rKS0+c2VzLT5zZXJ2ZXI7CisJc2VydmVyID0gY2lmc19waWNrX2NoYW5uZWwo
dGxpbmtfdGNvbihvcGVuX2ZpbGUtPnRsaW5rKS0+c2VzKTsKIAogCWNpZnNfZGJnKEZZSSwgIiVz
OiBmaWxlPSVwIG1hcHBpbmc9JXAgbnVtX3BhZ2VzPSV1XG4iLAogCQkgX19mdW5jX18sIGZpbGUs
IG1hcHBpbmcsIG51bV9wYWdlcyk7CkBAIC00NDQzLDYgKzQ0NDgsNyBAQCBzdGF0aWMgaW50IGNp
ZnNfcmVhZHBhZ2VzKHN0cnVjdCBmaWxlICpmaWxlLCBzdHJ1Y3QgYWRkcmVzc19zcGFjZSAqbWFw
cGluZywKIAkJfQogCiAJCXJkYXRhLT5jZmlsZSA9IGNpZnNGaWxlSW5mb19nZXQob3Blbl9maWxl
KTsKKwkJcmRhdGEtPnNlcnZlciA9IHNlcnZlcjsKIAkJcmRhdGEtPm1hcHBpbmcgPSBtYXBwaW5n
OwogCQlyZGF0YS0+b2Zmc2V0ID0gb2Zmc2V0OwogCQlyZGF0YS0+Ynl0ZXMgPSBieXRlczsKZGlm
ZiAtLWdpdCBhL2ZzL2NpZnMvbGluay5jIGIvZnMvY2lmcy9saW5rLmMKaW5kZXggYTI1ZWYzNWIw
MjNlLi40ODNmODdmNTMwODYgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvbGluay5jCisrKyBiL2ZzL2Np
ZnMvbGluay5jCkBAIC00NTAsNyArNDUwLDcgQEAgc21iM19jcmVhdGVfbWZfc3ltbGluayh1bnNp
Z25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCWludCByYzsKIAlzdHJ1Y3Qg
Y2lmc19maWQgZmlkOwogCXN0cnVjdCBjaWZzX29wZW5fcGFybXMgb3Bhcm1zOwotCXN0cnVjdCBj
aWZzX2lvX3Bhcm1zIGlvX3Bhcm1zOworCXN0cnVjdCBjaWZzX2lvX3Bhcm1zIGlvX3Bhcm1zID0g
ezB9OwogCV9fbGUxNiAqdXRmMTZfcGF0aDsKIAlfX3U4IG9wbG9jayA9IFNNQjJfT1BMT0NLX0xF
VkVMX05PTkU7CiAJc3RydWN0IGt2ZWMgaW92WzJdOwpkaWZmIC0tZ2l0IGEvZnMvY2lmcy9zbWIy
aW5vZGUuYyBiL2ZzL2NpZnMvc21iMmlub2RlLmMKaW5kZXggZmE4NmM3ODM4NGMzLi4wYTExNmZj
NDkwYTkgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvc21iMmlub2RlLmMKKysrIGIvZnMvY2lmcy9zbWIy
aW5vZGUuYwpAQCAtNzQsNiArNzQsNyBAQCBzbWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2lnbmVk
IGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJX191OCBvcGxvY2sgPSBTTUIyX09Q
TE9DS19MRVZFTF9OT05FOwogCXN0cnVjdCBjaWZzX2ZpZCBmaWQ7CiAJc3RydWN0IGNpZnNfc2Vz
ICpzZXMgPSB0Y29uLT5zZXM7CisJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyOwogCWlu
dCBudW1fcnFzdCA9IDA7CiAJaW50IHJlc3BfYnVmdHlwZVszXTsKIAlzdHJ1Y3Qgc21iMl9xdWVy
eV9pbmZvX3JzcCAqcWlfcnNwID0gTlVMTDsKQEAgLTg5LDYgKzkwLDggQEAgc21iMl9jb21wb3Vu
ZF9vcChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCXJx
c3QgPSAmdmFycy0+cnFzdFswXTsKIAlyc3BfaW92ID0gJnZhcnMtPnJzcF9pb3ZbMF07CiAKKwlz
ZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbChzZXMpOworCiAJaWYgKHNtYjNfZW5jcnlwdGlvbl9y
ZXF1aXJlZCh0Y29uKSkKIAkJZmxhZ3MgfD0gQ0lGU19UUkFOU0ZPUk1fUkVROwogCkBAIC0xMTUs
NyArMTE4LDggQEAgc21iMl9jb21wb3VuZF9vcChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1
Y3QgY2lmc190Y29uICp0Y29uLAogCiAJcnFzdFtudW1fcnFzdF0ucnFfaW92ID0gJnZhcnMtPm9w
ZW5faW92WzBdOwogCXJxc3RbbnVtX3Jxc3RdLnJxX252ZWMgPSBTTUIyX0NSRUFURV9JT1ZfU0la
RTsKLQlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24sICZycXN0W251bV9ycXN0XSwgJm9wbG9jaywg
JnZhcnMtPm9wYXJtcywKKwlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAg
ICAmcnFzdFtudW1fcnFzdF0sICZvcGxvY2ssICZ2YXJzLT5vcGFybXMsCiAJCQkgICAgdXRmMTZf
cGF0aCk7CiAJa2ZyZWUodXRmMTZfcGF0aCk7CiAJaWYgKHJjKQpAQCAtMTMzLDcgKzEzNyw4IEBA
IHNtYjJfY29tcG91bmRfb3AoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNv
biAqdGNvbiwKIAkJcnFzdFtudW1fcnFzdF0ucnFfbnZlYyA9IDE7CiAKIAkJaWYgKGNmaWxlKQot
CQkJcmMgPSBTTUIyX3F1ZXJ5X2luZm9faW5pdCh0Y29uLCAmcnFzdFtudW1fcnFzdF0sCisJCQly
YyA9IFNNQjJfcXVlcnlfaW5mb19pbml0KHRjb24sIHNlcnZlciwKKwkJCQkmcnFzdFtudW1fcnFz
dF0sCiAJCQkJY2ZpbGUtPmZpZC5wZXJzaXN0ZW50X2ZpZCwKIAkJCQljZmlsZS0+ZmlkLnZvbGF0
aWxlX2ZpZCwKIAkJCQlGSUxFX0FMTF9JTkZPUk1BVElPTiwKQEAgLTE0MSwxMCArMTQ2LDExIEBA
IHNtYjJfY29tcG91bmRfb3AoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNv
biAqdGNvbiwKIAkJCQlzaXplb2Yoc3RydWN0IHNtYjJfZmlsZV9hbGxfaW5mbykgKwogCQkJCQkg
IFBBVEhfTUFYICogMiwgMCwgTlVMTCk7CiAJCWVsc2UgewotCQkJcmMgPSBTTUIyX3F1ZXJ5X2lu
Zm9faW5pdCh0Y29uLCAmcnFzdFtudW1fcnFzdF0sCisJCQlyYyA9IFNNQjJfcXVlcnlfaW5mb19p
bml0KHRjb24sIHNlcnZlciwKKwkJCQkmcnFzdFtudW1fcnFzdF0sCiAJCQkJQ09NUE9VTkRfRklE
LAogCQkJCUNPTVBPVU5EX0ZJRCwKLQkJCQkgRklMRV9BTExfSU5GT1JNQVRJT04sCisJCQkJRklM
RV9BTExfSU5GT1JNQVRJT04sCiAJCQkJU01CMl9PX0lORk9fRklMRSwgMCwKIAkJCQlzaXplb2Yo
c3RydWN0IHNtYjJfZmlsZV9hbGxfaW5mbykgKwogCQkJCQkgIFBBVEhfTUFYICogMiwgMCwgTlVM
TCk7CkBAIC0xNzcsNyArMTgzLDggQEAgc21iMl9jb21wb3VuZF9vcChjb25zdCB1bnNpZ25lZCBp
bnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCQlzaXplWzBdID0gMTsgLyogc2l6ZW9m
IF9fdTggU2VlIE1TLUZTQ0Mgc2VjdGlvbiAyLjQuMTEgKi8KIAkJZGF0YVswXSA9ICZkZWxldGVf
cGVuZGluZ1swXTsKIAotCQlyYyA9IFNNQjJfc2V0X2luZm9faW5pdCh0Y29uLCAmcnFzdFtudW1f
cnFzdF0sIENPTVBPVU5EX0ZJRCwKKwkJcmMgPSBTTUIyX3NldF9pbmZvX2luaXQodGNvbiwgc2Vy
dmVyLAorCQkJCQkmcnFzdFtudW1fcnFzdF0sIENPTVBPVU5EX0ZJRCwKIAkJCQkJQ09NUE9VTkRf
RklELCBjdXJyZW50LT50Z2lkLAogCQkJCQlGSUxFX0RJU1BPU0lUSU9OX0lORk9STUFUSU9OLAog
CQkJCQlTTUIyX09fSU5GT19GSUxFLCAwLCBkYXRhLCBzaXplKTsKQEAgLTE5NCw3ICsyMDEsOCBA
QCBzbWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rj
b24gKnRjb24sCiAJCXNpemVbMF0gPSA4OyAvKiBzaXplb2YgX19sZTY0ICovCiAJCWRhdGFbMF0g
PSBwdHI7CiAKLQkJcmMgPSBTTUIyX3NldF9pbmZvX2luaXQodGNvbiwgJnJxc3RbbnVtX3Jxc3Rd
LCBDT01QT1VORF9GSUQsCisJCXJjID0gU01CMl9zZXRfaW5mb19pbml0KHRjb24sIHNlcnZlciwK
KwkJCQkJJnJxc3RbbnVtX3Jxc3RdLCBDT01QT1VORF9GSUQsCiAJCQkJCUNPTVBPVU5EX0ZJRCwg
Y3VycmVudC0+dGdpZCwKIAkJCQkJRklMRV9FTkRfT0ZfRklMRV9JTkZPUk1BVElPTiwKIAkJCQkJ
U01CMl9PX0lORk9fRklMRSwgMCwgZGF0YSwgc2l6ZSk7CkBAIC0yMTMsMTMgKzIyMSwxNSBAQCBz
bWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24g
KnRjb24sCiAJCWRhdGFbMF0gPSBwdHI7CiAKIAkJaWYgKGNmaWxlKQotCQkJcmMgPSBTTUIyX3Nl
dF9pbmZvX2luaXQodGNvbiwgJnJxc3RbbnVtX3Jxc3RdLAorCQkJcmMgPSBTTUIyX3NldF9pbmZv
X2luaXQodGNvbiwgc2VydmVyLAorCQkJCSZycXN0W251bV9ycXN0XSwKIAkJCQljZmlsZS0+Zmlk
LnBlcnNpc3RlbnRfZmlkLAogCQkJCWNmaWxlLT5maWQudm9sYXRpbGVfZmlkLCBjdXJyZW50LT50
Z2lkLAogCQkJCUZJTEVfQkFTSUNfSU5GT1JNQVRJT04sCiAJCQkJU01CMl9PX0lORk9fRklMRSwg
MCwgZGF0YSwgc2l6ZSk7CiAJCWVsc2UgewotCQkJcmMgPSBTTUIyX3NldF9pbmZvX2luaXQodGNv
biwgJnJxc3RbbnVtX3Jxc3RdLAorCQkJcmMgPSBTTUIyX3NldF9pbmZvX2luaXQodGNvbiwgc2Vy
dmVyLAorCQkJCSZycXN0W251bV9ycXN0XSwKIAkJCQlDT01QT1VORF9GSUQsCiAJCQkJQ09NUE9V
TkRfRklELCBjdXJyZW50LT50Z2lkLAogCQkJCUZJTEVfQkFTSUNfSU5GT1JNQVRJT04sCkBAIC0y
NTMsMTMgKzI2MywxNSBAQCBzbWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2lnbmVkIGludCB4aWQs
IHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJCWRhdGFbMV0gPSAoX19sZTE2ICopcHRyOwogCiAJ
CWlmIChjZmlsZSkKLQkJCXJjID0gU01CMl9zZXRfaW5mb19pbml0KHRjb24sICZycXN0W251bV9y
cXN0XSwKKwkJCXJjID0gU01CMl9zZXRfaW5mb19pbml0KHRjb24sIHNlcnZlciwKKwkJCQkJCSZy
cXN0W251bV9ycXN0XSwKIAkJCQkJCWNmaWxlLT5maWQucGVyc2lzdGVudF9maWQsCiAJCQkJCQlj
ZmlsZS0+ZmlkLnZvbGF0aWxlX2ZpZCwKIAkJCQkJY3VycmVudC0+dGdpZCwgRklMRV9SRU5BTUVf
SU5GT1JNQVRJT04sCiAJCQkJCVNNQjJfT19JTkZPX0ZJTEUsIDAsIGRhdGEsIHNpemUpOwogCQll
bHNlIHsKLQkJCXJjID0gU01CMl9zZXRfaW5mb19pbml0KHRjb24sICZycXN0W251bV9ycXN0XSwK
KwkJCXJjID0gU01CMl9zZXRfaW5mb19pbml0KHRjb24sIHNlcnZlciwKKwkJCQkJJnJxc3RbbnVt
X3Jxc3RdLAogCQkJCQlDT01QT1VORF9GSUQsIENPTVBPVU5EX0ZJRCwKIAkJCQkJY3VycmVudC0+
dGdpZCwgRklMRV9SRU5BTUVfSU5GT1JNQVRJT04sCiAJCQkJCVNNQjJfT19JTkZPX0ZJTEUsIDAs
IGRhdGEsIHNpemUpOwpAQCAtMjg5LDcgKzMwMSw4IEBAIHNtYjJfY29tcG91bmRfb3AoY29uc3Qg
dW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAkJc2l6ZVsxXSA9IGxl
biArIDIgLyogbnVsbCAqLzsKIAkJZGF0YVsxXSA9IChfX2xlMTYgKilwdHI7CiAKLQkJcmMgPSBT
TUIyX3NldF9pbmZvX2luaXQodGNvbiwgJnJxc3RbbnVtX3Jxc3RdLCBDT01QT1VORF9GSUQsCisJ
CXJjID0gU01CMl9zZXRfaW5mb19pbml0KHRjb24sIHNlcnZlciwKKwkJCQkJJnJxc3RbbnVtX3Jx
c3RdLCBDT01QT1VORF9GSUQsCiAJCQkJCUNPTVBPVU5EX0ZJRCwgY3VycmVudC0+dGdpZCwKIAkJ
CQkJRklMRV9MSU5LX0lORk9STUFUSU9OLAogCQkJCQlTTUIyX09fSU5GT19GSUxFLCAwLCBkYXRh
LCBzaXplKTsKQEAgLTMxMiw3ICszMjUsOCBAQCBzbWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2ln
bmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJLyogQ2xvc2UgKi8KIAlycXN0
W251bV9ycXN0XS5ycV9pb3YgPSAmdmFycy0+Y2xvc2VfaW92WzBdOwogCXJxc3RbbnVtX3Jxc3Rd
LnJxX252ZWMgPSAxOwotCXJjID0gU01CMl9jbG9zZV9pbml0KHRjb24sICZycXN0W251bV9ycXN0
XSwgQ09NUE9VTkRfRklELAorCXJjID0gU01CMl9jbG9zZV9pbml0KHRjb24sIHNlcnZlciwKKwkJ
CSAgICAgJnJxc3RbbnVtX3Jxc3RdLCBDT01QT1VORF9GSUQsCiAJCQkgICAgIENPTVBPVU5EX0ZJ
RCwgZmFsc2UpOwogCXNtYjJfc2V0X3JlbGF0ZWQoJnJxc3RbbnVtX3Jxc3RdKTsKIAlpZiAocmMp
CkBAIC0zMjMsMTEgKzMzNywxMyBAQCBzbWIyX2NvbXBvdW5kX29wKGNvbnN0IHVuc2lnbmVkIGlu
dCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJaWYgKGNmaWxlKSB7CiAJCWNpZnNGaWxl
SW5mb19wdXQoY2ZpbGUpOwogCQljZmlsZSA9IE5VTEw7Ci0JCXJjID0gY29tcG91bmRfc2VuZF9y
ZWN2KHhpZCwgc2VzLCBmbGFncywgbnVtX3Jxc3QgLSAyLAorCQlyYyA9IGNvbXBvdW5kX3NlbmRf
cmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJCQlmbGFncywgbnVtX3Jxc3QgLSAyLAogCQkJCQkm
cnFzdFsxXSwgJnJlc3BfYnVmdHlwZVsxXSwKIAkJCQkJJnJzcF9pb3ZbMV0pOwogCX0gZWxzZQot
CQlyYyA9IGNvbXBvdW5kX3NlbmRfcmVjdih4aWQsIHNlcywgZmxhZ3MsIG51bV9ycXN0LAorCQly
YyA9IGNvbXBvdW5kX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJCQlmbGFncywgbnVt
X3Jxc3QsCiAJCQkJCXJxc3QsIHJlc3BfYnVmdHlwZSwKIAkJCQkJcnNwX2lvdik7CiAKZGlmZiAt
LWdpdCBhL2ZzL2NpZnMvc21iMm9wcy5jIGIvZnMvY2lmcy9zbWIyb3BzLmMKaW5kZXggZGVjMDU1
ZDdjMmY0Li4wNGFjZTQxMWIwYzQgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvc21iMm9wcy5jCisrKyBi
L2ZzL2NpZnMvc21iMm9wcy5jCkBAIC03MDgsNyArNzA4LDggQEAgaW50IG9wZW5fc2hyb290KHVu
c2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJb3Bhcm1zLmZpZCA9IHBm
aWQ7CiAJb3Bhcm1zLnJlY29ubmVjdCA9IGZhbHNlOwogCi0JcmMgPSBTTUIyX29wZW5faW5pdCh0
Y29uLCAmcnFzdFswXSwgJm9wbG9jaywgJm9wYXJtcywgJnV0ZjE2X3BhdGgpOworCXJjID0gU01C
Ml9vcGVuX2luaXQodGNvbiwgc2VydmVyLAorCQkJICAgICZycXN0WzBdLCAmb3Bsb2NrLCAmb3Bh
cm1zLCAmdXRmMTZfcGF0aCk7CiAJaWYgKHJjKQogCQlnb3RvIG9zaHJfZnJlZTsKIAlzbWIyX3Nl
dF9uZXh0X2NvbW1hbmQodGNvbiwgJnJxc3RbMF0pOwpAQCAtNzE3LDcgKzcxOCw4IEBAIGludCBv
cGVuX3Nocm9vdCh1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCXJx
c3RbMV0ucnFfaW92ID0gcWlfaW92OwogCXJxc3RbMV0ucnFfbnZlYyA9IDE7CiAKLQlyYyA9IFNN
QjJfcXVlcnlfaW5mb19pbml0KHRjb24sICZycXN0WzFdLCBDT01QT1VORF9GSUQsCisJcmMgPSBT
TUIyX3F1ZXJ5X2luZm9faW5pdCh0Y29uLCBzZXJ2ZXIsCisJCQkJICAmcnFzdFsxXSwgQ09NUE9V
TkRfRklELAogCQkJCSAgQ09NUE9VTkRfRklELCBGSUxFX0FMTF9JTkZPUk1BVElPTiwKIAkJCQkg
IFNNQjJfT19JTkZPX0ZJTEUsIDAsCiAJCQkJICBzaXplb2Yoc3RydWN0IHNtYjJfZmlsZV9hbGxf
aW5mbykgKwpAQCAtNzI3LDcgKzcyOSw4IEBAIGludCBvcGVuX3Nocm9vdCh1bnNpZ25lZCBpbnQg
eGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCiAJc21iMl9zZXRfcmVsYXRlZCgmcnFzdFsx
XSk7CiAKLQlyYyA9IGNvbXBvdW5kX3NlbmRfcmVjdih4aWQsIHNlcywgZmxhZ3MsIDIsIHJxc3Qs
CisJcmMgPSBjb21wb3VuZF9zZW5kX3JlY3YoeGlkLCBzZXMsIHNlcnZlciwKKwkJCQlmbGFncywg
MiwgcnFzdCwKIAkJCQlyZXNwX2J1ZnR5cGUsIHJzcF9pb3YpOwogCW11dGV4X2xvY2soJnRjb24t
PmNyZmlkLmZpZF9tdXRleCk7CiAKQEAgLTExMDIsNiArMTEwNSw3IEBAIHNtYjJfc2V0X2VhKGNv
bnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJICAgIHN0cnVj
dCBjaWZzX3NiX2luZm8gKmNpZnNfc2IpCiB7CiAJc3RydWN0IGNpZnNfc2VzICpzZXMgPSB0Y29u
LT5zZXM7CisJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyID0gY2lmc19waWNrX2NoYW5u
ZWwoc2VzKTsKIAlfX2xlMTYgKnV0ZjE2X3BhdGggPSBOVUxMOwogCWludCBlYV9uYW1lX2xlbiA9
IHN0cmxlbihlYV9uYW1lKTsKIAlpbnQgZmxhZ3MgPSAwOwpAQCAtMTE5MCw3ICsxMTk0LDggQEAg
c21iMl9zZXRfZWEoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNv
biwKIAlvcGFybXMuZmlkID0gJmZpZDsKIAlvcGFybXMucmVjb25uZWN0ID0gZmFsc2U7CiAKLQly
YyA9IFNNQjJfb3Blbl9pbml0KHRjb24sICZycXN0WzBdLCAmb3Bsb2NrLCAmb3Bhcm1zLCB1dGYx
Nl9wYXRoKTsKKwlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAgICAmcnFz
dFswXSwgJm9wbG9jaywgJm9wYXJtcywgdXRmMTZfcGF0aCk7CiAJaWYgKHJjKQogCQlnb3RvIHNl
YV9leGl0OwogCXNtYjJfc2V0X25leHRfY29tbWFuZCh0Y29uLCAmcnFzdFswXSk7CkBAIC0xMjE2
LDcgKzEyMjEsOCBAQCBzbWIyX3NldF9lYShjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3Qg
Y2lmc190Y29uICp0Y29uLAogCXNpemVbMF0gPSBsZW47CiAJZGF0YVswXSA9IGVhOwogCi0JcmMg
PSBTTUIyX3NldF9pbmZvX2luaXQodGNvbiwgJnJxc3RbMV0sIENPTVBPVU5EX0ZJRCwKKwlyYyA9
IFNNQjJfc2V0X2luZm9faW5pdCh0Y29uLCBzZXJ2ZXIsCisJCQkJJnJxc3RbMV0sIENPTVBPVU5E
X0ZJRCwKIAkJCQlDT01QT1VORF9GSUQsIGN1cnJlbnQtPnRnaWQsCiAJCQkJRklMRV9GVUxMX0VB
X0lORk9STUFUSU9OLAogCQkJCVNNQjJfT19JTkZPX0ZJTEUsIDAsIGRhdGEsIHNpemUpOwpAQCAt
MTIyOCwxMCArMTIzNCwxMiBAQCBzbWIyX3NldF9lYShjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBz
dHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCW1lbXNldCgmY2xvc2VfaW92LCAwLCBzaXplb2YoY2xv
c2VfaW92KSk7CiAJcnFzdFsyXS5ycV9pb3YgPSBjbG9zZV9pb3Y7CiAJcnFzdFsyXS5ycV9udmVj
ID0gMTsKLQlyYyA9IFNNQjJfY2xvc2VfaW5pdCh0Y29uLCAmcnFzdFsyXSwgQ09NUE9VTkRfRklE
LCBDT01QT1VORF9GSUQsIGZhbHNlKTsKKwlyYyA9IFNNQjJfY2xvc2VfaW5pdCh0Y29uLCBzZXJ2
ZXIsCisJCQkgICAgICZycXN0WzJdLCBDT01QT1VORF9GSUQsIENPTVBPVU5EX0ZJRCwgZmFsc2Up
OwogCXNtYjJfc2V0X3JlbGF0ZWQoJnJxc3RbMl0pOwogCi0JcmMgPSBjb21wb3VuZF9zZW5kX3Jl
Y3YoeGlkLCBzZXMsIGZsYWdzLCAzLCBycXN0LAorCXJjID0gY29tcG91bmRfc2VuZF9yZWN2KHhp
ZCwgc2VzLCBzZXJ2ZXIsCisJCQkJZmxhZ3MsIDMsIHJxc3QsCiAJCQkJcmVzcF9idWZ0eXBlLCBy
c3BfaW92KTsKIAkvKiBubyBuZWVkIHRvIGJ1bXAgbnVtX3JlbW90ZV9vcGVucyBiZWNhdXNlIGhh
bmRsZSBpbW1lZGlhdGVseSBjbG9zZWQgKi8KIApAQCAtMTQ3Myw2ICsxNDgxLDcgQEAgc21iMl9p
b2N0bF9xdWVyeV9pbmZvKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsCiAJc3RydWN0IHNtYl9ycXN0
ICpycXN0OwogCXN0cnVjdCBrdmVjICpyc3BfaW92OwogCXN0cnVjdCBjaWZzX3NlcyAqc2VzID0g
dGNvbi0+c2VzOworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciA9IGNpZnNfcGlja19j
aGFubmVsKHNlcyk7CiAJY2hhciBfX3VzZXIgKmFyZyA9IChjaGFyIF9fdXNlciAqKXA7CiAJc3Ry
dWN0IHNtYl9xdWVyeV9pbmZvIHFpOwogCXN0cnVjdCBzbWJfcXVlcnlfaW5mbyBfX3VzZXIgKnBx
aTsKQEAgLTE1MDUsNyArMTUxNCw3IEBAIHNtYjJfaW9jdGxfcXVlcnlfaW5mbyhjb25zdCB1bnNp
Z25lZCBpbnQgeGlkLAogCQlyZXR1cm4gLUVJTlZBTDsKIAl9CiAKLQlpZiAoIXNlcyB8fCAhKHNl
cy0+c2VydmVyKSkgeworCWlmICghc2VzIHx8ICFzZXJ2ZXIpIHsKIAkJa2ZyZWUodmFycyk7CiAJ
CXJldHVybiAtRUlPOwogCX0KQEAgLTE1NTIsNyArMTU2MSw4IEBAIHNtYjJfaW9jdGxfcXVlcnlf
aW5mbyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLAogCQlvcGFybXMuZGVzaXJlZF9hY2Nlc3MgPSBG
SUxFX1JFQURfQVRUUklCVVRFUyB8IFJFQURfQ09OVFJPTDsKIAl9CiAKLQlyYyA9IFNNQjJfb3Bl
bl9pbml0KHRjb24sICZycXN0WzBdLCAmb3Bsb2NrLCAmb3Bhcm1zLCBwYXRoKTsKKwlyYyA9IFNN
QjJfb3Blbl9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAgICAmcnFzdFswXSwgJm9wbG9jaywgJm9w
YXJtcywgcGF0aCk7CiAJaWYgKHJjKQogCQlnb3RvIGlxaW5mX2V4aXQ7CiAJc21iMl9zZXRfbmV4
dF9jb21tYW5kKHRjb24sICZycXN0WzBdKTsKQEAgLTE1NjYsNyArMTU3Niw4IEBAIHNtYjJfaW9j
dGxfcXVlcnlfaW5mbyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLAogCQkJcnFzdFsxXS5ycV9pb3Yg
PSAmdmFycy0+aW9faW92WzBdOwogCQkJcnFzdFsxXS5ycV9udmVjID0gU01CMl9JT0NUTF9JT1Zf
U0laRTsKIAotCQkJcmMgPSBTTUIyX2lvY3RsX2luaXQodGNvbiwgJnJxc3RbMV0sCisJCQlyYyA9
IFNNQjJfaW9jdGxfaW5pdCh0Y29uLCBzZXJ2ZXIsCisJCQkJCSAgICAgJnJxc3RbMV0sCiAJCQkJ
CSAgICAgQ09NUE9VTkRfRklELCBDT01QT1VORF9GSUQsCiAJCQkJCSAgICAgcWkuaW5mb190eXBl
LCB0cnVlLCBidWZmZXIsCiAJCQkJCSAgICAgcWkub3V0cHV0X2J1ZmZlcl9sZW5ndGgsCkBAIC0x
NTg1LDcgKzE1OTYsOCBAQCBzbWIyX2lvY3RsX3F1ZXJ5X2luZm8oY29uc3QgdW5zaWduZWQgaW50
IHhpZCwKIAkJCXNpemVbMF0gPSA4OwogCQkJZGF0YVswXSA9IGJ1ZmZlcjsKIAotCQkJcmMgPSBT
TUIyX3NldF9pbmZvX2luaXQodGNvbiwgJnJxc3RbMV0sCisJCQlyYyA9IFNNQjJfc2V0X2luZm9f
aW5pdCh0Y29uLCBzZXJ2ZXIsCisJCQkJCSZycXN0WzFdLAogCQkJCQlDT01QT1VORF9GSUQsIENP
TVBPVU5EX0ZJRCwKIAkJCQkJY3VycmVudC0+dGdpZCwKIAkJCQkJRklMRV9FTkRfT0ZfRklMRV9J
TkZPUk1BVElPTiwKQEAgLTE1OTUsNyArMTYwNyw4IEBAIHNtYjJfaW9jdGxfcXVlcnlfaW5mbyhj
b25zdCB1bnNpZ25lZCBpbnQgeGlkLAogCQlycXN0WzFdLnJxX2lvdiA9ICZ2YXJzLT5xaV9pb3Zb
MF07CiAJCXJxc3RbMV0ucnFfbnZlYyA9IDE7CiAKLQkJcmMgPSBTTUIyX3F1ZXJ5X2luZm9faW5p
dCh0Y29uLCAmcnFzdFsxXSwgQ09NUE9VTkRfRklELAorCQlyYyA9IFNNQjJfcXVlcnlfaW5mb19p
bml0KHRjb24sIHNlcnZlciwKKwkJCQkgICZycXN0WzFdLCBDT01QT1VORF9GSUQsCiAJCQkJICBD
T01QT1VORF9GSUQsIHFpLmZpbGVfaW5mb19jbGFzcywKIAkJCQkgIHFpLmluZm9fdHlwZSwgcWku
YWRkaXRpb25hbF9pbmZvcm1hdGlvbiwKIAkJCQkgIHFpLmlucHV0X2J1ZmZlcl9sZW5ndGgsCkBA
IC0xNjE1LDEyICsxNjI4LDE0IEBAIHNtYjJfaW9jdGxfcXVlcnlfaW5mbyhjb25zdCB1bnNpZ25l
ZCBpbnQgeGlkLAogCXJxc3RbMl0ucnFfaW92ID0gJnZhcnMtPmNsb3NlX2lvdlswXTsKIAlycXN0
WzJdLnJxX252ZWMgPSAxOwogCi0JcmMgPSBTTUIyX2Nsb3NlX2luaXQodGNvbiwgJnJxc3RbMl0s
IENPTVBPVU5EX0ZJRCwgQ09NUE9VTkRfRklELCBmYWxzZSk7CisJcmMgPSBTTUIyX2Nsb3NlX2lu
aXQodGNvbiwgc2VydmVyLAorCQkJICAgICAmcnFzdFsyXSwgQ09NUE9VTkRfRklELCBDT01QT1VO
RF9GSUQsIGZhbHNlKTsKIAlpZiAocmMpCiAJCWdvdG8gaXFpbmZfZXhpdDsKIAlzbWIyX3NldF9y
ZWxhdGVkKCZycXN0WzJdKTsKIAotCXJjID0gY29tcG91bmRfc2VuZF9yZWN2KHhpZCwgc2VzLCBm
bGFncywgMywgcnFzdCwKKwlyYyA9IGNvbXBvdW5kX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVy
LAorCQkJCWZsYWdzLCAzLCBycXN0LAogCQkJCXJlc3BfYnVmdHlwZSwgcnNwX2lvdik7CiAJaWYg
KHJjKQogCQlnb3RvIGlxaW5mX2V4aXQ7CkBAIC0yMTcyLDYgKzIxODcsNyBAQCBzbWIyX3F1ZXJ5
X2Rpcl9maXJzdChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29u
LAogCXN0cnVjdCBjaWZzX29wZW5fcGFybXMgb3Bhcm1zOwogCXN0cnVjdCBzbWIyX3F1ZXJ5X2Rp
cmVjdG9yeV9yc3AgKnFkX3JzcCA9IE5VTEw7CiAJc3RydWN0IHNtYjJfY3JlYXRlX3JzcCAqb3Bf
cnNwID0gTlVMTDsKKwlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBjaWZzX3BpY2tf
Y2hhbm5lbCh0Y29uLT5zZXMpOwogCiAJdXRmMTZfcGF0aCA9IGNpZnNfY29udmVydF9wYXRoX3Rv
X3V0ZjE2KHBhdGgsIGNpZnNfc2IpOwogCWlmICghdXRmMTZfcGF0aCkKQEAgLTIxOTYsNyArMjIx
Miw4IEBAIHNtYjJfcXVlcnlfZGlyX2ZpcnN0KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVj
dCBjaWZzX3Rjb24gKnRjb24sCiAJb3Bhcm1zLmZpZCA9IGZpZDsKIAlvcGFybXMucmVjb25uZWN0
ID0gZmFsc2U7CiAKLQlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24sICZycXN0WzBdLCAmb3Bsb2Nr
LCAmb3Bhcm1zLCB1dGYxNl9wYXRoKTsKKwlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24sIHNlcnZl
ciwKKwkJCSAgICAmcnFzdFswXSwgJm9wbG9jaywgJm9wYXJtcywgdXRmMTZfcGF0aCk7CiAJaWYg
KHJjKQogCQlnb3RvIHFkZl9mcmVlOwogCXNtYjJfc2V0X25leHRfY29tbWFuZCh0Y29uLCAmcnFz
dFswXSk7CkBAIC0yMjA5LDcgKzIyMjYsOCBAQCBzbWIyX3F1ZXJ5X2Rpcl9maXJzdChjb25zdCB1
bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCXJxc3RbMV0ucnFfaW92
ID0gcWRfaW92OwogCXJxc3RbMV0ucnFfbnZlYyA9IFNNQjJfUVVFUllfRElSRUNUT1JZX0lPVl9T
SVpFOwogCi0JcmMgPSBTTUIyX3F1ZXJ5X2RpcmVjdG9yeV9pbml0KHhpZCwgdGNvbiwgJnJxc3Rb
MV0sCisJcmMgPSBTTUIyX3F1ZXJ5X2RpcmVjdG9yeV9pbml0KHhpZCwgdGNvbiwgc2VydmVyLAor
CQkJCSAgICAgICAmcnFzdFsxXSwKIAkJCQkgICAgICAgQ09NUE9VTkRfRklELCBDT01QT1VORF9G
SUQsCiAJCQkJICAgICAgIDAsIHNyY2hfaW5mLT5pbmZvX2xldmVsKTsKIAlpZiAocmMpCkBAIC0y
MjE3LDcgKzIyMzUsOCBAQCBzbWIyX3F1ZXJ5X2Rpcl9maXJzdChjb25zdCB1bnNpZ25lZCBpbnQg
eGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCiAJc21iMl9zZXRfcmVsYXRlZCgmcnFzdFsx
XSk7CiAKLQlyYyA9IGNvbXBvdW5kX3NlbmRfcmVjdih4aWQsIHRjb24tPnNlcywgZmxhZ3MsIDIs
IHJxc3QsCisJcmMgPSBjb21wb3VuZF9zZW5kX3JlY3YoeGlkLCB0Y29uLT5zZXMsIHNlcnZlciwK
KwkJCQlmbGFncywgMiwgcnFzdCwKIAkJCQlyZXNwX2J1ZnR5cGUsIHJzcF9pb3YpOwogCiAJLyog
SWYgdGhlIG9wZW4gZmFpbGVkIHRoZXJlIGlzIG5vdGhpbmcgdG8gZG8gKi8KQEAgLTI0MjIsNiAr
MjQ0MSw3IEBAIHNtYjJfcXVlcnlfaW5mb19jb21wb3VuZChjb25zdCB1bnNpZ25lZCBpbnQgeGlk
LCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCQkJIHN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNf
c2IpCiB7CiAJc3RydWN0IGNpZnNfc2VzICpzZXMgPSB0Y29uLT5zZXM7CisJc3RydWN0IFRDUF9T
ZXJ2ZXJfSW5mbyAqc2VydmVyID0gY2lmc19waWNrX2NoYW5uZWwoc2VzKTsKIAlpbnQgZmxhZ3Mg
PSAwOwogCXN0cnVjdCBzbWJfcnFzdCBycXN0WzNdOwogCWludCByZXNwX2J1ZnR5cGVbM107CkBA
IC0yNDUyLDcgKzI0NzIsOCBAQCBzbWIyX3F1ZXJ5X2luZm9fY29tcG91bmQoY29uc3QgdW5zaWdu
ZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAlvcGFybXMuZmlkID0gJmZpZDsK
IAlvcGFybXMucmVjb25uZWN0ID0gZmFsc2U7CiAKLQlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24s
ICZycXN0WzBdLCAmb3Bsb2NrLCAmb3Bhcm1zLCB1dGYxNl9wYXRoKTsKKwlyYyA9IFNNQjJfb3Bl
bl9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAgICAmcnFzdFswXSwgJm9wbG9jaywgJm9wYXJtcywg
dXRmMTZfcGF0aCk7CiAJaWYgKHJjKQogCQlnb3RvIHFpY19leGl0OwogCXNtYjJfc2V0X25leHRf
Y29tbWFuZCh0Y29uLCAmcnFzdFswXSk7CkBAIC0yNDYxLDcgKzI0ODIsOCBAQCBzbWIyX3F1ZXJ5
X2luZm9fY29tcG91bmQoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAq
dGNvbiwKIAlycXN0WzFdLnJxX2lvdiA9IHFpX2lvdjsKIAlycXN0WzFdLnJxX252ZWMgPSAxOwog
Ci0JcmMgPSBTTUIyX3F1ZXJ5X2luZm9faW5pdCh0Y29uLCAmcnFzdFsxXSwgQ09NUE9VTkRfRklE
LCBDT01QT1VORF9GSUQsCisJcmMgPSBTTUIyX3F1ZXJ5X2luZm9faW5pdCh0Y29uLCBzZXJ2ZXIs
CisJCQkJICAmcnFzdFsxXSwgQ09NUE9VTkRfRklELCBDT01QT1VORF9GSUQsCiAJCQkJICBjbGFz
cywgdHlwZSwgMCwKIAkJCQkgIG91dHB1dF9sZW4sIDAsCiAJCQkJICBOVUxMKTsKQEAgLTI0NzQs
MTIgKzI0OTYsMTQgQEAgc21iMl9xdWVyeV9pbmZvX2NvbXBvdW5kKGNvbnN0IHVuc2lnbmVkIGlu
dCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJcnFzdFsyXS5ycV9pb3YgPSBjbG9zZV9p
b3Y7CiAJcnFzdFsyXS5ycV9udmVjID0gMTsKIAotCXJjID0gU01CMl9jbG9zZV9pbml0KHRjb24s
ICZycXN0WzJdLCBDT01QT1VORF9GSUQsIENPTVBPVU5EX0ZJRCwgZmFsc2UpOworCXJjID0gU01C
Ml9jbG9zZV9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAgICAgJnJxc3RbMl0sIENPTVBPVU5EX0ZJ
RCwgQ09NUE9VTkRfRklELCBmYWxzZSk7CiAJaWYgKHJjKQogCQlnb3RvIHFpY19leGl0OwogCXNt
YjJfc2V0X3JlbGF0ZWQoJnJxc3RbMl0pOwogCi0JcmMgPSBjb21wb3VuZF9zZW5kX3JlY3YoeGlk
LCBzZXMsIGZsYWdzLCAzLCBycXN0LAorCXJjID0gY29tcG91bmRfc2VuZF9yZWN2KHhpZCwgc2Vz
LCBzZXJ2ZXIsCisJCQkJZmxhZ3MsIDMsIHJxc3QsCiAJCQkJcmVzcF9idWZ0eXBlLCByc3BfaW92
KTsKIAlpZiAocmMpIHsKIAkJZnJlZV9yc3BfYnVmKHJlc3BfYnVmdHlwZVsxXSwgcnNwX2lvdlsx
XS5pb3ZfYmFzZSk7CkBAIC0yODExLDYgKzI4MzUsNyBAQCBzbWIyX3F1ZXJ5X3N5bWxpbmsoY29u
c3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAlzdHJ1Y3Qga3Zl
YyBlcnJfaW92ID0ge05VTEwsIDB9OwogCXN0cnVjdCBzbWIyX2Vycl9yc3AgKmVycl9idWYgPSBO
VUxMOwogCXN0cnVjdCBzbWIyX3N5bWxpbmtfZXJyX3JzcCAqc3ltbGluazsKKwlzdHJ1Y3QgVENQ
X1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbCh0Y29uLT5zZXMpOwogCXVu
c2lnbmVkIGludCBzdWJfbGVuOwogCXVuc2lnbmVkIGludCBzdWJfb2Zmc2V0OwogCXVuc2lnbmVk
IGludCBwcmludF9sZW47CkBAIC0yODU2LDcgKzI4ODEsOCBAQCBzbWIyX3F1ZXJ5X3N5bWxpbmso
Y29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAlvcGFybXMu
ZmlkID0gJmZpZDsKIAlvcGFybXMucmVjb25uZWN0ID0gZmFsc2U7CiAKLQlyYyA9IFNNQjJfb3Bl
bl9pbml0KHRjb24sICZycXN0WzBdLCAmb3Bsb2NrLCAmb3Bhcm1zLCB1dGYxNl9wYXRoKTsKKwly
YyA9IFNNQjJfb3Blbl9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAgICAmcnFzdFswXSwgJm9wbG9j
aywgJm9wYXJtcywgdXRmMTZfcGF0aCk7CiAJaWYgKHJjKQogCQlnb3RvIHF1ZXJ0eV9leGl0Owog
CXNtYjJfc2V0X25leHRfY29tbWFuZCh0Y29uLCAmcnFzdFswXSk7CkBAIC0yODY3LDcgKzI4OTMs
OCBAQCBzbWIyX3F1ZXJ5X3N5bWxpbmsoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNp
ZnNfdGNvbiAqdGNvbiwKIAlycXN0WzFdLnJxX2lvdiA9IGlvX2lvdjsKIAlycXN0WzFdLnJxX252
ZWMgPSBTTUIyX0lPQ1RMX0lPVl9TSVpFOwogCi0JcmMgPSBTTUIyX2lvY3RsX2luaXQodGNvbiwg
JnJxc3RbMV0sIGZpZC5wZXJzaXN0ZW50X2ZpZCwKKwlyYyA9IFNNQjJfaW9jdGxfaW5pdCh0Y29u
LCBzZXJ2ZXIsCisJCQkgICAgICZycXN0WzFdLCBmaWQucGVyc2lzdGVudF9maWQsCiAJCQkgICAg
IGZpZC52b2xhdGlsZV9maWQsIEZTQ1RMX0dFVF9SRVBBUlNFX1BPSU5ULAogCQkJICAgICB0cnVl
IC8qIGlzX2ZjdGwgKi8sIE5VTEwsIDAsCiAJCQkgICAgIENJRlNNYXhCdWZTaXplIC0KQEAgLTI4
ODUsMTMgKzI5MTIsMTUgQEAgc21iMl9xdWVyeV9zeW1saW5rKGNvbnN0IHVuc2lnbmVkIGludCB4
aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJcnFzdFsyXS5ycV9pb3YgPSBjbG9zZV9pb3Y7
CiAJcnFzdFsyXS5ycV9udmVjID0gMTsKIAotCXJjID0gU01CMl9jbG9zZV9pbml0KHRjb24sICZy
cXN0WzJdLCBDT01QT1VORF9GSUQsIENPTVBPVU5EX0ZJRCwgZmFsc2UpOworCXJjID0gU01CMl9j
bG9zZV9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAgICAgJnJxc3RbMl0sIENPTVBPVU5EX0ZJRCwg
Q09NUE9VTkRfRklELCBmYWxzZSk7CiAJaWYgKHJjKQogCQlnb3RvIHF1ZXJ0eV9leGl0OwogCiAJ
c21iMl9zZXRfcmVsYXRlZCgmcnFzdFsyXSk7CiAKLQlyYyA9IGNvbXBvdW5kX3NlbmRfcmVjdih4
aWQsIHRjb24tPnNlcywgZmxhZ3MsIDMsIHJxc3QsCisJcmMgPSBjb21wb3VuZF9zZW5kX3JlY3Yo
eGlkLCB0Y29uLT5zZXMsIHNlcnZlciwKKwkJCQlmbGFncywgMywgcnFzdCwKIAkJCQlyZXNwX2J1
ZnR5cGUsIHJzcF9pb3YpOwogCiAJY3JlYXRlX3JzcCA9IHJzcF9pb3ZbMF0uaW92X2Jhc2U7CmRp
ZmYgLS1naXQgYS9mcy9jaWZzL3NtYjJwZHUuYyBiL2ZzL2NpZnMvc21iMnBkdS5jCmluZGV4IDA2
NDYzZjM4NmE2MC4uMDg3MjhjMGRjZjhiIDEwMDY0NAotLS0gYS9mcy9jaWZzL3NtYjJwZHUuYwor
KysgYi9mcy9jaWZzL3NtYjJwZHUuYwpAQCAtOTgsMTQgKzk4LDEzIEBAIGludCBzbWIzX2VuY3J5
cHRpb25fcmVxdWlyZWQoY29uc3Qgc3RydWN0IGNpZnNfdGNvbiAqdGNvbikKIAogc3RhdGljIHZv
aWQKIHNtYjJfaGRyX2Fzc2VtYmxlKHN0cnVjdCBzbWIyX3N5bmNfaGRyICpzaGRyLCBfX2xlMTYg
c21iMl9jbWQsCi0JCSAgY29uc3Qgc3RydWN0IGNpZnNfdGNvbiAqdGNvbikKKwkJICBjb25zdCBz
dHJ1Y3QgY2lmc190Y29uICp0Y29uLAorCQkgIHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZl
cikKIHsKIAlzaGRyLT5Qcm90b2NvbElkID0gU01CMl9QUk9UT19OVU1CRVI7CiAJc2hkci0+U3Ry
dWN0dXJlU2l6ZSA9IGNwdV90b19sZTE2KDY0KTsKIAlzaGRyLT5Db21tYW5kID0gc21iMl9jbWQ7
Ci0JaWYgKHRjb24gJiYgdGNvbi0+c2VzICYmIHRjb24tPnNlcy0+c2VydmVyKSB7Ci0JCXN0cnVj
dCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciA9IHRjb24tPnNlcy0+c2VydmVyOwotCisJaWYgKHNl
cnZlcikgewogCQlzcGluX2xvY2soJnNlcnZlci0+cmVxX2xvY2spOwogCQkvKiBSZXF1ZXN0IHVw
IHRvIDEwIGNyZWRpdHMgYnV0IGRvbid0IGdvIG92ZXIgdGhlIGxpbWl0LiAqLwogCQlpZiAoc2Vy
dmVyLT5jcmVkaXRzID49IHNlcnZlci0+bWF4X2NyZWRpdHMpCkBAIC0xMjUsOCArMTI0LDcgQEAg
c21iMl9oZHJfYXNzZW1ibGUoc3RydWN0IHNtYjJfc3luY19oZHIgKnNoZHIsIF9fbGUxNiBzbWIy
X2NtZCwKIAogCS8qIEdMT0JBTF9DQVBfTEFSR0VfTVRVIHdpbGwgb25seSBiZSBzZXQgaWYgZGlh
bGVjdCA+IFNNQjIuMDIgKi8KIAkvKiBTZWUgc2VjdGlvbnMgMi4yLjQgYW5kIDMuMi40LjEuNSBv
ZiBNUy1TTUIyICovCi0JaWYgKCh0Y29uLT5zZXMpICYmICh0Y29uLT5zZXMtPnNlcnZlcikgJiYK
LQkgICAgKHRjb24tPnNlcy0+c2VydmVyLT5jYXBhYmlsaXRpZXMgJiBTTUIyX0dMT0JBTF9DQVBf
TEFSR0VfTVRVKSkKKwlpZiAoc2VydmVyICYmIChzZXJ2ZXItPmNhcGFiaWxpdGllcyAmIFNNQjJf
R0xPQkFMX0NBUF9MQVJHRV9NVFUpKQogCQlzaGRyLT5DcmVkaXRDaGFyZ2UgPSBjcHVfdG9fbGUx
NigxKTsKIAkvKiBlbHNlIENyZWRpdENoYXJnZSBNQlogKi8KIApAQCAtMTQ4LDggKzE0Niw3IEBA
IHNtYjJfaGRyX2Fzc2VtYmxlKHN0cnVjdCBzbWIyX3N5bmNfaGRyICpzaGRyLCBfX2xlMTYgc21i
Ml9jbWQsCiAvKglpZiAodGNvbi0+c2hhcmVfZmxhZ3MgJiBTSEkxMDA1X0ZMQUdTX0RGUykKIAkJ
c2hkci0+RmxhZ3MgfD0gU01CMl9GTEFHU19ERlNfT1BFUkFUSU9OUzsgKi8KIAotCWlmICh0Y29u
LT5zZXMgJiYgdGNvbi0+c2VzLT5zZXJ2ZXIgJiYgdGNvbi0+c2VzLT5zZXJ2ZXItPnNpZ24gJiYK
LQkgICAgIXNtYjNfZW5jcnlwdGlvbl9yZXF1aXJlZCh0Y29uKSkKKwlpZiAoc2VydmVyICYmIHNl
cnZlci0+c2lnbiAmJiAhc21iM19lbmNyeXB0aW9uX3JlcXVpcmVkKHRjb24pKQogCQlzaGRyLT5G
bGFncyB8PSBTTUIyX0ZMQUdTX1NJR05FRDsKIG91dDoKIAlyZXR1cm47CkBAIC0yNjcsMTIgKzI2
NCwxMiBAQCBzdGF0aWMgaW5saW5lIGludCBfX3NtYjJfcmVjb25uZWN0KGNvbnN0IHN0cnVjdCBu
bHNfdGFibGUgKm5sc2MsCiAjZW5kaWYKIAogc3RhdGljIGludAotc21iMl9yZWNvbm5lY3QoX19s
ZTE2IHNtYjJfY29tbWFuZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbikKK3NtYjJfcmVjb25uZWN0
KF9fbGUxNiBzbWIyX2NvbW1hbmQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCisJICAgICAgIHN0
cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlcikKIHsKIAlpbnQgcmM7CiAJc3RydWN0IG5sc190
YWJsZSAqbmxzX2NvZGVwYWdlOwogCXN0cnVjdCBjaWZzX3NlcyAqc2VzOwotCXN0cnVjdCBUQ1Bf
U2VydmVyX0luZm8gKnNlcnZlcjsKIAlpbnQgcmV0cmllczsKIAogCS8qCkBAIC0zMDEsMTIgKzI5
OCwxMCBAQCBzbWIyX3JlY29ubmVjdChfX2xlMTYgc21iMl9jb21tYW5kLCBzdHJ1Y3QgY2lmc190
Y29uICp0Y29uKQogCQl9CiAJfQogCWlmICgoIXRjb24tPnNlcykgfHwgKHRjb24tPnNlcy0+c3Rh
dHVzID09IENpZnNFeGl0aW5nKSB8fAotCSAgICAoIXRjb24tPnNlcy0+c2VydmVyKSkKKwkgICAg
KCF0Y29uLT5zZXMtPnNlcnZlcikgfHwgIXNlcnZlcikKIAkJcmV0dXJuIC1FSU87CiAKIAlzZXMg
PSB0Y29uLT5zZXM7Ci0Jc2VydmVyID0gc2VzLT5zZXJ2ZXI7Ci0KIAlyZXRyaWVzID0gc2VydmVy
LT5ucl90YXJnZXRzOwogCiAJLyoKQEAgLTQzOSw3ICs0MzQsOSBAQCBzbWIyX3JlY29ubmVjdChf
X2xlMTYgc21iMl9jb21tYW5kLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uKQogfQogCiBzdGF0aWMg
dm9pZAotZmlsbF9zbWFsbF9idWYoX19sZTE2IHNtYjJfY29tbWFuZCwgc3RydWN0IGNpZnNfdGNv
biAqdGNvbiwgdm9pZCAqYnVmLAorZmlsbF9zbWFsbF9idWYoX19sZTE2IHNtYjJfY29tbWFuZCwg
c3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKKwkgICAgICAgc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAq
c2VydmVyLAorCSAgICAgICB2b2lkICpidWYsCiAJICAgICAgIHVuc2lnbmVkIGludCAqdG90YWxf
bGVuKQogewogCXN0cnVjdCBzbWIyX3N5bmNfcGR1ICpzcGR1ID0gKHN0cnVjdCBzbWIyX3N5bmNf
cGR1ICopYnVmOwpAQCAtNDUyLDcgKzQ0OSw3IEBAIGZpbGxfc21hbGxfYnVmKF9fbGUxNiBzbWIy
X2NvbW1hbmQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHZvaWQgKmJ1ZiwKIAkgKi8KIAltZW1z
ZXQoYnVmLCAwLCAyNTYpOwogCi0Jc21iMl9oZHJfYXNzZW1ibGUoJnNwZHUtPnN5bmNfaGRyLCBz
bWIyX2NvbW1hbmQsIHRjb24pOworCXNtYjJfaGRyX2Fzc2VtYmxlKCZzcGR1LT5zeW5jX2hkciwg
c21iMl9jb21tYW5kLCB0Y29uLCBzZXJ2ZXIpOwogCXNwZHUtPlN0cnVjdHVyZVNpemUyID0gY3B1
X3RvX2xlMTYocGFybXNpemUpOwogCiAJKnRvdGFsX2xlbiA9IHBhcm1zaXplICsgc2l6ZW9mKHN0
cnVjdCBzbWIyX3N5bmNfaGRyKTsKQEAgLTQ2NCw3ICs0NjEsOCBAQCBmaWxsX3NtYWxsX2J1Zihf
X2xlMTYgc21iMl9jb21tYW5kLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLCB2b2lkICpidWYsCiAg
KiBmdW5jdGlvbiBtdXN0IGhhdmUgZmlsbGVkIGluIHJlcXVlc3RfYnVmIHBvaW50ZXIuCiAgKi8K
IHN0YXRpYyBpbnQgX19zbWIyX3BsYWluX3JlcV9pbml0KF9fbGUxNiBzbWIyX2NvbW1hbmQsIHN0
cnVjdCBjaWZzX3Rjb24gKnRjb24sCi0JCQkJICB2b2lkICoqcmVxdWVzdF9idWYsIHVuc2lnbmVk
IGludCAqdG90YWxfbGVuKQorCQkJCSBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCisJ
CQkJIHZvaWQgKipyZXF1ZXN0X2J1ZiwgdW5zaWduZWQgaW50ICp0b3RhbF9sZW4pCiB7CiAJLyog
QkIgZXZlbnR1YWxseSBzd2l0Y2ggdGhpcyB0byBTTUIyIHNwZWNpZmljIHNtYWxsIGJ1ZiBzaXpl
ICovCiAJaWYgKHNtYjJfY29tbWFuZCA9PSBTTUIyX1NFVF9JTkZPKQpAQCAtNDc2LDcgKzQ3NCw3
IEBAIHN0YXRpYyBpbnQgX19zbWIyX3BsYWluX3JlcV9pbml0KF9fbGUxNiBzbWIyX2NvbW1hbmQs
IHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJCXJldHVybiAtRU5PTUVNOwogCX0KIAotCWZpbGxf
c21hbGxfYnVmKHNtYjJfY29tbWFuZCwgdGNvbiwKKwlmaWxsX3NtYWxsX2J1ZihzbWIyX2NvbW1h
bmQsIHRjb24sIHNlcnZlciwKIAkJICAgICAgIChzdHJ1Y3Qgc21iMl9zeW5jX2hkciAqKSgqcmVx
dWVzdF9idWYpLAogCQkgICAgICAgdG90YWxfbGVuKTsKIApAQCAtNDkwLDI3ICs0ODgsMzAgQEAg
c3RhdGljIGludCBfX3NtYjJfcGxhaW5fcmVxX2luaXQoX19sZTE2IHNtYjJfY29tbWFuZCwgc3Ry
dWN0IGNpZnNfdGNvbiAqdGNvbiwKIH0KIAogc3RhdGljIGludCBzbWIyX3BsYWluX3JlcV9pbml0
KF9fbGUxNiBzbWIyX2NvbW1hbmQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCisJCQkgICAgICAg
c3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAogCQkJICAgICAgIHZvaWQgKipyZXF1ZXN0
X2J1ZiwgdW5zaWduZWQgaW50ICp0b3RhbF9sZW4pCiB7CiAJaW50IHJjOwogCi0JcmMgPSBzbWIy
X3JlY29ubmVjdChzbWIyX2NvbW1hbmQsIHRjb24pOworCXJjID0gc21iMl9yZWNvbm5lY3Qoc21i
Ml9jb21tYW5kLCB0Y29uLCBzZXJ2ZXIpOwogCWlmIChyYykKIAkJcmV0dXJuIHJjOwogCi0JcmV0
dXJuIF9fc21iMl9wbGFpbl9yZXFfaW5pdChzbWIyX2NvbW1hbmQsIHRjb24sIHJlcXVlc3RfYnVm
LAorCXJldHVybiBfX3NtYjJfcGxhaW5fcmVxX2luaXQoc21iMl9jb21tYW5kLCB0Y29uLCBzZXJ2
ZXIsIHJlcXVlc3RfYnVmLAogCQkJCSAgICAgdG90YWxfbGVuKTsKIH0KIAogc3RhdGljIGludCBz
bWIyX2lvY3RsX3JlcV9pbml0KHUzMiBvcGNvZGUsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCisJ
CQkgICAgICAgc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAogCQkJICAgICAgIHZvaWQg
KipyZXF1ZXN0X2J1ZiwgdW5zaWduZWQgaW50ICp0b3RhbF9sZW4pCiB7CiAJLyogU2tpcCByZWNv
bm5lY3Qgb25seSBmb3IgRlNDVExfVkFMSURBVEVfTkVHT1RJQVRFX0lORk8gSU9DVExzICovCiAJ
aWYgKG9wY29kZSA9PSBGU0NUTF9WQUxJREFURV9ORUdPVElBVEVfSU5GTykgewotCQlyZXR1cm4g
X19zbWIyX3BsYWluX3JlcV9pbml0KFNNQjJfSU9DVEwsIHRjb24sIHJlcXVlc3RfYnVmLAotCQkJ
CQkgICAgIHRvdGFsX2xlbik7CisJCXJldHVybiBfX3NtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9J
T0NUTCwgdGNvbiwgc2VydmVyLAorCQkJCQkgICAgIHJlcXVlc3RfYnVmLCB0b3RhbF9sZW4pOwog
CX0KLQlyZXR1cm4gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX0lPQ1RMLCB0Y29uLCByZXF1ZXN0
X2J1ZiwgdG90YWxfbGVuKTsKKwlyZXR1cm4gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX0lPQ1RM
LCB0Y29uLCBzZXJ2ZXIsCisJCQkJICAgcmVxdWVzdF9idWYsIHRvdGFsX2xlbik7CiB9CiAKIC8q
IEZvciBleHBsYW5hdGlvbiBvZiBuZWdvdGlhdGUgY29udGV4dHMgc2VlIE1TLVNNQjIgc2VjdGlv
biAyLjIuMy4xICovCkBAIC04NTgsNyArODU5LDggQEAgU01CMl9uZWdvdGlhdGUoY29uc3QgdW5z
aWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfc2VzICpzZXMpCiAJCXJldHVybiAtRUlPOwogCX0K
IAotCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX05FR09USUFURSwgTlVMTCwgKHZvaWQg
KiopICZyZXEsICZ0b3RhbF9sZW4pOworCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX05F
R09USUFURSwgTlVMTCwgc2VydmVyLAorCQkJCSAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7
CiAJaWYgKHJjKQogCQlyZXR1cm4gcmM7CiAKQEAgLTkxNiw3ICs5MTgsOCBAQCBTTUIyX25lZ290
aWF0ZShjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19zZXMgKnNlcykKIAlycXN0
LnJxX2lvdiA9IGlvdjsKIAlycXN0LnJxX252ZWMgPSAxOwogCi0JcmMgPSBjaWZzX3NlbmRfcmVj
dih4aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1ZnR5cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMg
PSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9i
dWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOwogCWNpZnNfc21hbGxfYnVmX3JlbGVhc2UocmVxKTsK
IAlyc3AgPSAoc3RydWN0IHNtYjJfbmVnb3RpYXRlX3JzcCAqKXJzcF9pb3YuaW92X2Jhc2U7CiAJ
LyoKQEAgLTEyMjcsOCArMTIzMCw5IEBAIFNNQjJfc2Vzc19hbGxvY19idWZmZXIoc3RydWN0IFNN
QjJfc2Vzc19kYXRhICpzZXNzX2RhdGEpCiAJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVy
ID0gY2lmc19zZXNfc2VydmVyKHNlcyk7CiAJdW5zaWduZWQgaW50IHRvdGFsX2xlbjsKIAotCXJj
ID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1NFU1NJT05fU0VUVVAsIE5VTEwsICh2b2lkICoq
KSAmcmVxLAotCQkJICAgICAmdG90YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQo
U01CMl9TRVNTSU9OX1NFVFVQLCBOVUxMLCBzZXJ2ZXIsCisJCQkJICh2b2lkICoqKSAmcmVxLAor
CQkJCSAmdG90YWxfbGVuKTsKIAlpZiAocmMpCiAJCXJldHVybiByYzsKIApAQCAtMTMwNSw2ICsx
MzA5LDcgQEAgU01CMl9zZXNzX3NlbmRyZWNlaXZlKHN0cnVjdCBTTUIyX3Nlc3NfZGF0YSAqc2Vz
c19kYXRhKQogCiAJLyogQkIgYWRkIGNvZGUgdG8gYnVpbGQgb3MgYW5kIGxtIGZpZWxkcyAqLwog
CXJjID0gY2lmc19zZW5kX3JlY3Yoc2Vzc19kYXRhLT54aWQsIHNlc3NfZGF0YS0+c2VzLAorCQkJ
ICAgIGNpZnNfc2VzX3NlcnZlcihzZXNzX2RhdGEtPnNlcyksCiAJCQkgICAgJnJxc3QsCiAJCQkg
ICAgJnNlc3NfZGF0YS0+YnVmMF90eXBlLAogCQkJICAgIENJRlNfTE9HX0VSUk9SIHwgQ0lGU19O
RUdfT1AsICZyc3BfaW92KTsKQEAgLTE2ODksNyArMTY5NCw4IEBAIFNNQjJfbG9nb2ZmKGNvbnN0
IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3NlcyAqc2VzKQogCWlmIChzZXMtPm5lZWRf
cmVjb25uZWN0KQogCQlnb3RvIHNtYjJfc2Vzc2lvbl9hbHJlYWR5X2RlYWQ7CiAKLQlyYyA9IHNt
YjJfcGxhaW5fcmVxX2luaXQoU01CMl9MT0dPRkYsIE5VTEwsICh2b2lkICoqKSAmcmVxLCAmdG90
YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9MT0dPRkYsIE5VTEwsIHNl
cy0+c2VydmVyLAorCQkJCSAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7CiAJaWYgKHJjKQog
CQlyZXR1cm4gcmM7CiAKQEAgLTE3MTAsNyArMTcxNiw4IEBAIFNNQjJfbG9nb2ZmKGNvbnN0IHVu
c2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3NlcyAqc2VzKQogCXJxc3QucnFfaW92ID0gaW92
OwogCXJxc3QucnFfbnZlYyA9IDE7CiAKLQlyYyA9IGNpZnNfc2VuZF9yZWN2KHhpZCwgc2VzLCAm
cnFzdCwgJnJlc3BfYnVmX3R5cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMgPSBjaWZzX3NlbmRf
cmVjdih4aWQsIHNlcywgc2VzLT5zZXJ2ZXIsCisJCQkgICAgJnJxc3QsICZyZXNwX2J1Zl90eXBl
LCBmbGFncywgJnJzcF9pb3YpOwogCWNpZnNfc21hbGxfYnVmX3JlbGVhc2UocmVxKTsKIAkvKgog
CSAqIE5vIHRjb24gc28gY2FuJ3QgZG8KQEAgLTE3NTEsNyArMTc1OCwxMCBAQCBTTUIyX3Rjb24o
Y29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfc2VzICpzZXMsIGNvbnN0IGNoYXIg
KnRyZWUsCiAJX19sZTE2ICp1bmNfcGF0aCA9IE5VTEw7CiAJaW50IGZsYWdzID0gMDsKIAl1bnNp
Z25lZCBpbnQgdG90YWxfbGVuOwotCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciA9IHNl
cy0+c2VydmVyOworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlcjsKKworCS8qIGFsd2F5
cyB1c2UgbWFzdGVyIGNoYW5uZWwgKi8KKwlzZXJ2ZXIgPSBzZXMtPnNlcnZlcjsKIAogCWNpZnNf
ZGJnKEZZSSwgIlRDT05cbiIpOwogCkBAIC0xNzcyLDggKzE3ODIsOCBAQCBTTUIyX3Rjb24oY29u
c3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfc2VzICpzZXMsIGNvbnN0IGNoYXIgKnRy
ZWUsCiAJLyogU01CMiBUUkVFX0NPTk5FQ1QgcmVxdWVzdCBtdXN0IGJlIGNhbGxlZCB3aXRoIFRy
ZWVJZCA9PSAwICovCiAJdGNvbi0+dGlkID0gMDsKIAlhdG9taWNfc2V0KCZ0Y29uLT5udW1fcmVt
b3RlX29wZW5zLCAwKTsKLQlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9UUkVFX0NPTk5F
Q1QsIHRjb24sICh2b2lkICoqKSAmcmVxLAotCQkJICAgICAmdG90YWxfbGVuKTsKKwlyYyA9IHNt
YjJfcGxhaW5fcmVxX2luaXQoU01CMl9UUkVFX0NPTk5FQ1QsIHRjb24sIHNlcnZlciwKKwkJCQkg
KHZvaWQgKiopICZyZXEsICZ0b3RhbF9sZW4pOwogCWlmIChyYykgewogCQlrZnJlZSh1bmNfcGF0
aCk7CiAJCXJldHVybiByYzsKQEAgLTE4MTIsNyArMTgyMiw4IEBAIFNNQjJfdGNvbihjb25zdCB1
bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19zZXMgKnNlcywgY29uc3QgY2hhciAqdHJlZSwK
IAkvKiBOZWVkIDY0IGZvciBtYXggc2l6ZSB3cml0ZSBzbyBhc2sgZm9yIG1vcmUgaW4gY2FzZSBu
b3QgdGhlcmUgeWV0ICovCiAJcmVxLT5zeW5jX2hkci5DcmVkaXRSZXF1ZXN0ID0gY3B1X3RvX2xl
MTYoNjQpOwogCi0JcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1
ZnR5cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywg
c2VydmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOwog
CWNpZnNfc21hbGxfYnVmX3JlbGVhc2UocmVxKTsKIAlyc3AgPSAoc3RydWN0IHNtYjJfdHJlZV9j
b25uZWN0X3JzcCAqKXJzcF9pb3YuaW92X2Jhc2U7CiAJdHJhY2Vfc21iM190Y29uKHhpZCwgdGNv
bi0+dGlkLCBzZXMtPlN1aWQsIHRyZWUsIHJjKTsKQEAgLTE4OTcsOCArMTkwOCw5IEBAIFNNQjJf
dGRpcyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uKQogCiAJ
Y2xvc2Vfc2hyb290X2xlYXNlKCZ0Y29uLT5jcmZpZCk7CiAKLQlyYyA9IHNtYjJfcGxhaW5fcmVx
X2luaXQoU01CMl9UUkVFX0RJU0NPTk5FQ1QsIHRjb24sICh2b2lkICoqKSAmcmVxLAotCQkJICAg
ICAmdG90YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9UUkVFX0RJU0NP
Tk5FQ1QsIHRjb24sIHNlcy0+c2VydmVyLAorCQkJCSAodm9pZCAqKikgJnJlcSwKKwkJCQkgJnRv
dGFsX2xlbik7CiAJaWYgKHJjKQogCQlyZXR1cm4gcmM7CiAKQEAgLTE5MTQsNyArMTkyNiw4IEBA
IFNNQjJfdGRpcyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29u
KQogCXJxc3QucnFfaW92ID0gaW92OwogCXJxc3QucnFfbnZlYyA9IDE7CiAKLQlyYyA9IGNpZnNf
c2VuZF9yZWN2KHhpZCwgc2VzLCAmcnFzdCwgJnJlc3BfYnVmX3R5cGUsIGZsYWdzLCAmcnNwX2lv
dik7CisJcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2VzLT5zZXJ2ZXIsCisJCQkgICAg
JnJxc3QsICZyZXNwX2J1Zl90eXBlLCBmbGFncywgJnJzcF9pb3YpOwogCWNpZnNfc21hbGxfYnVm
X3JlbGVhc2UocmVxKTsKIAlpZiAocmMpCiAJCWNpZnNfc3RhdHNfZmFpbF9pbmModGNvbiwgU01C
Ml9UUkVFX0RJU0NPTk5FQ1RfSEUpOwpAQCAtMjQ2OCw2ICsyNDgxLDcgQEAgaW50IHNtYjMxMV9w
b3NpeF9ta2Rpcihjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgaW5vZGUgKmlub2RlLAog
CWludCBmbGFncyA9IDA7CiAJdW5zaWduZWQgaW50IHRvdGFsX2xlbjsKIAlfX2xlMTYgKnV0ZjE2
X3BhdGggPSBOVUxMOworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciA9IGNpZnNfcGlj
a19jaGFubmVsKHNlcyk7CiAKIAljaWZzX2RiZyhGWUksICJta2RpclxuIik7CiAKQEAgLTI0NzYs
MTMgKzI0OTAsMTQgQEAgaW50IHNtYjMxMV9wb3NpeF9ta2Rpcihjb25zdCB1bnNpZ25lZCBpbnQg
eGlkLCBzdHJ1Y3QgaW5vZGUgKmlub2RlLAogCWlmICghdXRmMTZfcGF0aCkKIAkJcmV0dXJuIC1F
Tk9NRU07CiAKLQlpZiAoIXNlcyB8fCAhKHNlcy0+c2VydmVyKSkgeworCWlmICghc2VzIHx8ICFz
ZXJ2ZXIpIHsKIAkJcmMgPSAtRUlPOwogCQlnb3RvIGVycl9mcmVlX3BhdGg7CiAJfQogCiAJLyog
cmVzb3VyY2UgIzI6IHJlcXVlc3QgKi8KLQlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9D
UkVBVEUsIHRjb24sICh2b2lkICoqKSAmcmVxLCAmdG90YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxh
aW5fcmVxX2luaXQoU01CMl9DUkVBVEUsIHRjb24sIHNlcnZlciwKKwkJCQkgKHZvaWQgKiopICZy
ZXEsICZ0b3RhbF9sZW4pOwogCWlmIChyYykKIAkJZ290byBlcnJfZnJlZV9wYXRoOwogCkBAIC0y
NTY4LDcgKzI1ODMsOCBAQCBpbnQgc21iMzExX3Bvc2l4X21rZGlyKGNvbnN0IHVuc2lnbmVkIGlu
dCB4aWQsIHN0cnVjdCBpbm9kZSAqaW5vZGUsCiAJdHJhY2Vfc21iM19wb3NpeF9ta2Rpcl9lbnRl
cih4aWQsIHRjb24tPnRpZCwgc2VzLT5TdWlkLCBDUkVBVEVfTk9UX0ZJTEUsCiAJCQkJICAgIEZJ
TEVfV1JJVEVfQVRUUklCVVRFUyk7CiAJLyogcmVzb3VyY2UgIzQ6IHJlc3BvbnNlIGJ1ZmZlciAq
LwotCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsICZycXN0LCAmcmVzcF9idWZ0eXBlLCBm
bGFncywgJnJzcF9pb3YpOworCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsIHNlcnZlciwK
KwkJCSAgICAmcnFzdCwgJnJlc3BfYnVmdHlwZSwgZmxhZ3MsICZyc3BfaW92KTsKIAlpZiAocmMp
IHsKIAkJY2lmc19zdGF0c19mYWlsX2luYyh0Y29uLCBTTUIyX0NSRUFURV9IRSk7CiAJCXRyYWNl
X3NtYjNfcG9zaXhfbWtkaXJfZXJyKHhpZCwgdGNvbi0+dGlkLCBzZXMtPlN1aWQsCkBAIC0yNTk3
LDEwICsyNjEzLDEwIEBAIGludCBzbWIzMTFfcG9zaXhfbWtkaXIoY29uc3QgdW5zaWduZWQgaW50
IHhpZCwgc3RydWN0IGlub2RlICppbm9kZSwKIH0KIAogaW50Ci1TTUIyX29wZW5faW5pdChzdHJ1
Y3QgY2lmc190Y29uICp0Y29uLCBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsIF9fdTggKm9wbG9jaywK
K1NNQjJfb3Blbl9pbml0KHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHN0cnVjdCBUQ1BfU2VydmVy
X0luZm8gKnNlcnZlciwKKwkgICAgICAgc3RydWN0IHNtYl9ycXN0ICpycXN0LCBfX3U4ICpvcGxv
Y2ssCiAJICAgICAgIHN0cnVjdCBjaWZzX29wZW5fcGFybXMgKm9wYXJtcywgX19sZTE2ICpwYXRo
KQogewotCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciA9IHRjb24tPnNlcy0+c2VydmVy
OwogCXN0cnVjdCBzbWIyX2NyZWF0ZV9yZXEgKnJlcTsKIAl1bnNpZ25lZCBpbnQgbl9pb3YgPSAy
OwogCV9fdTMyIGZpbGVfYXR0cmlidXRlcyA9IDA7CkBAIC0yNjExLDcgKzI2MjcsOCBAQCBTTUIy
X29wZW5faW5pdChzdHJ1Y3QgY2lmc190Y29uICp0Y29uLCBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3Qs
IF9fdTggKm9wbG9jaywKIAlfX2xlMTYgKmNvcHlfcGF0aDsKIAlpbnQgcmM7CiAKLQlyYyA9IHNt
YjJfcGxhaW5fcmVxX2luaXQoU01CMl9DUkVBVEUsIHRjb24sICh2b2lkICoqKSAmcmVxLCAmdG90
YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9DUkVBVEUsIHRjb24sIHNl
cnZlciwKKwkJCQkgKHZvaWQgKiopICZyZXEsICZ0b3RhbF9sZW4pOwogCWlmIChyYykKIAkJcmV0
dXJuIHJjOwogCkBAIC0yNzgzLDkgKzI4MDAsOSBAQCBTTUIyX29wZW4oY29uc3QgdW5zaWduZWQg
aW50IHhpZCwgc3RydWN0IGNpZnNfb3Blbl9wYXJtcyAqb3Bhcm1zLCBfX2xlMTYgKnBhdGgsCiB7
CiAJc3RydWN0IHNtYl9ycXN0IHJxc3Q7CiAJc3RydWN0IHNtYjJfY3JlYXRlX3JzcCAqcnNwID0g
TlVMTDsKLQlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXI7CiAJc3RydWN0IGNpZnNfdGNv
biAqdGNvbiA9IG9wYXJtcy0+dGNvbjsKIAlzdHJ1Y3QgY2lmc19zZXMgKnNlcyA9IHRjb24tPnNl
czsKKwlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbChz
ZXMpOwogCXN0cnVjdCBrdmVjIGlvdltTTUIyX0NSRUFURV9JT1ZfU0laRV07CiAJc3RydWN0IGt2
ZWMgcnNwX2lvdiA9IHtOVUxMLCAwfTsKIAlpbnQgcmVzcF9idWZ0eXBlID0gQ0lGU19OT19CVUZG
RVI7CkBAIC0yNzkzLDkgKzI4MTAsNyBAQCBTTUIyX29wZW4oY29uc3QgdW5zaWduZWQgaW50IHhp
ZCwgc3RydWN0IGNpZnNfb3Blbl9wYXJtcyAqb3Bhcm1zLCBfX2xlMTYgKnBhdGgsCiAJaW50IGZs
YWdzID0gMDsKIAogCWNpZnNfZGJnKEZZSSwgImNyZWF0ZS9vcGVuXG4iKTsKLQlpZiAoc2VzICYm
IChzZXMtPnNlcnZlcikpCi0JCXNlcnZlciA9IHNlcy0+c2VydmVyOwotCWVsc2UKKwlpZiAoIXNl
cyB8fCAhc2VydmVyKQogCQlyZXR1cm4gLUVJTzsKIAogCWlmIChzbWIzX2VuY3J5cHRpb25fcmVx
dWlyZWQodGNvbikpCkBAIC0yODA2LDE0ICsyODIxLDE2IEBAIFNNQjJfb3Blbihjb25zdCB1bnNp
Z25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19vcGVuX3Bhcm1zICpvcGFybXMsIF9fbGUxNiAqcGF0
aCwKIAlycXN0LnJxX2lvdiA9IGlvdjsKIAlycXN0LnJxX252ZWMgPSBTTUIyX0NSRUFURV9JT1Zf
U0laRTsKIAotCXJjID0gU01CMl9vcGVuX2luaXQodGNvbiwgJnJxc3QsIG9wbG9jaywgb3Bhcm1z
LCBwYXRoKTsKKwlyYyA9IFNNQjJfb3Blbl9pbml0KHRjb24sIHNlcnZlciwKKwkJCSAgICAmcnFz
dCwgb3Bsb2NrLCBvcGFybXMsIHBhdGgpOwogCWlmIChyYykKIAkJZ290byBjcmVhdF9leGl0Owog
CiAJdHJhY2Vfc21iM19vcGVuX2VudGVyKHhpZCwgdGNvbi0+dGlkLCB0Y29uLT5zZXMtPlN1aWQs
CiAJCW9wYXJtcy0+Y3JlYXRlX29wdGlvbnMsIG9wYXJtcy0+ZGVzaXJlZF9hY2Nlc3MpOwogCi0J
cmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1ZnR5cGUsIGZsYWdz
LAorCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsIHNlcnZlciwKKwkJCSAgICAmcnFzdCwg
JnJlc3BfYnVmdHlwZSwgZmxhZ3MsCiAJCQkgICAgJnJzcF9pb3YpOwogCXJzcCA9IChzdHJ1Y3Qg
c21iMl9jcmVhdGVfcnNwICopcnNwX2lvdi5pb3ZfYmFzZTsKIApAQCAtMjg2NSw3ICsyODgyLDgg
QEAgU01CMl9vcGVuKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX29wZW5fcGFy
bXMgKm9wYXJtcywgX19sZTE2ICpwYXRoLAogfQogCiBpbnQKLVNNQjJfaW9jdGxfaW5pdChzdHJ1
Y3QgY2lmc190Y29uICp0Y29uLCBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCitTTUIyX2lvY3RsX2lu
aXQoc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVy
LAorCQlzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCiAJCXU2NCBwZXJzaXN0ZW50X2ZpZCwgdTY0IHZv
bGF0aWxlX2ZpZCwgdTMyIG9wY29kZSwKIAkJYm9vbCBpc19mc2N0bCwgY2hhciAqaW5fZGF0YSwg
dTMyIGluZGF0YWxlbiwKIAkJX191MzIgbWF4X3Jlc3BvbnNlX3NpemUpCkBAIC0yODc2LDcgKzI4
OTQsOCBAQCBTTUIyX2lvY3RsX2luaXQoc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgc3RydWN0IHNt
Yl9ycXN0ICpycXN0LAogCWludCByYzsKIAljaGFyICppbl9kYXRhX2J1ZjsKIAotCXJjID0gc21i
Ml9pb2N0bF9yZXFfaW5pdChvcGNvZGUsIHRjb24sICh2b2lkICoqKSAmcmVxLCAmdG90YWxfbGVu
KTsKKwlyYyA9IHNtYjJfaW9jdGxfcmVxX2luaXQob3Bjb2RlLCB0Y29uLCBzZXJ2ZXIsCisJCQkJ
ICh2b2lkICoqKSAmcmVxLCAmdG90YWxfbGVuKTsKIAlpZiAocmMpCiAJCXJldHVybiByYzsKIApA
QCAtMjk3NiwxMiArMjk5NSwxMiBAQCBTTUIyX2lvY3RsKGNvbnN0IHVuc2lnbmVkIGludCB4aWQs
IHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHU2NCBwZXJzaXN0ZW50X2ZpZCwKIAlzdHJ1Y3Qgc21i
X3Jxc3QgcnFzdDsKIAlzdHJ1Y3Qgc21iMl9pb2N0bF9yc3AgKnJzcCA9IE5VTEw7CiAJc3RydWN0
IGNpZnNfc2VzICpzZXM7CisJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyOwogCXN0cnVj
dCBrdmVjIGlvdltTTUIyX0lPQ1RMX0lPVl9TSVpFXTsKIAlzdHJ1Y3Qga3ZlYyByc3BfaW92ID0g
e05VTEwsIDB9OwogCWludCByZXNwX2J1ZnR5cGUgPSBDSUZTX05PX0JVRkZFUjsKIAlpbnQgcmMg
PSAwOwogCWludCBmbGFncyA9IDA7Ci0Jc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyOwog
CiAJY2lmc19kYmcoRllJLCAiU01CMiBJT0NUTFxuIik7CiAKQEAgLTI5OTIsMTQgKzMwMTEsMTQg
QEAgU01CMl9pb2N0bChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0
Y29uLCB1NjQgcGVyc2lzdGVudF9maWQsCiAJaWYgKHBsZW4pCiAJCSpwbGVuID0gMDsKIAotCWlm
ICh0Y29uKQotCQlzZXMgPSB0Y29uLT5zZXM7Ci0JZWxzZQorCWlmICghdGNvbikKIAkJcmV0dXJu
IC1FSU87CiAKKwlzZXMgPSB0Y29uLT5zZXM7CiAJaWYgKCFzZXMpCiAJCXJldHVybiAtRUlPOwot
CXNlcnZlciA9IHNlcy0+c2VydmVyOworCisJc2VydmVyID0gY2lmc19waWNrX2NoYW5uZWwoc2Vz
KTsKIAlpZiAoIXNlcnZlcikKIAkJcmV0dXJuIC1FSU87CiAKQEAgLTMwMTEsMTIgKzMwMzAsMTQg
QEAgU01CMl9pb2N0bChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0
Y29uLCB1NjQgcGVyc2lzdGVudF9maWQsCiAJcnFzdC5ycV9pb3YgPSBpb3Y7CiAJcnFzdC5ycV9u
dmVjID0gU01CMl9JT0NUTF9JT1ZfU0laRTsKIAotCXJjID0gU01CMl9pb2N0bF9pbml0KHRjb24s
ICZycXN0LCBwZXJzaXN0ZW50X2ZpZCwgdm9sYXRpbGVfZmlkLCBvcGNvZGUsCisJcmMgPSBTTUIy
X2lvY3RsX2luaXQodGNvbiwgc2VydmVyLAorCQkJICAgICAmcnFzdCwgcGVyc2lzdGVudF9maWQs
IHZvbGF0aWxlX2ZpZCwgb3Bjb2RlLAogCQkJICAgICBpc19mc2N0bCwgaW5fZGF0YSwgaW5kYXRh
bGVuLCBtYXhfb3V0X2RhdGFfbGVuKTsKIAlpZiAocmMpCiAJCWdvdG8gaW9jdGxfZXhpdDsKIAot
CXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsICZycXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFn
cywKKwlyYyA9IGNpZnNfc2VuZF9yZWN2KHhpZCwgc2VzLCBzZXJ2ZXIsCisJCQkgICAgJnJxc3Qs
ICZyZXNwX2J1ZnR5cGUsIGZsYWdzLAogCQkJICAgICZyc3BfaW92KTsKIAlyc3AgPSAoc3RydWN0
IHNtYjJfaW9jdGxfcnNwICopcnNwX2lvdi5pb3ZfYmFzZTsKIApAQCAtMzEwNCw3ICszMTI1LDgg
QEAgU01CMl9zZXRfY29tcHJlc3Npb24oY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNp
ZnNfdGNvbiAqdGNvbiwKIH0KIAogaW50Ci1TTUIyX2Nsb3NlX2luaXQoc3RydWN0IGNpZnNfdGNv
biAqdGNvbiwgc3RydWN0IHNtYl9ycXN0ICpycXN0LAorU01CMl9jbG9zZV9pbml0KHN0cnVjdCBj
aWZzX3Rjb24gKnRjb24sIHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciwKKwkJc3RydWN0
IHNtYl9ycXN0ICpycXN0LAogCQl1NjQgcGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9maWQs
IGJvb2wgcXVlcnlfYXR0cnMpCiB7CiAJc3RydWN0IHNtYjJfY2xvc2VfcmVxICpyZXE7CkBAIC0z
MTEyLDcgKzMxMzQsOCBAQCBTTUIyX2Nsb3NlX2luaXQoc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwg
c3RydWN0IHNtYl9ycXN0ICpycXN0LAogCXVuc2lnbmVkIGludCB0b3RhbF9sZW47CiAJaW50IHJj
OwogCi0JcmMgPSBzbWIyX3BsYWluX3JlcV9pbml0KFNNQjJfQ0xPU0UsIHRjb24sICh2b2lkICoq
KSAmcmVxLCAmdG90YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9DTE9T
RSwgdGNvbiwgc2VydmVyLAorCQkJCSAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7CiAJaWYg
KHJjKQogCQlyZXR1cm4gcmM7CiAKQEAgLTMxNDMsNiArMzE2Niw3IEBAIF9fU01CMl9jbG9zZShj
b25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCXN0cnVjdCBz
bWJfcnFzdCBycXN0OwogCXN0cnVjdCBzbWIyX2Nsb3NlX3JzcCAqcnNwID0gTlVMTDsKIAlzdHJ1
Y3QgY2lmc19zZXMgKnNlcyA9IHRjb24tPnNlczsKKwlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpz
ZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbChzZXMpOwogCXN0cnVjdCBrdmVjIGlvdlsxXTsKIAlz
dHJ1Y3Qga3ZlYyByc3BfaW92OwogCWludCByZXNwX2J1ZnR5cGUgPSBDSUZTX05PX0JVRkZFUjsK
QEAgLTMxNTIsNyArMzE3Niw3IEBAIF9fU01CMl9jbG9zZShjb25zdCB1bnNpZ25lZCBpbnQgeGlk
LCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCiAJY2lmc19kYmcoRllJLCAiQ2xvc2VcbiIpOwog
Ci0JaWYgKCFzZXMgfHwgIShzZXMtPnNlcnZlcikpCisJaWYgKCFzZXMgfHwgIXNlcnZlcikKIAkJ
cmV0dXJuIC1FSU87CiAKIAlpZiAoc21iM19lbmNyeXB0aW9uX3JlcXVpcmVkKHRjb24pKQpAQCAt
MzE2OCwxMiArMzE5MiwxNCBAQCBfX1NNQjJfY2xvc2UoY29uc3QgdW5zaWduZWQgaW50IHhpZCwg
c3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAkJcXVlcnlfYXR0cnMgPSB0cnVlOwogCiAJdHJhY2Vf
c21iM19jbG9zZV9lbnRlcih4aWQsIHBlcnNpc3RlbnRfZmlkLCB0Y29uLT50aWQsIHNlcy0+U3Vp
ZCk7Ci0JcmMgPSBTTUIyX2Nsb3NlX2luaXQodGNvbiwgJnJxc3QsIHBlcnNpc3RlbnRfZmlkLCB2
b2xhdGlsZV9maWQsCisJcmMgPSBTTUIyX2Nsb3NlX2luaXQodGNvbiwgc2VydmVyLAorCQkJICAg
ICAmcnFzdCwgcGVyc2lzdGVudF9maWQsIHZvbGF0aWxlX2ZpZCwKIAkJCSAgICAgcXVlcnlfYXR0
cnMpOwogCWlmIChyYykKIAkJZ290byBjbG9zZV9leGl0OwogCi0JcmMgPSBjaWZzX3NlbmRfcmVj
dih4aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1ZnR5cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMg
PSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9i
dWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOwogCXJzcCA9IChzdHJ1Y3Qgc21iMl9jbG9zZV9yc3Ag
Kilyc3BfaW92Lmlvdl9iYXNlOwogCiAJaWYgKHJjICE9IDApIHsKQEAgLTMyNzMsNyArMzI5OSw4
IEBAIHNtYjJfdmFsaWRhdGVfYW5kX2NvcHlfaW92KHVuc2lnbmVkIGludCBvZmZzZXQsIHVuc2ln
bmVkIGludCBidWZmZXJfbGVuZ3RoLAogfQogCiBpbnQKLVNNQjJfcXVlcnlfaW5mb19pbml0KHN0
cnVjdCBjaWZzX3Rjb24gKnRjb24sIHN0cnVjdCBzbWJfcnFzdCAqcnFzdCwKK1NNQjJfcXVlcnlf
aW5mb19pbml0KHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHN0cnVjdCBUQ1BfU2VydmVyX0luZm8g
KnNlcnZlciwKKwkJICAgICBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCiAJCSAgICAgdTY0IHBlcnNp
c3RlbnRfZmlkLCB1NjQgdm9sYXRpbGVfZmlkLAogCQkgICAgIHU4IGluZm9fY2xhc3MsIHU4IGlu
Zm9fdHlwZSwgdTMyIGFkZGl0aW9uYWxfaW5mbywKIAkJICAgICBzaXplX3Qgb3V0cHV0X2xlbiwg
c2l6ZV90IGlucHV0X2xlbiwgdm9pZCAqaW5wdXQpCkBAIC0zMjgzLDggKzMzMTAsOCBAQCBTTUIy
X3F1ZXJ5X2luZm9faW5pdChzdHJ1Y3QgY2lmc190Y29uICp0Y29uLCBzdHJ1Y3Qgc21iX3Jxc3Qg
KnJxc3QsCiAJdW5zaWduZWQgaW50IHRvdGFsX2xlbjsKIAlpbnQgcmM7CiAKLQlyYyA9IHNtYjJf
cGxhaW5fcmVxX2luaXQoU01CMl9RVUVSWV9JTkZPLCB0Y29uLCAodm9pZCAqKikgJnJlcSwKLQkJ
CSAgICAgJnRvdGFsX2xlbik7CisJcmMgPSBzbWIyX3BsYWluX3JlcV9pbml0KFNNQjJfUVVFUllf
SU5GTywgdGNvbiwgc2VydmVyLAorCQkJCSAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7CiAJ
aWYgKHJjKQogCQlyZXR1cm4gcmM7CiAKQEAgLTMzMzYsNyArMzM2Myw3IEBAIHF1ZXJ5X2luZm8o
Y29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAogCWlmICgh
c2VzKQogCQlyZXR1cm4gLUVJTzsKLQlzZXJ2ZXIgPSBzZXMtPnNlcnZlcjsKKwlzZXJ2ZXIgPSBj
aWZzX3BpY2tfY2hhbm5lbChzZXMpOwogCWlmICghc2VydmVyKQogCQlyZXR1cm4gLUVJTzsKIApA
QCAtMzM0OCw3ICszMzc1LDggQEAgcXVlcnlfaW5mbyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBz
dHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCXJxc3QucnFfaW92ID0gaW92OwogCXJxc3QucnFfbnZl
YyA9IDE7CiAKLQlyYyA9IFNNQjJfcXVlcnlfaW5mb19pbml0KHRjb24sICZycXN0LCBwZXJzaXN0
ZW50X2ZpZCwgdm9sYXRpbGVfZmlkLAorCXJjID0gU01CMl9xdWVyeV9pbmZvX2luaXQodGNvbiwg
c2VydmVyLAorCQkJCSAgJnJxc3QsIHBlcnNpc3RlbnRfZmlkLCB2b2xhdGlsZV9maWQsCiAJCQkJ
ICBpbmZvX2NsYXNzLCBpbmZvX3R5cGUsIGFkZGl0aW9uYWxfaW5mbywKIAkJCQkgIG91dHB1dF9s
ZW4sIDAsIE5VTEwpOwogCWlmIChyYykKQEAgLTMzNTcsNyArMzM4NSw4IEBAIHF1ZXJ5X2luZm8o
Y29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAl0cmFjZV9z
bWIzX3F1ZXJ5X2luZm9fZW50ZXIoeGlkLCBwZXJzaXN0ZW50X2ZpZCwgdGNvbi0+dGlkLAogCQkJ
CSAgICBzZXMtPlN1aWQsIGluZm9fY2xhc3MsIChfX3UzMilpbmZvX3R5cGUpOwogCi0JcmMgPSBj
aWZzX3NlbmRfcmVjdih4aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1ZnR5cGUsIGZsYWdzLCAmcnNw
X2lvdik7CisJcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJICAgICZy
cXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOwogCXJzcCA9IChzdHJ1Y3Qgc21i
Ml9xdWVyeV9pbmZvX3JzcCAqKXJzcF9pb3YuaW92X2Jhc2U7CiAKIAlpZiAocmMpIHsKQEAgLTM0
NDIsMTUgKzM0NzEsMTcgQEAgU01CMl9nZXRfc3J2X251bShjb25zdCB1bnNpZ25lZCBpbnQgeGlk
LCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCiBzdGF0aWMgaW50CiBTTUIyX25vdGlmeV9pbml0
KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBzbWJfcnFzdCAqcnFzdCwKLQkJc3RydWN0
IGNpZnNfdGNvbiAqdGNvbiwgdTY0IHBlcnNpc3RlbnRfZmlkLCB1NjQgdm9sYXRpbGVfZmlkLAot
CQl1MzIgY29tcGxldGlvbl9maWx0ZXIsIGJvb2wgd2F0Y2hfdHJlZSkKKwkJIHN0cnVjdCBjaWZz
X3Rjb24gKnRjb24sIHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciwKKwkJIHU2NCBwZXJz
aXN0ZW50X2ZpZCwgdTY0IHZvbGF0aWxlX2ZpZCwKKwkJIHUzMiBjb21wbGV0aW9uX2ZpbHRlciwg
Ym9vbCB3YXRjaF90cmVlKQogewogCXN0cnVjdCBzbWIyX2NoYW5nZV9ub3RpZnlfcmVxICpyZXE7
CiAJc3RydWN0IGt2ZWMgKmlvdiA9IHJxc3QtPnJxX2lvdjsKIAl1bnNpZ25lZCBpbnQgdG90YWxf
bGVuOwogCWludCByYzsKIAotCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX0NIQU5HRV9O
T1RJRlksIHRjb24sICh2b2lkICoqKSAmcmVxLCAmdG90YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxh
aW5fcmVxX2luaXQoU01CMl9DSEFOR0VfTk9USUZZLCB0Y29uLCBzZXJ2ZXIsCisJCQkJICh2b2lk
ICoqKSAmcmVxLCAmdG90YWxfbGVuKTsKIAlpZiAocmMpCiAJCXJldHVybiByYzsKIApAQCAtMzQ3
Nyw2ICszNTA4LDcgQEAgU01CMl9jaGFuZ2Vfbm90aWZ5KGNvbnN0IHVuc2lnbmVkIGludCB4aWQs
IHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJCXUzMiBjb21wbGV0aW9uX2ZpbHRlcikKIHsKIAlz
dHJ1Y3QgY2lmc19zZXMgKnNlcyA9IHRjb24tPnNlczsKKwlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZv
ICpzZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbChzZXMpOwogCXN0cnVjdCBzbWJfcnFzdCBycXN0
OwogCXN0cnVjdCBrdmVjIGlvdlsxXTsKIAlzdHJ1Y3Qga3ZlYyByc3BfaW92ID0ge05VTEwsIDB9
OwpAQCAtMzQ4NSw3ICszNTE3LDcgQEAgU01CMl9jaGFuZ2Vfbm90aWZ5KGNvbnN0IHVuc2lnbmVk
IGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJaW50IHJjID0gMDsKIAogCWNpZnNf
ZGJnKEZZSSwgImNoYW5nZSBub3RpZnlcbiIpOwotCWlmICghc2VzIHx8ICEoc2VzLT5zZXJ2ZXIp
KQorCWlmICghc2VzIHx8ICFzZXJ2ZXIpCiAJCXJldHVybiAtRUlPOwogCiAJaWYgKHNtYjNfZW5j
cnlwdGlvbl9yZXF1aXJlZCh0Y29uKSkKQEAgLTM0OTYsMTQgKzM1MjgsMTYgQEAgU01CMl9jaGFu
Z2Vfbm90aWZ5KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24s
CiAJcnFzdC5ycV9pb3YgPSBpb3Y7CiAJcnFzdC5ycV9udmVjID0gMTsKIAotCXJjID0gU01CMl9u
b3RpZnlfaW5pdCh4aWQsICZycXN0LCB0Y29uLCBwZXJzaXN0ZW50X2ZpZCwgdm9sYXRpbGVfZmlk
LAorCXJjID0gU01CMl9ub3RpZnlfaW5pdCh4aWQsICZycXN0LCB0Y29uLCBzZXJ2ZXIsCisJCQkg
ICAgICBwZXJzaXN0ZW50X2ZpZCwgdm9sYXRpbGVfZmlkLAogCQkJICAgICAgY29tcGxldGlvbl9m
aWx0ZXIsIHdhdGNoX3RyZWUpOwogCWlmIChyYykKIAkJZ290byBjbm90aWZ5X2V4aXQ7CiAKIAl0
cmFjZV9zbWIzX25vdGlmeV9lbnRlcih4aWQsIHBlcnNpc3RlbnRfZmlkLCB0Y29uLT50aWQsIHNl
cy0+U3VpZCwKIAkJCQkodTgpd2F0Y2hfdHJlZSwgY29tcGxldGlvbl9maWx0ZXIpOwotCXJjID0g
Y2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsICZycXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFncywgJnJz
cF9pb3YpOworCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsIHNlcnZlciwKKwkJCSAgICAm
cnFzdCwgJnJlc3BfYnVmdHlwZSwgZmxhZ3MsICZyc3BfaW92KTsKIAogCWlmIChyYyAhPSAwKSB7
CiAJCWNpZnNfc3RhdHNfZmFpbF9pbmModGNvbiwgU01CMl9DSEFOR0VfTk9USUZZX0hFKTsKQEAg
LTM1OTMsNyArMzYyNyw3IEBAIHZvaWQgc21iMl9yZWNvbm5lY3Rfc2VydmVyKHN0cnVjdCB3b3Jr
X3N0cnVjdCAqd29yaykKIAlzcGluX3VubG9jaygmY2lmc190Y3Bfc2VzX2xvY2spOwogCiAJbGlz
dF9mb3JfZWFjaF9lbnRyeV9zYWZlKHRjb24sIHRjb24yLCAmdG1wX2xpc3QsIHJsaXN0KSB7Ci0J
CXJjID0gc21iMl9yZWNvbm5lY3QoU01CMl9JTlRFUk5BTF9DTUQsIHRjb24pOworCQlyYyA9IHNt
YjJfcmVjb25uZWN0KFNNQjJfSU5URVJOQUxfQ01ELCB0Y29uLCBzZXJ2ZXIpOwogCQlpZiAoIXJj
KQogCQkJY2lmc19yZW9wZW5fcGVyc2lzdGVudF9oYW5kbGVzKHRjb24pOwogCQllbHNlCkBAIC0z
NjMzLDcgKzM2NjcsOCBAQCBTTUIyX2VjaG8oc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVy
KQogCQlyZXR1cm4gcmM7CiAJfQogCi0JcmMgPSBzbWIyX3BsYWluX3JlcV9pbml0KFNNQjJfRUNI
TywgTlVMTCwgKHZvaWQgKiopJnJlcSwgJnRvdGFsX2xlbik7CisJcmMgPSBzbWIyX3BsYWluX3Jl
cV9pbml0KFNNQjJfRUNITywgTlVMTCwgc2VydmVyLAorCQkJCSAodm9pZCAqKikmcmVxLCAmdG90
YWxfbGVuKTsKIAlpZiAocmMpCiAJCXJldHVybiByYzsKIApAQCAtMzY2MCwxNCArMzY5NSwxNiBA
QCBTTUIyX2ZsdXNoX2ZyZWUoc3RydWN0IHNtYl9ycXN0ICpycXN0KQogCiBpbnQKIFNNQjJfZmx1
c2hfaW5pdChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCi0J
CXN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHU2NCBwZXJzaXN0ZW50X2ZpZCwgdTY0IHZvbGF0aWxl
X2ZpZCkKKwkJc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAq
c2VydmVyLAorCQl1NjQgcGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9maWQpCiB7CiAJc3Ry
dWN0IHNtYjJfZmx1c2hfcmVxICpyZXE7CiAJc3RydWN0IGt2ZWMgKmlvdiA9IHJxc3QtPnJxX2lv
djsKIAl1bnNpZ25lZCBpbnQgdG90YWxfbGVuOwogCWludCByYzsKIAotCXJjID0gc21iMl9wbGFp
bl9yZXFfaW5pdChTTUIyX0ZMVVNILCB0Y29uLCAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7
CisJcmMgPSBzbWIyX3BsYWluX3JlcV9pbml0KFNNQjJfRkxVU0gsIHRjb24sIHNlcnZlciwKKwkJ
CQkgKHZvaWQgKiopICZyZXEsICZ0b3RhbF9sZW4pOwogCWlmIChyYykKIAkJcmV0dXJuIHJjOwog
CkBAIC0zNjg4LDYgKzM3MjUsNyBAQCBTTUIyX2ZsdXNoKGNvbnN0IHVuc2lnbmVkIGludCB4aWQs
IHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHU2NCBwZXJzaXN0ZW50X2ZpZCwKIAlzdHJ1Y3Qgc21i
X3Jxc3QgcnFzdDsKIAlzdHJ1Y3Qga3ZlYyBpb3ZbMV07CiAJc3RydWN0IGt2ZWMgcnNwX2lvdiA9
IHtOVUxMLCAwfTsKKwlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBjaWZzX3BpY2tf
Y2hhbm5lbChzZXMpOwogCWludCByZXNwX2J1ZnR5cGUgPSBDSUZTX05PX0JVRkZFUjsKIAlpbnQg
ZmxhZ3MgPSAwOwogCWludCByYyA9IDA7CkBAIC0zNzA0LDEyICszNzQyLDE0IEBAIFNNQjJfZmx1
c2goY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgdTY0IHBl
cnNpc3RlbnRfZmlkLAogCXJxc3QucnFfaW92ID0gaW92OwogCXJxc3QucnFfbnZlYyA9IDE7CiAK
LQlyYyA9IFNNQjJfZmx1c2hfaW5pdCh4aWQsICZycXN0LCB0Y29uLCBwZXJzaXN0ZW50X2ZpZCwg
dm9sYXRpbGVfZmlkKTsKKwlyYyA9IFNNQjJfZmx1c2hfaW5pdCh4aWQsICZycXN0LCB0Y29uLCBz
ZXJ2ZXIsCisJCQkgICAgIHBlcnNpc3RlbnRfZmlkLCB2b2xhdGlsZV9maWQpOwogCWlmIChyYykK
IAkJZ290byBmbHVzaF9leGl0OwogCiAJdHJhY2Vfc21iM19mbHVzaF9lbnRlcih4aWQsIHBlcnNp
c3RlbnRfZmlkLCB0Y29uLT50aWQsIHNlcy0+U3VpZCk7Ci0JcmMgPSBjaWZzX3NlbmRfcmVjdih4
aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1ZnR5cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMgPSBj
aWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9idWZ0
eXBlLCBmbGFncywgJnJzcF9pb3YpOwogCiAJaWYgKHJjICE9IDApIHsKIAkJY2lmc19zdGF0c19m
YWlsX2luYyh0Y29uLCBTTUIyX0ZMVVNIX0hFKTsKQEAgLTM3MzcsMTQgKzM3NzcsMTMgQEAgc21i
Ml9uZXdfcmVhZF9yZXEodm9pZCAqKmJ1ZiwgdW5zaWduZWQgaW50ICp0b3RhbF9sZW4sCiAJaW50
IHJjID0gLUVBQ0NFUzsKIAlzdHJ1Y3Qgc21iMl9yZWFkX3BsYWluX3JlcSAqcmVxID0gTlVMTDsK
IAlzdHJ1Y3Qgc21iMl9zeW5jX2hkciAqc2hkcjsKLQlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpz
ZXJ2ZXI7CisJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyID0gaW9fcGFybXMtPnNlcnZl
cjsKIAotCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1JFQUQsIGlvX3Bhcm1zLT50Y29u
LCAodm9pZCAqKikgJnJlcSwKLQkJCQkgdG90YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxhaW5fcmVx
X2luaXQoU01CMl9SRUFELCBpb19wYXJtcy0+dGNvbiwgc2VydmVyLAorCQkJCSAodm9pZCAqKikg
JnJlcSwgdG90YWxfbGVuKTsKIAlpZiAocmMpCiAJCXJldHVybiByYzsKIAotCXNlcnZlciA9IGlv
X3Bhcm1zLT50Y29uLT5zZXMtPnNlcnZlcjsKIAlpZiAoc2VydmVyID09IE5VTEwpCiAJCXJldHVy
biAtRUNPTk5BQk9SVEVEOwogCkBAIC0zNzczLDggKzM4MTIsNyBAQCBzbWIyX25ld19yZWFkX3Jl
cSh2b2lkICoqYnVmLCB1bnNpZ25lZCBpbnQgKnRvdGFsX2xlbiwKIAkJcmRhdGEtPmJ5dGVzID49
IHNlcnZlci0+c21iZF9jb25uLT5yZG1hX3JlYWR3cml0ZV90aHJlc2hvbGQpIHsKIAogCQlzdHJ1
Y3Qgc21iZF9idWZmZXJfZGVzY3JpcHRvcl92MSAqdjE7Ci0JCWJvb2wgbmVlZF9pbnZhbGlkYXRl
ID0KLQkJCWlvX3Bhcm1zLT50Y29uLT5zZXMtPnNlcnZlci0+ZGlhbGVjdCA9PSBTTUIzMF9QUk9U
X0lEOworCQlib29sIG5lZWRfaW52YWxpZGF0ZSA9IHNlcnZlci0+ZGlhbGVjdCA9PSBTTUIzMF9Q
Uk9UX0lEOwogCiAJCXJkYXRhLT5tciA9IHNtYmRfcmVnaXN0ZXJfbXIoCiAJCQkJc2VydmVyLT5z
bWJkX2Nvbm4sIHJkYXRhLT5wYWdlcywKQEAgLTM4MzEsNyArMzg2OSw3IEBAIHNtYjJfcmVhZHZf
Y2FsbGJhY2soc3RydWN0IG1pZF9xX2VudHJ5ICptaWQpCiB7CiAJc3RydWN0IGNpZnNfcmVhZGRh
dGEgKnJkYXRhID0gbWlkLT5jYWxsYmFja19kYXRhOwogCXN0cnVjdCBjaWZzX3Rjb24gKnRjb24g
PSB0bGlua190Y29uKHJkYXRhLT5jZmlsZS0+dGxpbmspOwotCXN0cnVjdCBUQ1BfU2VydmVyX0lu
Zm8gKnNlcnZlciA9IHRjb24tPnNlcy0+c2VydmVyOworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8g
KnNlcnZlciA9IHJkYXRhLT5zZXJ2ZXI7CiAJc3RydWN0IHNtYjJfc3luY19oZHIgKnNoZHIgPQog
CQkJCShzdHJ1Y3Qgc21iMl9zeW5jX2hkciAqKXJkYXRhLT5pb3ZbMF0uaW92X2Jhc2U7CiAJc3Ry
dWN0IGNpZnNfY3JlZGl0cyBjcmVkaXRzID0geyAudmFsdWUgPSAwLCAuaW5zdGFuY2UgPSAwIH07
CkBAIC0zODQzLDYgKzM4ODEsMTAgQEAgc21iMl9yZWFkdl9jYWxsYmFjayhzdHJ1Y3QgbWlkX3Ff
ZW50cnkgKm1pZCkKIAkJCQkgLnJxX3BhZ2VzeiA9IHJkYXRhLT5wYWdlc3osCiAJCQkJIC5ycV90
YWlsc3ogPSByZGF0YS0+dGFpbHN6IH07CiAKKwlXQVJOX09OQ0UocmRhdGEtPnNlcnZlciAhPSBt
aWQtPnNlcnZlciwKKwkJICAicmRhdGEgc2VydmVyICVwICE9IG1pZCBzZXJ2ZXIgJXAiLAorCQkg
IHJkYXRhLT5zZXJ2ZXIsIG1pZC0+c2VydmVyKTsKKwogCWNpZnNfZGJnKEZZSSwgIiVzOiBtaWQ9
JWxsdSBzdGF0ZT0lZCByZXN1bHQ9JWQgYnl0ZXM9JXVcbiIsCiAJCSBfX2Z1bmNfXywgbWlkLT5t
aWQsIG1pZC0+bWlkX3N0YXRlLCByZGF0YS0+cmVzdWx0LAogCQkgcmRhdGEtPmJ5dGVzKTsKQEAg
LTM5MjAsMjAgKzM5NjIsMjMgQEAgc21iMl9hc3luY19yZWFkdihzdHJ1Y3QgY2lmc19yZWFkZGF0
YSAqcmRhdGEpCiAJc3RydWN0IHNtYl9ycXN0IHJxc3QgPSB7IC5ycV9pb3YgPSByZGF0YS0+aW92
LAogCQkJCSAucnFfbnZlYyA9IDEgfTsKIAlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXI7
CisJc3RydWN0IGNpZnNfdGNvbiAqdGNvbiA9IHRsaW5rX3Rjb24ocmRhdGEtPmNmaWxlLT50bGlu
ayk7CiAJdW5zaWduZWQgaW50IHRvdGFsX2xlbjsKIAogCWNpZnNfZGJnKEZZSSwgIiVzOiBvZmZz
ZXQ9JWxsdSBieXRlcz0ldVxuIiwKIAkJIF9fZnVuY19fLCByZGF0YS0+b2Zmc2V0LCByZGF0YS0+
Ynl0ZXMpOwogCisJaWYgKCFyZGF0YS0+c2VydmVyKQorCQlyZGF0YS0+c2VydmVyID0gY2lmc19w
aWNrX2NoYW5uZWwodGNvbi0+c2VzKTsKKwogCWlvX3Bhcm1zLnRjb24gPSB0bGlua190Y29uKHJk
YXRhLT5jZmlsZS0+dGxpbmspOworCWlvX3Bhcm1zLnNlcnZlciA9IHNlcnZlciA9IHJkYXRhLT5z
ZXJ2ZXI7CiAJaW9fcGFybXMub2Zmc2V0ID0gcmRhdGEtPm9mZnNldDsKIAlpb19wYXJtcy5sZW5n
dGggPSByZGF0YS0+Ynl0ZXM7CiAJaW9fcGFybXMucGVyc2lzdGVudF9maWQgPSByZGF0YS0+Y2Zp
bGUtPmZpZC5wZXJzaXN0ZW50X2ZpZDsKIAlpb19wYXJtcy52b2xhdGlsZV9maWQgPSByZGF0YS0+
Y2ZpbGUtPmZpZC52b2xhdGlsZV9maWQ7CiAJaW9fcGFybXMucGlkID0gcmRhdGEtPnBpZDsKIAot
CXNlcnZlciA9IGlvX3Bhcm1zLnRjb24tPnNlcy0+c2VydmVyOwotCiAJcmMgPSBzbWIyX25ld19y
ZWFkX3JlcSgKIAkJKHZvaWQgKiopICZidWYsICZ0b3RhbF9sZW4sICZpb19wYXJtcywgcmRhdGEs
IDAsIDApOwogCWlmIChyYykKQEAgLTM5NjEsNyArNDAwNiw3IEBAIHNtYjJfYXN5bmNfcmVhZHYo
c3RydWN0IGNpZnNfcmVhZGRhdGEgKnJkYXRhKQogCX0KIAogCWtyZWZfZ2V0KCZyZGF0YS0+cmVm
Y291bnQpOwotCXJjID0gY2lmc19jYWxsX2FzeW5jKGlvX3Bhcm1zLnRjb24tPnNlcy0+c2VydmVy
LCAmcnFzdCwKKwlyYyA9IGNpZnNfY2FsbF9hc3luYyhzZXJ2ZXIsICZycXN0LAogCQkJICAgICBj
aWZzX3JlYWR2X3JlY2VpdmUsIHNtYjJfcmVhZHZfY2FsbGJhY2ssCiAJCQkgICAgIHNtYjNfaGFu
ZGxlX3JlYWRfZGF0YSwgcmRhdGEsIGZsYWdzLAogCQkJICAgICAmcmRhdGEtPmNyZWRpdHMpOwpA
QCAtMzk5Myw2ICs0MDM4LDkgQEAgU01CMl9yZWFkKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0
cnVjdCBjaWZzX2lvX3Bhcm1zICppb19wYXJtcywKIAlpbnQgZmxhZ3MgPSBDSUZTX0xPR19FUlJP
UjsKIAlzdHJ1Y3QgY2lmc19zZXMgKnNlcyA9IGlvX3Bhcm1zLT50Y29uLT5zZXM7CiAKKwlpZiAo
IWlvX3Bhcm1zLT5zZXJ2ZXIpCisJCWlvX3Bhcm1zLT5zZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5l
bChpb19wYXJtcy0+dGNvbi0+c2VzKTsKKwogCSpuYnl0ZXMgPSAwOwogCXJjID0gc21iMl9uZXdf
cmVhZF9yZXEoKHZvaWQgKiopJnJlcSwgJnRvdGFsX2xlbiwgaW9fcGFybXMsIE5VTEwsIDAsIDAp
OwogCWlmIChyYykKQEAgLTQwMDgsNyArNDA1Niw4IEBAIFNNQjJfcmVhZChjb25zdCB1bnNpZ25l
ZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19pb19wYXJtcyAqaW9fcGFybXMsCiAJcnFzdC5ycV9pb3Yg
PSBpb3Y7CiAJcnFzdC5ycV9udmVjID0gMTsKIAotCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBz
ZXMsICZycXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOworCXJjID0gY2lmc19z
ZW5kX3JlY3YoeGlkLCBzZXMsIGlvX3Bhcm1zLT5zZXJ2ZXIsCisJCQkgICAgJnJxc3QsICZyZXNw
X2J1ZnR5cGUsIGZsYWdzLCAmcnNwX2lvdik7CiAJcnNwID0gKHN0cnVjdCBzbWIyX3JlYWRfcnNw
ICopcnNwX2lvdi5pb3ZfYmFzZTsKIAogCWlmIChyYykgewpAQCAtNDA2NCwxMSArNDExMywxNSBA
QCBzbWIyX3dyaXRldl9jYWxsYmFjayhzdHJ1Y3QgbWlkX3FfZW50cnkgKm1pZCkKIHsKIAlzdHJ1
Y3QgY2lmc193cml0ZWRhdGEgKndkYXRhID0gbWlkLT5jYWxsYmFja19kYXRhOwogCXN0cnVjdCBj
aWZzX3Rjb24gKnRjb24gPSB0bGlua190Y29uKHdkYXRhLT5jZmlsZS0+dGxpbmspOwotCXN0cnVj
dCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciA9IHRjb24tPnNlcy0+c2VydmVyOworCXN0cnVjdCBU
Q1BfU2VydmVyX0luZm8gKnNlcnZlciA9IHdkYXRhLT5zZXJ2ZXI7CiAJdW5zaWduZWQgaW50IHdy
aXR0ZW47CiAJc3RydWN0IHNtYjJfd3JpdGVfcnNwICpyc3AgPSAoc3RydWN0IHNtYjJfd3JpdGVf
cnNwICopbWlkLT5yZXNwX2J1ZjsKIAlzdHJ1Y3QgY2lmc19jcmVkaXRzIGNyZWRpdHMgPSB7IC52
YWx1ZSA9IDAsIC5pbnN0YW5jZSA9IDAgfTsKIAorCVdBUk5fT05DRSh3ZGF0YS0+c2VydmVyICE9
IG1pZC0+c2VydmVyLAorCQkgICJ3ZGF0YSBzZXJ2ZXIgJXAgIT0gbWlkIHNlcnZlciAlcCIsCisJ
CSAgd2RhdGEtPnNlcnZlciwgbWlkLT5zZXJ2ZXIpOworCiAJc3dpdGNoIChtaWQtPm1pZF9zdGF0
ZSkgewogCWNhc2UgTUlEX1JFU1BPTlNFX1JFQ0VJVkVEOgogCQljcmVkaXRzLnZhbHVlID0gbGUx
Nl90b19jcHUocnNwLT5zeW5jX2hkci5DcmVkaXRSZXF1ZXN0KTsKQEAgLTQxNDYsMTIgKzQxOTks
MTYgQEAgc21iMl9hc3luY193cml0ZXYoc3RydWN0IGNpZnNfd3JpdGVkYXRhICp3ZGF0YSwKIAlz
dHJ1Y3Qgc21iMl93cml0ZV9yZXEgKnJlcSA9IE5VTEw7CiAJc3RydWN0IHNtYjJfc3luY19oZHIg
KnNoZHI7CiAJc3RydWN0IGNpZnNfdGNvbiAqdGNvbiA9IHRsaW5rX3Rjb24od2RhdGEtPmNmaWxl
LT50bGluayk7Ci0Jc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyID0gdGNvbi0+c2VzLT5z
ZXJ2ZXI7CisJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyID0gd2RhdGEtPnNlcnZlcjsK
IAlzdHJ1Y3Qga3ZlYyBpb3ZbMV07CiAJc3RydWN0IHNtYl9ycXN0IHJxc3QgPSB7IH07CiAJdW5z
aWduZWQgaW50IHRvdGFsX2xlbjsKIAotCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1dS
SVRFLCB0Y29uLCAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7CisJaWYgKCF3ZGF0YS0+c2Vy
dmVyKQorCQlzZXJ2ZXIgPSB3ZGF0YS0+c2VydmVyID0gY2lmc19waWNrX2NoYW5uZWwodGNvbi0+
c2VzKTsKKworCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1dSSVRFLCB0Y29uLCBzZXJ2
ZXIsCisJCQkJICh2b2lkICoqKSAmcmVxLCAmdG90YWxfbGVuKTsKIAlpZiAocmMpCiAJCXJldHVy
biByYzsKIApAQCAtNDI5MCwyMCArNDM0NywyNCBAQCBTTUIyX3dyaXRlKGNvbnN0IHVuc2lnbmVk
IGludCB4aWQsIHN0cnVjdCBjaWZzX2lvX3Bhcm1zICppb19wYXJtcywKIAlzdHJ1Y3Qga3ZlYyBy
c3BfaW92OwogCWludCBmbGFncyA9IDA7CiAJdW5zaWduZWQgaW50IHRvdGFsX2xlbjsKKwlzdHJ1
Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXI7CiAKIAkqbmJ5dGVzID0gMDsKIAogCWlmIChuX3Zl
YyA8IDEpCiAJCXJldHVybiByYzsKIAotCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1dS
SVRFLCBpb19wYXJtcy0+dGNvbiwgKHZvaWQgKiopICZyZXEsCi0JCQkgICAgICZ0b3RhbF9sZW4p
OworCWlmICghaW9fcGFybXMtPnNlcnZlcikKKwkJaW9fcGFybXMtPnNlcnZlciA9IGNpZnNfcGlj
a19jaGFubmVsKGlvX3Bhcm1zLT50Y29uLT5zZXMpOworCXNlcnZlciA9IGlvX3Bhcm1zLT5zZXJ2
ZXI7CisJaWYgKHNlcnZlciA9PSBOVUxMKQorCQlyZXR1cm4gLUVDT05OQUJPUlRFRDsKKworCXJj
ID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1dSSVRFLCBpb19wYXJtcy0+dGNvbiwgc2VydmVy
LAorCQkJCSAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7CiAJaWYgKHJjKQogCQlyZXR1cm4g
cmM7CiAKLQlpZiAoaW9fcGFybXMtPnRjb24tPnNlcy0+c2VydmVyID09IE5VTEwpCi0JCXJldHVy
biAtRUNPTk5BQk9SVEVEOwotCiAJaWYgKHNtYjNfZW5jcnlwdGlvbl9yZXF1aXJlZChpb19wYXJt
cy0+dGNvbikpCiAJCWZsYWdzIHw9IENJRlNfVFJBTlNGT1JNX1JFUTsKIApAQCAtNDMzMiw3ICs0
MzkzLDggQEAgU01CMl93cml0ZShjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19p
b19wYXJtcyAqaW9fcGFybXMsCiAJcnFzdC5ycV9pb3YgPSBpb3Y7CiAJcnFzdC5ycV9udmVjID0g
bl92ZWMgKyAxOwogCi0JcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIGlvX3Bhcm1zLT50Y29uLT5z
ZXMsICZycXN0LAorCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBpb19wYXJtcy0+dGNvbi0+c2Vz
LCBzZXJ2ZXIsCisJCQkgICAgJnJxc3QsCiAJCQkgICAgJnJlc3BfYnVmdHlwZSwgZmxhZ3MsICZy
c3BfaW92KTsKIAlyc3AgPSAoc3RydWN0IHNtYjJfd3JpdGVfcnNwICopcnNwX2lvdi5pb3ZfYmFz
ZTsKIApAQCAtNDUwNiwxMSArNDU2OCwxMiBAQCBudW1fZW50cmllcyhpbnQgaW5mb3R5cGUsIGNo
YXIgKmJ1ZnN0YXJ0LCBjaGFyICplbmRfb2ZfYnVmLCBjaGFyICoqbGFzdGVudHJ5LAogICogUmVh
ZGRpci9GaW5kRmlyc3QKICAqLwogaW50IFNNQjJfcXVlcnlfZGlyZWN0b3J5X2luaXQoY29uc3Qg
dW5zaWduZWQgaW50IHhpZCwKLQkJCSAgICAgIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHN0cnVj
dCBzbWJfcnFzdCAqcnFzdCwKKwkJCSAgICAgIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCisJCQkg
ICAgICBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCisJCQkgICAgICBzdHJ1Y3Qgc21i
X3Jxc3QgKnJxc3QsCiAJCQkgICAgICB1NjQgcGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9m
aWQsCiAJCQkgICAgICBpbnQgaW5kZXgsIGludCBpbmZvX2xldmVsKQogewotCXN0cnVjdCBUQ1Bf
U2VydmVyX0luZm8gKnNlcnZlciA9IHRjb24tPnNlcy0+c2VydmVyOwogCXN0cnVjdCBzbWIyX3F1
ZXJ5X2RpcmVjdG9yeV9yZXEgKnJlcTsKIAl1bnNpZ25lZCBjaGFyICpidWZwdHI7CiAJX19sZTE2
IGFzdGVyaWtzID0gY3B1X3RvX2xlMTYoJyonKTsKQEAgLTQ1MjEsOCArNDU4NCw4IEBAIGludCBT
TUIyX3F1ZXJ5X2RpcmVjdG9yeV9pbml0KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsCiAJc3RydWN0
IGt2ZWMgKmlvdiA9IHJxc3QtPnJxX2lvdjsKIAlpbnQgbGVuLCByYzsKIAotCXJjID0gc21iMl9w
bGFpbl9yZXFfaW5pdChTTUIyX1FVRVJZX0RJUkVDVE9SWSwgdGNvbiwgKHZvaWQgKiopICZyZXEs
Ci0JCQkgICAgICZ0b3RhbF9sZW4pOworCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1FV
RVJZX0RJUkVDVE9SWSwgdGNvbiwgc2VydmVyLAorCQkJCSAodm9pZCAqKikgJnJlcSwgJnRvdGFs
X2xlbik7CiAJaWYgKHJjKQogCQlyZXR1cm4gcmM7CiAKQEAgLTQ2NjUsNiArNDcyOCw3IEBAIFNN
QjJfcXVlcnlfZGlyZWN0b3J5KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rj
b24gKnRjb24sCiAJc3RydWN0IGt2ZWMgcnNwX2lvdjsKIAlpbnQgcmMgPSAwOwogCXN0cnVjdCBj
aWZzX3NlcyAqc2VzID0gdGNvbi0+c2VzOworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZl
ciA9IGNpZnNfcGlja19jaGFubmVsKHNlcyk7CiAJaW50IGZsYWdzID0gMDsKIAogCWlmICghc2Vz
IHx8ICEoc2VzLT5zZXJ2ZXIpKQpAQCAtNDY3OCwxMyArNDc0MiwxNSBAQCBTTUIyX3F1ZXJ5X2Rp
cmVjdG9yeShjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAog
CXJxc3QucnFfaW92ID0gaW92OwogCXJxc3QucnFfbnZlYyA9IFNNQjJfUVVFUllfRElSRUNUT1JZ
X0lPVl9TSVpFOwogCi0JcmMgPSBTTUIyX3F1ZXJ5X2RpcmVjdG9yeV9pbml0KHhpZCwgdGNvbiwg
JnJxc3QsIHBlcnNpc3RlbnRfZmlkLAorCXJjID0gU01CMl9xdWVyeV9kaXJlY3RvcnlfaW5pdCh4
aWQsIHRjb24sIHNlcnZlciwKKwkJCQkgICAgICAgJnJxc3QsIHBlcnNpc3RlbnRfZmlkLAogCQkJ
CSAgICAgICB2b2xhdGlsZV9maWQsIGluZGV4LAogCQkJCSAgICAgICBzcmNoX2luZi0+aW5mb19s
ZXZlbCk7CiAJaWYgKHJjKQogCQlnb3RvIHFkaXJfZXhpdDsKIAotCXJjID0gY2lmc19zZW5kX3Jl
Y3YoeGlkLCBzZXMsICZycXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOworCXJj
ID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsIHNlcnZlciwKKwkJCSAgICAmcnFzdCwgJnJlc3Bf
YnVmdHlwZSwgZmxhZ3MsICZyc3BfaW92KTsKIAlyc3AgPSAoc3RydWN0IHNtYjJfcXVlcnlfZGly
ZWN0b3J5X3JzcCAqKXJzcF9pb3YuaW92X2Jhc2U7CiAKIAlpZiAocmMpIHsKQEAgLTQ3MjEsMTcg
KzQ3ODcsMTkgQEAgU01CMl9xdWVyeV9kaXJlY3RvcnkoY29uc3QgdW5zaWduZWQgaW50IHhpZCwg
c3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIH0KIAogaW50Ci1TTUIyX3NldF9pbmZvX2luaXQoc3Ry
dWN0IGNpZnNfdGNvbiAqdGNvbiwgc3RydWN0IHNtYl9ycXN0ICpycXN0LAotCSAgICAgICB1NjQg
cGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9maWQsIHUzMiBwaWQsIHU4IGluZm9fY2xhc3Ms
Ci0JICAgICAgIHU4IGluZm9fdHlwZSwgdTMyIGFkZGl0aW9uYWxfaW5mbywKLQkJdm9pZCAqKmRh
dGEsIHVuc2lnbmVkIGludCAqc2l6ZSkKK1NNQjJfc2V0X2luZm9faW5pdChzdHJ1Y3QgY2lmc190
Y29uICp0Y29uLCBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCisJCSAgIHN0cnVjdCBz
bWJfcnFzdCAqcnFzdCwKKwkJICAgdTY0IHBlcnNpc3RlbnRfZmlkLCB1NjQgdm9sYXRpbGVfZmlk
LCB1MzIgcGlkLAorCQkgICB1OCBpbmZvX2NsYXNzLCB1OCBpbmZvX3R5cGUsIHUzMiBhZGRpdGlv
bmFsX2luZm8sCisJCSAgIHZvaWQgKipkYXRhLCB1bnNpZ25lZCBpbnQgKnNpemUpCiB7CiAJc3Ry
dWN0IHNtYjJfc2V0X2luZm9fcmVxICpyZXE7CiAJc3RydWN0IGt2ZWMgKmlvdiA9IHJxc3QtPnJx
X2lvdjsKIAl1bnNpZ25lZCBpbnQgaSwgdG90YWxfbGVuOwogCWludCByYzsKIAotCXJjID0gc21i
Ml9wbGFpbl9yZXFfaW5pdChTTUIyX1NFVF9JTkZPLCB0Y29uLCAodm9pZCAqKikgJnJlcSwgJnRv
dGFsX2xlbik7CisJcmMgPSBzbWIyX3BsYWluX3JlcV9pbml0KFNNQjJfU0VUX0lORk8sIHRjb24s
IHNlcnZlciwKKwkJCQkgKHZvaWQgKiopICZyZXEsICZ0b3RhbF9sZW4pOwogCWlmIChyYykKIAkJ
cmV0dXJuIHJjOwogCkBAIC00NzgyLDkgKzQ4NTAsMTAgQEAgc2VuZF9zZXRfaW5mbyhjb25zdCB1
bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCWludCByYyA9IDA7CiAJ
aW50IHJlc3BfYnVmdHlwZTsKIAlzdHJ1Y3QgY2lmc19zZXMgKnNlcyA9IHRjb24tPnNlczsKKwlz
dHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbChzZXMpOwog
CWludCBmbGFncyA9IDA7CiAKLQlpZiAoIXNlcyB8fCAhKHNlcy0+c2VydmVyKSkKKwlpZiAoIXNl
cyB8fCAhc2VydmVyKQogCQlyZXR1cm4gLUVJTzsKIAogCWlmICghbnVtKQpAQCAtNDgwMSw3ICs0
ODcwLDggQEAgc2VuZF9zZXRfaW5mbyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lm
c190Y29uICp0Y29uLAogCXJxc3QucnFfaW92ID0gaW92OwogCXJxc3QucnFfbnZlYyA9IG51bTsK
IAotCXJjID0gU01CMl9zZXRfaW5mb19pbml0KHRjb24sICZycXN0LCBwZXJzaXN0ZW50X2ZpZCwg
dm9sYXRpbGVfZmlkLCBwaWQsCisJcmMgPSBTTUIyX3NldF9pbmZvX2luaXQodGNvbiwgc2VydmVy
LAorCQkJCSZycXN0LCBwZXJzaXN0ZW50X2ZpZCwgdm9sYXRpbGVfZmlkLCBwaWQsCiAJCQkJaW5m
b19jbGFzcywgaW5mb190eXBlLCBhZGRpdGlvbmFsX2luZm8sCiAJCQkJZGF0YSwgc2l6ZSk7CiAJ
aWYgKHJjKSB7CkBAIC00ODEwLDcgKzQ4ODAsOCBAQCBzZW5kX3NldF9pbmZvKGNvbnN0IHVuc2ln
bmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJfQogCiAKLQlyYyA9IGNpZnNf
c2VuZF9yZWN2KHhpZCwgc2VzLCAmcnFzdCwgJnJlc3BfYnVmdHlwZSwgZmxhZ3MsCisJcmMgPSBj
aWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9idWZ0
eXBlLCBmbGFncywKIAkJCSAgICAmcnNwX2lvdik7CiAJU01CMl9zZXRfaW5mb19mcmVlKCZycXN0
KTsKIAlyc3AgPSAoc3RydWN0IHNtYjJfc2V0X2luZm9fcnNwICopcnNwX2lvdi5pb3ZfYmFzZTsK
QEAgLTQ4NzMsNiArNDk0NCw3IEBAIFNNQjJfb3Bsb2NrX2JyZWFrKGNvbnN0IHVuc2lnbmVkIGlu
dCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJaW50IHJjOwogCXN0cnVjdCBzbWIyX29w
bG9ja19icmVhayAqcmVxID0gTlVMTDsKIAlzdHJ1Y3QgY2lmc19zZXMgKnNlcyA9IHRjb24tPnNl
czsKKwlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBjaWZzX3BpY2tfY2hhbm5lbChz
ZXMpOwogCWludCBmbGFncyA9IENJRlNfT0JSRUFLX09QOwogCXVuc2lnbmVkIGludCB0b3RhbF9s
ZW47CiAJc3RydWN0IGt2ZWMgaW92WzFdOwpAQCAtNDg4MCw4ICs0OTUyLDggQEAgU01CMl9vcGxv
Y2tfYnJlYWsoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwK
IAlpbnQgcmVzcF9idWZfdHlwZTsKIAogCWNpZnNfZGJnKEZZSSwgIlNNQjJfb3Bsb2NrX2JyZWFr
XG4iKTsKLQlyYyA9IHNtYjJfcGxhaW5fcmVxX2luaXQoU01CMl9PUExPQ0tfQlJFQUssIHRjb24s
ICh2b2lkICoqKSAmcmVxLAotCQkJICAgICAmdG90YWxfbGVuKTsKKwlyYyA9IHNtYjJfcGxhaW5f
cmVxX2luaXQoU01CMl9PUExPQ0tfQlJFQUssIHRjb24sIHNlcnZlciwKKwkJCQkgKHZvaWQgKiop
ICZyZXEsICZ0b3RhbF9sZW4pOwogCWlmIChyYykKIAkJcmV0dXJuIHJjOwogCkBAIC00OTAyLDcg
KzQ5NzQsOCBAQCBTTUIyX29wbG9ja19icmVhayhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1
Y3QgY2lmc190Y29uICp0Y29uLAogCXJxc3QucnFfaW92ID0gaW92OwogCXJxc3QucnFfbnZlYyA9
IDE7CiAKLQlyYyA9IGNpZnNfc2VuZF9yZWN2KHhpZCwgc2VzLCAmcnFzdCwgJnJlc3BfYnVmX3R5
cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2Vy
dmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9idWZfdHlwZSwgZmxhZ3MsICZyc3BfaW92KTsKIAlj
aWZzX3NtYWxsX2J1Zl9yZWxlYXNlKHJlcSk7CiAKIAlpZiAocmMpIHsKQEAgLTQ5NDUsOCArNTAx
OCwxMCBAQCBjb3B5X3Bvc2l4X2ZzX2luZm9fdG9fa3N0YXRmcyhGSUxFX1NZU1RFTV9QT1NJWF9J
TkZPICpyZXNwb25zZV9kYXRhLAogfQogCiBzdGF0aWMgaW50Ci1idWlsZF9xZnNfaW5mb19yZXEo
c3RydWN0IGt2ZWMgKmlvdiwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgaW50IGxldmVsLAotCQkg
ICBpbnQgb3V0YnVmX2xlbiwgdTY0IHBlcnNpc3RlbnRfZmlkLCB1NjQgdm9sYXRpbGVfZmlkKQor
YnVpbGRfcWZzX2luZm9fcmVxKHN0cnVjdCBrdmVjICppb3YsIHN0cnVjdCBjaWZzX3Rjb24gKnRj
b24sCisJCSAgIHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciwKKwkJICAgaW50IGxldmVs
LCBpbnQgb3V0YnVmX2xlbiwgdTY0IHBlcnNpc3RlbnRfZmlkLAorCQkgICB1NjQgdm9sYXRpbGVf
ZmlkKQogewogCWludCByYzsKIAlzdHJ1Y3Qgc21iMl9xdWVyeV9pbmZvX3JlcSAqcmVxOwpAQCAt
NDk1NCwxMSArNTAyOSwxMSBAQCBidWlsZF9xZnNfaW5mb19yZXEoc3RydWN0IGt2ZWMgKmlvdiwg
c3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgaW50IGxldmVsLAogCiAJY2lmc19kYmcoRllJLCAiUXVl
cnkgRlNJbmZvIGxldmVsICVkXG4iLCBsZXZlbCk7CiAKLQlpZiAoKHRjb24tPnNlcyA9PSBOVUxM
KSB8fCAodGNvbi0+c2VzLT5zZXJ2ZXIgPT0gTlVMTCkpCisJaWYgKCh0Y29uLT5zZXMgPT0gTlVM
TCkgfHwgc2VydmVyID09IE5VTEwpCiAJCXJldHVybiAtRUlPOwogCi0JcmMgPSBzbWIyX3BsYWlu
X3JlcV9pbml0KFNNQjJfUVVFUllfSU5GTywgdGNvbiwgKHZvaWQgKiopICZyZXEsCi0JCQkgICAg
ICZ0b3RhbF9sZW4pOworCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX1FVRVJZX0lORk8s
IHRjb24sIHNlcnZlciwKKwkJCQkgKHZvaWQgKiopICZyZXEsICZ0b3RhbF9sZW4pOwogCWlmIChy
YykKIAkJcmV0dXJuIHJjOwogCkBAIC00OTg4LDEwICs1MDYzLDEyIEBAIFNNQjMxMV9wb3NpeF9x
ZnNfaW5mbyhjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAog
CWludCByYyA9IDA7CiAJaW50IHJlc3BfYnVmdHlwZTsKIAlzdHJ1Y3QgY2lmc19zZXMgKnNlcyA9
IHRjb24tPnNlczsKKwlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBjaWZzX3BpY2tf
Y2hhbm5lbChzZXMpOwogCUZJTEVfU1lTVEVNX1BPU0lYX0lORk8gKmluZm8gPSBOVUxMOwogCWlu
dCBmbGFncyA9IDA7CiAKLQlyYyA9IGJ1aWxkX3Fmc19pbmZvX3JlcSgmaW92LCB0Y29uLCBGU19Q
T1NJWF9JTkZPUk1BVElPTiwKKwlyYyA9IGJ1aWxkX3Fmc19pbmZvX3JlcSgmaW92LCB0Y29uLCBz
ZXJ2ZXIsCisJCQkJRlNfUE9TSVhfSU5GT1JNQVRJT04sCiAJCQkJc2l6ZW9mKEZJTEVfU1lTVEVN
X1BPU0lYX0lORk8pLAogCQkJCXBlcnNpc3RlbnRfZmlkLCB2b2xhdGlsZV9maWQpOwogCWlmIChy
YykKQEAgLTUwMDQsNyArNTA4MSw4IEBAIFNNQjMxMV9wb3NpeF9xZnNfaW5mbyhjb25zdCB1bnNp
Z25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCXJxc3QucnFfaW92ID0gJmlv
djsKIAlycXN0LnJxX252ZWMgPSAxOwogCi0JcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywg
JnJxc3QsICZyZXNwX2J1ZnR5cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMgPSBjaWZzX3NlbmRf
cmVjdih4aWQsIHNlcywgc2VydmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFn
cywgJnJzcF9pb3YpOwogCWNpZnNfc21hbGxfYnVmX3JlbGVhc2UoaW92Lmlvdl9iYXNlKTsKIAlp
ZiAocmMpIHsKIAkJY2lmc19zdGF0c19mYWlsX2luYyh0Y29uLCBTTUIyX1FVRVJZX0lORk9fSEUp
OwpAQCAtNTAzNiwxMCArNTExNCwxMiBAQCBTTUIyX1FGU19pbmZvKGNvbnN0IHVuc2lnbmVkIGlu
dCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJaW50IHJjID0gMDsKIAlpbnQgcmVzcF9i
dWZ0eXBlOwogCXN0cnVjdCBjaWZzX3NlcyAqc2VzID0gdGNvbi0+c2VzOworCXN0cnVjdCBUQ1Bf
U2VydmVyX0luZm8gKnNlcnZlciA9IGNpZnNfcGlja19jaGFubmVsKHNlcyk7CiAJc3RydWN0IHNt
YjJfZnNfZnVsbF9zaXplX2luZm8gKmluZm8gPSBOVUxMOwogCWludCBmbGFncyA9IDA7CiAKLQly
YyA9IGJ1aWxkX3Fmc19pbmZvX3JlcSgmaW92LCB0Y29uLCBGU19GVUxMX1NJWkVfSU5GT1JNQVRJ
T04sCisJcmMgPSBidWlsZF9xZnNfaW5mb19yZXEoJmlvdiwgdGNvbiwgc2VydmVyLAorCQkJCUZT
X0ZVTExfU0laRV9JTkZPUk1BVElPTiwKIAkJCQlzaXplb2Yoc3RydWN0IHNtYjJfZnNfZnVsbF9z
aXplX2luZm8pLAogCQkJCXBlcnNpc3RlbnRfZmlkLCB2b2xhdGlsZV9maWQpOwogCWlmIChyYykK
QEAgLTUwNTIsNyArNTEzMiw4IEBAIFNNQjJfUUZTX2luZm8oY29uc3QgdW5zaWduZWQgaW50IHhp
ZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAlycXN0LnJxX2lvdiA9ICZpb3Y7CiAJcnFzdC5y
cV9udmVjID0gMTsKIAotCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsICZycXN0LCAmcmVz
cF9idWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOworCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBz
ZXMsIHNlcnZlciwKKwkJCSAgICAmcnFzdCwgJnJlc3BfYnVmdHlwZSwgZmxhZ3MsICZyc3BfaW92
KTsKIAljaWZzX3NtYWxsX2J1Zl9yZWxlYXNlKGlvdi5pb3ZfYmFzZSk7CiAJaWYgKHJjKSB7CiAJ
CWNpZnNfc3RhdHNfZmFpbF9pbmModGNvbiwgU01CMl9RVUVSWV9JTkZPX0hFKTsKQEAgLTUwODQs
NiArNTE2NSw3IEBAIFNNQjJfUUZTX2F0dHIoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0
IGNpZnNfdGNvbiAqdGNvbiwKIAlpbnQgcmMgPSAwOwogCWludCByZXNwX2J1ZnR5cGUsIG1heF9s
ZW4sIG1pbl9sZW47CiAJc3RydWN0IGNpZnNfc2VzICpzZXMgPSB0Y29uLT5zZXM7CisJc3RydWN0
IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyID0gY2lmc19waWNrX2NoYW5uZWwoc2VzKTsKIAl1bnNp
Z25lZCBpbnQgcnNwX2xlbiwgb2Zmc2V0OwogCWludCBmbGFncyA9IDA7CiAKQEAgLTUxMDQsNyAr
NTE4Niw4IEBAIFNNQjJfUUZTX2F0dHIoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNp
ZnNfdGNvbiAqdGNvbiwKIAkJcmV0dXJuIC1FSU5WQUw7CiAJfQogCi0JcmMgPSBidWlsZF9xZnNf
aW5mb19yZXEoJmlvdiwgdGNvbiwgbGV2ZWwsIG1heF9sZW4sCisJcmMgPSBidWlsZF9xZnNfaW5m
b19yZXEoJmlvdiwgdGNvbiwgc2VydmVyLAorCQkJCWxldmVsLCBtYXhfbGVuLAogCQkJCXBlcnNp
c3RlbnRfZmlkLCB2b2xhdGlsZV9maWQpOwogCWlmIChyYykKIAkJcmV0dXJuIHJjOwpAQCAtNTEx
Niw3ICs1MTk5LDggQEAgU01CMl9RRlNfYXR0cihjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1
Y3QgY2lmc190Y29uICp0Y29uLAogCXJxc3QucnFfaW92ID0gJmlvdjsKIAlycXN0LnJxX252ZWMg
PSAxOwogCi0JcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1ZnR5
cGUsIGZsYWdzLCAmcnNwX2lvdik7CisJcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHNlcywgc2Vy
dmVyLAorCQkJICAgICZycXN0LCAmcmVzcF9idWZ0eXBlLCBmbGFncywgJnJzcF9pb3YpOwogCWNp
ZnNfc21hbGxfYnVmX3JlbGVhc2UoaW92Lmlvdl9iYXNlKTsKIAlpZiAocmMpIHsKIAkJY2lmc19z
dGF0c19mYWlsX2luYyh0Y29uLCBTTUIyX1FVRVJZX0lORk9fSEUpOwpAQCAtNTE2OSwxMCArNTI1
MywxMiBAQCBzbWIyX2xvY2t2KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rj
b24gKnRjb24sCiAJdW5zaWduZWQgaW50IGNvdW50OwogCWludCBmbGFncyA9IENJRlNfTk9fUlNQ
X0JVRjsKIAl1bnNpZ25lZCBpbnQgdG90YWxfbGVuOworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8g
KnNlcnZlciA9IGNpZnNfcGlja19jaGFubmVsKHRjb24tPnNlcyk7CiAKIAljaWZzX2RiZyhGWUks
ICJzbWIyX2xvY2t2IG51bSBsb2NrICVkXG4iLCBudW1fbG9jayk7CiAKLQlyYyA9IHNtYjJfcGxh
aW5fcmVxX2luaXQoU01CMl9MT0NLLCB0Y29uLCAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7
CisJcmMgPSBzbWIyX3BsYWluX3JlcV9pbml0KFNNQjJfTE9DSywgdGNvbiwgc2VydmVyLAorCQkJ
CSAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7CiAJaWYgKHJjKQogCQlyZXR1cm4gcmM7CiAK
QEAgLTUxOTgsNyArNTI4NCw4IEBAIHNtYjJfbG9ja3YoY29uc3QgdW5zaWduZWQgaW50IHhpZCwg
c3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAlycXN0LnJxX2lvdiA9IGlvdjsKIAlycXN0LnJxX252
ZWMgPSAyOwogCi0JcmMgPSBjaWZzX3NlbmRfcmVjdih4aWQsIHRjb24tPnNlcywgJnJxc3QsICZy
ZXNwX2J1Zl90eXBlLCBmbGFncywKKwlyYyA9IGNpZnNfc2VuZF9yZWN2KHhpZCwgdGNvbi0+c2Vz
LCBzZXJ2ZXIsCisJCQkgICAgJnJxc3QsICZyZXNwX2J1Zl90eXBlLCBmbGFncywKIAkJCSAgICAm
cnNwX2lvdik7CiAJY2lmc19zbWFsbF9idWZfcmVsZWFzZShyZXEpOwogCWlmIChyYykgewpAQCAt
NTI0MywxMCArNTMzMCwxMSBAQCBTTUIyX2xlYXNlX2JyZWFrKGNvbnN0IHVuc2lnbmVkIGludCB4
aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCiAJaW50IHJlc3BfYnVmX3R5cGU7CiAJX191NjQg
KnBsZWFzZV9rZXlfaGlnaDsKIAlfX3U2NCAqcGxlYXNlX2tleV9sb3c7CisJc3RydWN0IFRDUF9T
ZXJ2ZXJfSW5mbyAqc2VydmVyID0gY2lmc19waWNrX2NoYW5uZWwodGNvbi0+c2VzKTsKIAogCWNp
ZnNfZGJnKEZZSSwgIlNNQjJfbGVhc2VfYnJlYWtcbiIpOwotCXJjID0gc21iMl9wbGFpbl9yZXFf
aW5pdChTTUIyX09QTE9DS19CUkVBSywgdGNvbiwgKHZvaWQgKiopICZyZXEsCi0JCQkgICAgICZ0
b3RhbF9sZW4pOworCXJjID0gc21iMl9wbGFpbl9yZXFfaW5pdChTTUIyX09QTE9DS19CUkVBSywg
dGNvbiwgc2VydmVyLAorCQkJCSAodm9pZCAqKikgJnJlcSwgJnRvdGFsX2xlbik7CiAJaWYgKHJj
KQogCQlyZXR1cm4gcmM7CiAKQEAgLTUyNjksNyArNTM1Nyw4IEBAIFNNQjJfbGVhc2VfYnJlYWso
Y29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwKIAlycXN0LnJx
X2lvdiA9IGlvdjsKIAlycXN0LnJxX252ZWMgPSAxOwogCi0JcmMgPSBjaWZzX3NlbmRfcmVjdih4
aWQsIHNlcywgJnJxc3QsICZyZXNwX2J1Zl90eXBlLCBmbGFncywgJnJzcF9pb3YpOworCXJjID0g
Y2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsIHNlcnZlciwKKwkJCSAgICAmcnFzdCwgJnJlc3BfYnVm
X3R5cGUsIGZsYWdzLCAmcnNwX2lvdik7CiAJY2lmc19zbWFsbF9idWZfcmVsZWFzZShyZXEpOwog
CiAJcGxlYXNlX2tleV9sb3cgPSAoX191NjQgKilsZWFzZV9rZXk7CmRpZmYgLS1naXQgYS9mcy9j
aWZzL3NtYjJwcm90by5oIGIvZnMvY2lmcy9zbWIycHJvdG8uaAppbmRleCAwODdkNWYxNDMyMGIu
LjcxYmE3NDc5MmM5ZSAxMDA2NDQKLS0tIGEvZnMvY2lmcy9zbWIycHJvdG8uaAorKysgYi9mcy9j
aWZzL3NtYjJwcm90by5oCkBAIC0xNDMsNyArMTQzLDkgQEAgZXh0ZXJuIGludCBTTUIyX29wZW4o
Y29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfb3Blbl9wYXJtcyAqb3Bhcm1zLAog
CQkgICAgIHN0cnVjdCBzbWIyX2ZpbGVfYWxsX2luZm8gKmJ1ZiwKIAkJICAgICBzdHJ1Y3QgY3Jl
YXRlX3Bvc2l4X3JzcCAqcG9zaXgsCiAJCSAgICAgc3RydWN0IGt2ZWMgKmVycl9pb3YsIGludCAq
cmVzcF9idWZ0eXBlKTsKLWV4dGVybiBpbnQgU01CMl9vcGVuX2luaXQoc3RydWN0IGNpZnNfdGNv
biAqdGNvbiwgc3RydWN0IHNtYl9ycXN0ICpycXN0LAorZXh0ZXJuIGludCBTTUIyX29wZW5faW5p
dChzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAorCQkJICBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpz
ZXJ2ZXIsCisJCQkgIHN0cnVjdCBzbWJfcnFzdCAqcnFzdCwKIAkJCSAgX191OCAqb3Bsb2NrLCBz
dHJ1Y3QgY2lmc19vcGVuX3Bhcm1zICpvcGFybXMsCiAJCQkgIF9fbGUxNiAqcGF0aCk7CiBleHRl
cm4gdm9pZCBTTUIyX29wZW5fZnJlZShzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QpOwpAQCAtMTUxLDcg
KzE1Myw5IEBAIGV4dGVybiBpbnQgU01CMl9pb2N0bChjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBz
dHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCQkgICAgIHU2NCBwZXJzaXN0ZW50X2ZpZCwgdTY0IHZv
bGF0aWxlX2ZpZCwgdTMyIG9wY29kZSwKIAkJICAgICBib29sIGlzX2ZzY3RsLCBjaGFyICppbl9k
YXRhLCB1MzIgaW5kYXRhbGVuLCB1MzIgbWF4b3V0bGVuLAogCQkgICAgIGNoYXIgKipvdXRfZGF0
YSwgdTMyICpwbGVuIC8qIHJldHVybmVkIGRhdGEgbGVuICovKTsKLWV4dGVybiBpbnQgU01CMl9p
b2N0bF9pbml0KHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sIHN0cnVjdCBzbWJfcnFzdCAqcnFzdCwK
K2V4dGVybiBpbnQgU01CMl9pb2N0bF9pbml0KHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCisJCQkg
ICBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCisJCQkgICBzdHJ1Y3Qgc21iX3Jxc3Qg
KnJxc3QsCiAJCQkgICB1NjQgcGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9maWQsIHUzMiBv
cGNvZGUsCiAJCQkgICBib29sIGlzX2ZzY3RsLCBjaGFyICppbl9kYXRhLCB1MzIgaW5kYXRhbGVu
LAogCQkJICAgX191MzIgbWF4X3Jlc3BvbnNlX3NpemUpOwpAQCAtMTY1LDE5ICsxNjksMjUgQEAg
ZXh0ZXJuIGludCBfX1NNQjJfY2xvc2UoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNp
ZnNfdGNvbiAqdGNvbiwKIAkJCXN0cnVjdCBzbWIyX2ZpbGVfbmV0d29ya19vcGVuX2luZm8gKnBi
dWYpOwogZXh0ZXJuIGludCBTTUIyX2Nsb3NlKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVj
dCBjaWZzX3Rjb24gKnRjb24sCiAJCSAgICAgIHU2NCBwZXJzaXN0ZW50X2ZpbGVfaWQsIHU2NCB2
b2xhdGlsZV9maWxlX2lkKTsKLWV4dGVybiBpbnQgU01CMl9jbG9zZV9pbml0KHN0cnVjdCBjaWZz
X3Rjb24gKnRjb24sIHN0cnVjdCBzbWJfcnFzdCAqcnFzdCwKLQkJICAgICAgdTY0IHBlcnNpc3Rl
bnRfZmlkLCB1NjQgdm9sYXRpbGVfZmlkLCBib29sIHF1ZXJ5X2F0dHJzKTsKK2V4dGVybiBpbnQg
U01CMl9jbG9zZV9pbml0KHN0cnVjdCBjaWZzX3Rjb24gKnRjb24sCisJCQkgICBzdHJ1Y3QgVENQ
X1NlcnZlcl9JbmZvICpzZXJ2ZXIsCisJCQkgICBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCisJCQkg
ICB1NjQgcGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9maWQsCisJCQkgICBib29sIHF1ZXJ5
X2F0dHJzKTsKIGV4dGVybiB2b2lkIFNNQjJfY2xvc2VfZnJlZShzdHJ1Y3Qgc21iX3Jxc3QgKnJx
c3QpOwogZXh0ZXJuIGludCBTTUIyX2ZsdXNoKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVj
dCBjaWZzX3Rjb24gKnRjb24sCiAJCSAgICAgIHU2NCBwZXJzaXN0ZW50X2ZpbGVfaWQsIHU2NCB2
b2xhdGlsZV9maWxlX2lkKTsKIGV4dGVybiBpbnQgU01CMl9mbHVzaF9pbml0KGNvbnN0IHVuc2ln
bmVkIGludCB4aWQsIHN0cnVjdCBzbWJfcnFzdCAqcnFzdCwKIAkJCSAgIHN0cnVjdCBjaWZzX3Rj
b24gKnRjb24sCisJCQkgICBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCiAJCQkgICB1
NjQgcGVyc2lzdGVudF9maWxlX2lkLCB1NjQgdm9sYXRpbGVfZmlsZV9pZCk7CiBleHRlcm4gdm9p
ZCBTTUIyX2ZsdXNoX2ZyZWUoc3RydWN0IHNtYl9ycXN0ICpycXN0KTsKIGV4dGVybiBpbnQgU01C
Ml9xdWVyeV9pbmZvKGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3Rjb24gKnRj
b24sCiAJCQkgICB1NjQgcGVyc2lzdGVudF9maWxlX2lkLCB1NjQgdm9sYXRpbGVfZmlsZV9pZCwK
IAkJCSAgIHN0cnVjdCBzbWIyX2ZpbGVfYWxsX2luZm8gKmRhdGEpOwotZXh0ZXJuIGludCBTTUIy
X3F1ZXJ5X2luZm9faW5pdChzdHJ1Y3QgY2lmc190Y29uICp0Y29uLCBzdHJ1Y3Qgc21iX3Jxc3Qg
KnJxc3QsCitleHRlcm4gaW50IFNNQjJfcXVlcnlfaW5mb19pbml0KHN0cnVjdCBjaWZzX3Rjb24g
KnRjb24sCisJCQkJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAorCQkJCXN0cnVjdCBz
bWJfcnFzdCAqcnFzdCwKIAkJCQl1NjQgcGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9maWQs
CiAJCQkJdTggaW5mb19jbGFzcywgdTggaW5mb190eXBlLAogCQkJCXUzMiBhZGRpdGlvbmFsX2lu
Zm8sIHNpemVfdCBvdXRwdXRfbGVuLApAQCAtMjAxLDYgKzIxMSw3IEBAIGV4dGVybiBpbnQgU01C
Ml9xdWVyeV9kaXJlY3RvcnkoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfdGNv
biAqdGNvbiwKIAkJCQl1NjQgcGVyc2lzdGVudF9maWQsIHU2NCB2b2xhdGlsZV9maWQsIGludCBp
bmRleCwKIAkJCQlzdHJ1Y3QgY2lmc19zZWFyY2hfaW5mbyAqc3JjaF9pbmYpOwogZXh0ZXJuIGlu
dCBTTUIyX3F1ZXJ5X2RpcmVjdG9yeV9pbml0KHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZz
X3Rjb24gKnRjb24sCisJCQkJICAgICBzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCiAJ
CQkJICAgICBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCiAJCQkJICAgICB1NjQgcGVyc2lzdGVudF9m
aWQsIHU2NCB2b2xhdGlsZV9maWQsCiAJCQkJICAgICBpbnQgaW5kZXgsIGludCBpbmZvX2xldmVs
KTsKQEAgLTIwOCw3ICsyMTksOSBAQCBleHRlcm4gdm9pZCBTTUIyX3F1ZXJ5X2RpcmVjdG9yeV9m
cmVlKHN0cnVjdCBzbWJfcnFzdCAqcnFzdCk7CiBleHRlcm4gaW50IFNNQjJfc2V0X2VvZihjb25z
dCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc190Y29uICp0Y29uLAogCQkJdTY0IHBlcnNp
c3RlbnRfZmlkLCB1NjQgdm9sYXRpbGVfZmlkLCB1MzIgcGlkLAogCQkJX19sZTY0ICplb2YpOwot
ZXh0ZXJuIGludCBTTUIyX3NldF9pbmZvX2luaXQoc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgc3Ry
dWN0IHNtYl9ycXN0ICpycXN0LAorZXh0ZXJuIGludCBTTUIyX3NldF9pbmZvX2luaXQoc3RydWN0
IGNpZnNfdGNvbiAqdGNvbiwKKwkJCSAgICAgIHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZl
ciwKKwkJCSAgICAgIHN0cnVjdCBzbWJfcnFzdCAqcnFzdCwKIAkJCSAgICAgIHU2NCBwZXJzaXN0
ZW50X2ZpZCwgdTY0IHZvbGF0aWxlX2ZpZCwgdTMyIHBpZCwKIAkJCSAgICAgIHU4IGluZm9fY2xh
c3MsIHU4IGluZm9fdHlwZSwgdTMyIGFkZGl0aW9uYWxfaW5mbywKIAkJCSAgICAgIHZvaWQgKipk
YXRhLCB1bnNpZ25lZCBpbnQgKnNpemUpOwpkaWZmIC0tZ2l0IGEvZnMvY2lmcy90cmFuc3BvcnQu
YyBiL2ZzL2NpZnMvdHJhbnNwb3J0LmMKaW5kZXggNGQ0Y2IyNmQyYWUxLi4xMDBkMDRhZjYyYjEg
MTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvdHJhbnNwb3J0LmMKKysrIGIvZnMvY2lmcy90cmFuc3BvcnQu
YwpAQCAtMTAyMCw2ICsxMDIwLDcgQEAgc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqY2lmc19waWNr
X2NoYW5uZWwoc3RydWN0IGNpZnNfc2VzICpzZXMpCiAKIGludAogY29tcG91bmRfc2VuZF9yZWN2
KGNvbnN0IHVuc2lnbmVkIGludCB4aWQsIHN0cnVjdCBjaWZzX3NlcyAqc2VzLAorCQkgICBzdHJ1
Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCiAJCSAgIGNvbnN0IGludCBmbGFncywgY29uc3Qg
aW50IG51bV9ycXN0LCBzdHJ1Y3Qgc21iX3Jxc3QgKnJxc3QsCiAJCSAgIGludCAqcmVzcF9idWZf
dHlwZSwgc3RydWN0IGt2ZWMgKnJlc3BfaW92KQogewpAQCAtMTAzMSwyMCArMTAzMiwxNyBAQCBj
b21wb3VuZF9zZW5kX3JlY3YoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0IGNpZnNfc2Vz
ICpzZXMsCiAJfTsKIAl1bnNpZ25lZCBpbnQgaW5zdGFuY2U7CiAJY2hhciAqYnVmOwotCXN0cnVj
dCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlcjsKIAogCW9wdHlwZSA9IGZsYWdzICYgQ0lGU19PUF9N
QVNLOwogCiAJZm9yIChpID0gMDsgaSA8IG51bV9ycXN0OyBpKyspCiAJCXJlc3BfYnVmX3R5cGVb
aV0gPSBDSUZTX05PX0JVRkZFUjsgIC8qIG5vIHJlc3BvbnNlIGJ1ZiB5ZXQgKi8KIAotCWlmICgo
c2VzID09IE5VTEwpIHx8IChzZXMtPnNlcnZlciA9PSBOVUxMKSkgeworCWlmICghc2VzIHx8ICFz
ZXMtPnNlcnZlciB8fCAhc2VydmVyKSB7CiAJCWNpZnNfZGJnKFZGUywgIk51bGwgc2Vzc2lvblxu
Iik7CiAJCXJldHVybiAtRUlPOwogCX0KIAotCXNlcnZlciA9IGNpZnNfcGlja19jaGFubmVsKHNl
cyk7Ci0KIAlpZiAoc2VydmVyLT50Y3BTdGF0dXMgPT0gQ2lmc0V4aXRpbmcpCiAJCXJldHVybiAt
RU5PRU5UOwogCkBAIC0xMjM5LDExICsxMjM3LDEyIEBAIGNvbXBvdW5kX3NlbmRfcmVjdihjb25z
dCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19zZXMgKnNlcywKIAogaW50CiBjaWZzX3Nl
bmRfcmVjdihjb25zdCB1bnNpZ25lZCBpbnQgeGlkLCBzdHJ1Y3QgY2lmc19zZXMgKnNlcywKKwkg
ICAgICAgc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAogCSAgICAgICBzdHJ1Y3Qgc21i
X3Jxc3QgKnJxc3QsIGludCAqcmVzcF9idWZfdHlwZSwgY29uc3QgaW50IGZsYWdzLAogCSAgICAg
ICBzdHJ1Y3Qga3ZlYyAqcmVzcF9pb3YpCiB7Ci0JcmV0dXJuIGNvbXBvdW5kX3NlbmRfcmVjdih4
aWQsIHNlcywgZmxhZ3MsIDEsIHJxc3QsIHJlc3BfYnVmX3R5cGUsCi0JCQkJICByZXNwX2lvdik7
CisJcmV0dXJuIGNvbXBvdW5kX3NlbmRfcmVjdih4aWQsIHNlcywgc2VydmVyLCBmbGFncywgMSwK
KwkJCQkgIHJxc3QsIHJlc3BfYnVmX3R5cGUsIHJlc3BfaW92KTsKIH0KIAogaW50CkBAIC0xMjc4
LDcgKzEyNzcsOCBAQCBTZW5kUmVjZWl2ZTIoY29uc3QgdW5zaWduZWQgaW50IHhpZCwgc3RydWN0
IGNpZnNfc2VzICpzZXMsCiAJcnFzdC5ycV9pb3YgPSBuZXdfaW92OwogCXJxc3QucnFfbnZlYyA9
IG5fdmVjICsgMTsKIAotCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBzZXMsICZycXN0LCByZXNw
X2J1Zl90eXBlLCBmbGFncywgcmVzcF9pb3YpOworCXJjID0gY2lmc19zZW5kX3JlY3YoeGlkLCBz
ZXMsIHNlcy0+c2VydmVyLAorCQkJICAgICZycXN0LCByZXNwX2J1Zl90eXBlLCBmbGFncywgcmVz
cF9pb3YpOwogCWlmIChuX3ZlYyArIDEgPiBDSUZTX01BWF9JT1ZfU0laRSkKIAkJa2ZyZWUobmV3
X2lvdik7CiAJcmV0dXJuIHJjOwotLSAKMi4yNS4xCgo=
--00000000000023432d05a6f6904b--

