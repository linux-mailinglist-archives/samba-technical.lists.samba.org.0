Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id 5689CC12E3
	for <lists+samba-technical@lfdr.de>; Sun, 29 Sep 2019 04:58:13 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=Cc:From:List-Id:Date:To:Subject;
	bh=pMgs4rqYaQYAzvjKVZX+kKTbzTN7OfJq2U1p8zZjMCw=; b=EucDXtYQt5FWk0BDkGOIQZnhnG
	8IIZ2CpJZzyWV6SixKZkW6nH5U0PAF7M+Ghs/WyrRg/nkVoAeAEkCl5EidvdzAavyRVGyjm+li91S
	eRhJsnEMIDJqZJfrWC6aFnbh4g9fF3B51fBLDRGbkJPmjJKHNH/rZOPgFe/h0R9Q03fyRDK5LkBqZ
	mTUBw9yeOgghj5OcdtiI4TAhyC8nodcHpIrpb3eo29R/vCrTAnJPkm3tuB/pYA6kRyPpkZjnFTMsm
	dKXcJJZxEGRV9KwPFhNuK1JfsCjXFlC7ppQtrViB08ZtzJpkLMI2R1eZiuyvxKyRiCzdIrLTvGpuL
	ZOP7P70g==;
Received: from localhost ([::1]:37924 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1iEPOP-009a0k-F4; Sun, 29 Sep 2019 02:57:01 +0000
Received: from latitanza.investici.org ([82.94.249.234]:31847) 
 by hr1.samba.org with esmtps (TLS1.2:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1iEPOI-009a0Z-M7
 for samba-technical@lists.samba.org; Sun, 29 Sep 2019 02:56:57 +0000
Received: from mx3.investici.org (localhost [127.0.0.1])
 by latitanza.investici.org (Postfix) with ESMTP id 458201205B0;
 Sun, 29 Sep 2019 02:56:50 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cryptolab.net;
 s=stigmate; t=1569725810;
 bh=pMgs4rqYaQYAzvjKVZX+kKTbzTN7OfJq2U1p8zZjMCw=;
 h=Subject:From:To:Cc:Date:In-Reply-To:References:From;
 b=ib44z8uMRRGdt+1F3QtU1bwnANKdF5az7KYFMCry3aQqoUHb5m9RwN7XbL+xaqO7n
 iuguUTNvhcDoT0hy1UGo+SMpnHlNHnbDJ8Ly7hYYH4lTgyvZ88hfcb22Ur6/XwrfvG
 ISpTEdUWv0TMnJXv3Ya11M9RyRlnebAWYEB+thaE=
Received: from [82.94.249.234] (mx3.investici.org [82.94.249.234])
 (Authenticated sender: anoopcs@autistici.org) by localhost (Postfix) with
 ESMTPSA id 122DE120517; Sun, 29 Sep 2019 02:56:46 +0000 (UTC)
Message-ID: <e9469e1d026b34cf46c0012a463a2fbe610ffd17.camel@cryptolab.net>
Subject: Re: Implementing SMB_VFS_FCNTL in Samba
To: samba-technical <samba-technical@lists.samba.org>
Date: Sun, 29 Sep 2019 08:26:39 +0530
In-Reply-To: <98add807a4ac55e5f401522fbdfd47ddf2358d16.camel@cryptolab.net>
References: <7024afc6236a656134f867288cdb37579425e3ee.camel@cryptolab.net>
 <20190923153107.GA4325@jeremy-ThinkPad-X1>
 <98add807a4ac55e5f401522fbdfd47ddf2358d16.camel@cryptolab.net>
Content-Type: multipart/mixed; boundary="=-OdM4pf1rbLs6a7qr1pys"
User-Agent: Evolution 3.32.4 (3.32.4-1.fc30) 
MIME-Version: 1.0
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Anoop C S via samba-technical <samba-technical@lists.samba.org>
Reply-To: Anoop C S <anoopcs@cryptolab.net>
Cc: Jeremy Allison <jra@samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>


--=-OdM4pf1rbLs6a7qr1pys
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit

On Thu, 2019-09-26 at 00:09 +0530, Anoop C S via samba-technical wrote:
> On Mon, 2019-09-23 at 08:31 -0700, Jeremy Allison via samba-technical
> wrote:
> > On Mon, Sep 23, 2019 at 02:51:24PM +0530, Anoop C S wrote:
> > > Hi all,
> > > 
> > > I am attaching a patch as an attempt to implement
> > > SMB_VFS_FCNTL(for
> > > a
> > > background see https://bugzilla.samba.org/show_bug.cgi?id=14060).
> > > But I
> > > have the following question.
> > > 
> > > int fcntl(int fd, int cmd, ... /* arg */ );
> > > 
> > > As per man page, fcntl(2) system call can accept a third optional
> > > argument. If present it can be of type int, struct flock *,
> > > struct
> > > f_owner_ex * or uint64_t *. Our current SMB_VFS_LOCK and
> > > SMB_VFS_GETLOCK takes care of "Advisory record locking" and "Open
> > > file
> > > description locks" commands which requires third argument of type
> > > struct flock *. Other important fact here to notice is that in
> > > most
> > > cases the required third argument type is int. The patch I have
> > > prepared right now assumes third argument type to be int. 
> > > 
> > > So should we rename the call to something else(keeping third
> > > argument
> > > as int) or change the implementation to consider optional third
> > > argument as variable?
> > 
> > I think we need a varargs argument here like the real fcntl
> > definition.
> 
> Please find the attached patch in the above suggested direction. For
> now it is compile tested only. I will respond back afterwards with
> some basic testing results.

An unexpected crash(during runtime) had to be resolved and Gitlab CI
pipeline revealed some missing changes. Attaching the patch set(near-
to-final) which successfully completed the following pipeline:

https://gitlab.com/samba-team/devel/samba/pipelines/85180275

Few recent fcntl() cmd flags needs to be conditionally checked inside
vfs_default which should be the only missing here. 

--=-OdM4pf1rbLs6a7qr1pys
Content-Disposition: attachment; filename="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"
Content-Transfer-Encoding: base64
Content-Type: text/x-patch; name="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"; charset="UTF-8"

RnJvbSAwZWJmMDczMWE3NzZmYzY2ZWZjNDljMjE2NDJmYmI3Y2UyNGJkNzMyIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbm9vcCBDIFMgPGFub29wY3NAcmVkaGF0LmNvbT4KRGF0ZTog
RnJpLCAyNyBTZXAgMjAxOSAxMToxOTozNyArMDUzMApTdWJqZWN0OiBbUEFUQ0ggMS8yXSBzMzog
VkZTOiBBZGQgU01CX1ZGU19GQ05UTAoKU2lnbmVkLW9mZi1ieTogQW5vb3AgQyBTIDxhbm9vcGNz
QHJlZGhhdC5jb20+Ci0tLQogZXhhbXBsZXMvVkZTL3NrZWxfb3BhcXVlLmMgICAgICAgICAgICB8
ICA4ICsrKysrCiBleGFtcGxlcy9WRlMvc2tlbF90cmFuc3BhcmVudC5jICAgICAgIHwgMTYgKysr
KysrKysrKwogc291cmNlMy9pbmNsdWRlL3Byb3RvLmggICAgICAgICAgICAgICB8ICAxICsKIHNv
dXJjZTMvaW5jbHVkZS9zbWJwcm9maWxlLmggICAgICAgICAgfCAgMSArCiBzb3VyY2UzL2luY2x1
ZGUvdmZzLmggICAgICAgICAgICAgICAgIHwgIDcgKysrKysKIHNvdXJjZTMvaW5jbHVkZS92ZnNf
bWFjcm9zLmggICAgICAgICAgfCAgNSArKysrCiBzb3VyY2UzL2xpYi9zeXN0ZW0uYyAgICAgICAg
ICAgICAgICAgIHwgMTQgKysrKysrKysrCiBzb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYyAg
ICAgICAgIHwgNDIgKysrKysrKysrKysrKysrKysrKysrKysrKysrCiBzb3VyY2UzL21vZHVsZXMv
dmZzX2Z1bGxfYXVkaXQuYyAgICAgIHwgMjEgKysrKysrKysrKysrKysKIHNvdXJjZTMvbW9kdWxl
cy92ZnNfbm90X2ltcGxlbWVudGVkLmMgfCAgOSArKysrKysKIHNvdXJjZTMvbW9kdWxlcy92ZnNf
dGltZV9hdWRpdC5jICAgICAgfCAyNiArKysrKysrKysrKysrKysrKwogc291cmNlMy9zbWJkL3Zm
cy5jICAgICAgICAgICAgICAgICAgICB8IDE1ICsrKysrKysrKysKIDEyIGZpbGVzIGNoYW5nZWQs
IDE2NSBpbnNlcnRpb25zKCspCgpkaWZmIC0tZ2l0IGEvZXhhbXBsZXMvVkZTL3NrZWxfb3BhcXVl
LmMgYi9leGFtcGxlcy9WRlMvc2tlbF9vcGFxdWUuYwppbmRleCA1OTgwNDY3NWM4ZS4uYmUzNzcz
OTY1ZTcgMTAwNjQ0Ci0tLSBhL2V4YW1wbGVzL1ZGUy9za2VsX29wYXF1ZS5jCisrKyBiL2V4YW1w
bGVzL1ZGUy9za2VsX29wYXF1ZS5jCkBAIC00NDQsNiArNDQ0LDEzIEBAIHN0YXRpYyBpbnQgc2tl
bF9rZXJuZWxfZmxvY2soc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJcmV0dXJu
IC0xOwogfQogCitzdGF0aWMgaW50IHNrZWxfZmNudGwoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCisJCSAgICAgIHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGNtZCwgdmFf
bGlzdCBjbWRfYXJnKQoreworCWVycm5vID0gRU5PU1lTOworCXJldHVybiAtMTsKK30KKwogc3Rh
dGljIGludCBza2VsX2xpbnV4X3NldGxlYXNlKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFu
ZGxlLAogCQkJICAgICAgIHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlwZSkK
IHsKQEAgLTEwOTEsNiArMTA5OCw3IEBAIHN0YXRpYyBzdHJ1Y3QgdmZzX2ZuX3BvaW50ZXJzIHNr
ZWxfb3BhcXVlX2ZucyA9IHsKIAkuZmFsbG9jYXRlX2ZuID0gc2tlbF9mYWxsb2NhdGUsCiAJLmxv
Y2tfZm4gPSBza2VsX2xvY2ssCiAJLmtlcm5lbF9mbG9ja19mbiA9IHNrZWxfa2VybmVsX2Zsb2Nr
LAorCS5mY250bF9mbiA9IHNrZWxfZmNudGwsCiAJLmxpbnV4X3NldGxlYXNlX2ZuID0gc2tlbF9s
aW51eF9zZXRsZWFzZSwKIAkuZ2V0bG9ja19mbiA9IHNrZWxfZ2V0bG9jaywKIAkuc3ltbGlua2F0
X2ZuID0gc2tlbF9zeW1saW5rYXQsCmRpZmYgLS1naXQgYS9leGFtcGxlcy9WRlMvc2tlbF90cmFu
c3BhcmVudC5jIGIvZXhhbXBsZXMvVkZTL3NrZWxfdHJhbnNwYXJlbnQuYwppbmRleCBjNzNjMmEy
NjkyYi4uMDYzYWY4ZjNhZWQgMTAwNjQ0Ci0tLSBhL2V4YW1wbGVzL1ZGUy9za2VsX3RyYW5zcGFy
ZW50LmMKKysrIGIvZXhhbXBsZXMvVkZTL3NrZWxfdHJhbnNwYXJlbnQuYwpAQCAtNTUyLDYgKzU1
MiwyMSBAQCBzdGF0aWMgaW50IHNrZWxfa2VybmVsX2Zsb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0
cnVjdCAqaGFuZGxlLAogCXJldHVybiBTTUJfVkZTX05FWFRfS0VSTkVMX0ZMT0NLKGhhbmRsZSwg
ZnNwLCBzaGFyZV9tb2RlLCBhY2Nlc3NfbWFzayk7CiB9CiAKK3N0YXRpYyBpbnQgc2tlbF9mY250
bChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJICAgICAgc3RydWN0IGZpbGVz
X3N0cnVjdCAqZnNwLCBpbnQgY21kLCB2YV9saXN0IGNtZF9hcmcpCit7CisJdm9pZCAqYXJnOwor
CXZhX2xpc3QgZHVwX2NtZF9hcmc7CisJaW50IHJlc3VsdDsKKworCXZhX2NvcHkoZHVwX2NtZF9h
cmcsIGNtZF9hcmcpOworCWFyZyA9IHZhX2FyZyhkdXBfY21kX2FyZywgdm9pZCAqKTsKKwlyZXN1
bHQgPSBTTUJfVkZTX05FWFRfRkNOVEwoaGFuZGxlLCBmc3AsIGNtZCwgYXJnKTsKKwl2YV9lbmQo
ZHVwX2NtZF9hcmcpOworCisJcmV0dXJuIHJlc3VsdDsKK30KKwogc3RhdGljIGludCBza2VsX2xp
bnV4X3NldGxlYXNlKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCQkJICAgICAg
IHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlwZSkKIHsKQEAgLTEzNzksNiAr
MTM5NCw3IEBAIHN0YXRpYyBzdHJ1Y3QgdmZzX2ZuX3BvaW50ZXJzIHNrZWxfdHJhbnNwYXJlbnRf
Zm5zID0gewogCS5mYWxsb2NhdGVfZm4gPSBza2VsX2ZhbGxvY2F0ZSwKIAkubG9ja19mbiA9IHNr
ZWxfbG9jaywKIAkua2VybmVsX2Zsb2NrX2ZuID0gc2tlbF9rZXJuZWxfZmxvY2ssCisJLmZjbnRs
X2ZuID0gc2tlbF9mY250bCwKIAkubGludXhfc2V0bGVhc2VfZm4gPSBza2VsX2xpbnV4X3NldGxl
YXNlLAogCS5nZXRsb2NrX2ZuID0gc2tlbF9nZXRsb2NrLAogCS5zeW1saW5rYXRfZm4gPSBza2Vs
X3N5bWxpbmthdCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oIGIvc291cmNl
My9pbmNsdWRlL3Byb3RvLmgKaW5kZXggMGQwMmYzOGZjOGIuLmQ0MjY3YTg0YTY1IDEwMDY0NAot
LS0gYS9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaAorKysgYi9zb3VyY2UzL2luY2x1ZGUvcHJvdG8u
aApAQCAtMjE5LDYgKzIxOSw3IEBAIHNzaXplX3Qgc3lzX3NlbmQoaW50IHMsIGNvbnN0IHZvaWQg
Km1zZywgc2l6ZV90IGxlbiwgaW50IGZsYWdzKTsKIHNzaXplX3Qgc3lzX3JlY3Zmcm9tKGludCBz
LCB2b2lkICpidWYsIHNpemVfdCBsZW4sIGludCBmbGFncywgc3RydWN0IHNvY2thZGRyICpmcm9t
LCBzb2NrbGVuX3QgKmZyb21sZW4pOwogaW50IHN5c19mY250bF9wdHIoaW50IGZkLCBpbnQgY21k
LCB2b2lkICphcmcpOwogaW50IHN5c19mY250bF9sb25nKGludCBmZCwgaW50IGNtZCwgbG9uZyBh
cmcpOworaW50IHN5c19mY250bF9pbnQoaW50IGZkLCBpbnQgY21kLCBpbnQgYXJnKTsKIHZvaWQg
dXBkYXRlX3N0YXRfZXhfbXRpbWUoc3RydWN0IHN0YXRfZXggKmRzdCwgc3RydWN0IHRpbWVzcGVj
IHdyaXRlX3RzKTsKIHZvaWQgdXBkYXRlX3N0YXRfZXhfaXRpbWUoc3RydWN0IHN0YXRfZXggKmRz
dCwgc3RydWN0IHRpbWVzcGVjIGl0aW1lKTsKIHZvaWQgdXBkYXRlX3N0YXRfZXhfY3JlYXRlX3Rp
bWUoc3RydWN0IHN0YXRfZXggKmRzdCwgc3RydWN0IHRpbWVzcGVjIGNyZWF0ZV90aW1lKTsKZGlm
ZiAtLWdpdCBhL3NvdXJjZTMvaW5jbHVkZS9zbWJwcm9maWxlLmggYi9zb3VyY2UzL2luY2x1ZGUv
c21icHJvZmlsZS5oCmluZGV4IGNjNTRkZWEyNzEwLi5lYTJhMjlhMDc1OCAxMDA2NDQKLS0tIGEv
c291cmNlMy9pbmNsdWRlL3NtYnByb2ZpbGUuaAorKysgYi9zb3VyY2UzL2luY2x1ZGUvc21icHJv
ZmlsZS5oCkBAIC04MCw2ICs4MCw3IEBAIHN0cnVjdCB0ZXZlbnRfY29udGV4dDsKIAlTTUJQUk9G
SUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfZmFsbG9jYXRlKSBcCiAJU01CUFJPRklMRV9TVEFUU19C
QVNJQyhzeXNjYWxsX2ZjbnRsX2xvY2spIFwKIAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2Nh
bGxfa2VybmVsX2Zsb2NrKSBcCisJU01CUFJPRklMRV9TVEFUU19CQVNJQyhzeXNjYWxsX2ZjbnRs
KSBcCiAJU01CUFJPRklMRV9TVEFUU19CQVNJQyhzeXNjYWxsX2xpbnV4X3NldGxlYXNlKSBcCiAJ
U01CUFJPRklMRV9TVEFUU19CQVNJQyhzeXNjYWxsX2ZjbnRsX2dldGxvY2spIFwKIAlTTUJQUk9G
SUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfcmVhZGxpbmthdCkgXApkaWZmIC0tZ2l0IGEvc291cmNl
My9pbmNsdWRlL3Zmcy5oIGIvc291cmNlMy9pbmNsdWRlL3Zmcy5oCmluZGV4IDZiYTY1M2Y1NmM3
Li4zMjY2ODdmNWVlMSAxMDA2NDQKLS0tIGEvc291cmNlMy9pbmNsdWRlL3Zmcy5oCisrKyBiL3Nv
dXJjZTMvaW5jbHVkZS92ZnMuaApAQCAtMjgyLDYgKzI4Miw3IEBACiAvKiBWZXJzaW9uIDQyIC0g
TW92ZSBjaGFuZ2VfdG9fdXNlcl9ieV9mc3AoKSAtPiBjaGFuZ2VfdG9fdXNlcl9hbmRfc2Vydmlj
ZV9ieV9mc3AoKSAqLwogLyogVmVyc2lvbiA0MiAtIE1vdmUgW3VuXWJlY29tZV91c2VyKigpIC0+
IFt1bl1iZWNvbWVfdXNlcl93aXRob3V0X3NlcnZpY2UqKCkgKi8KIC8qIFZlcnNpb24gNDIgLSBN
b3ZlIFNNQl9WRlNfVU5MSU5LIC0+IFNNQl9WRlNfVU5MSU5LQVQuICovCisvKiBWZXJzaW9uIDQy
IC0gQWRkIFNNQl9WRlNfRkNOVEwgKi8KIAogI2RlZmluZSBTTUJfVkZTX0lOVEVSRkFDRV9WRVJT
SU9OIDQyCiAKQEAgLTgxMCw2ICs4MTEsOCBAQCBzdHJ1Y3QgdmZzX2ZuX3BvaW50ZXJzIHsKIAli
b29sICgqbG9ja19mbikoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIHN0cnVjdCBm
aWxlc19zdHJ1Y3QgKmZzcCwgaW50IG9wLCBvZmZfdCBvZmZzZXQsIG9mZl90IGNvdW50LCBpbnQg
dHlwZSk7CiAJaW50ICgqa2VybmVsX2Zsb2NrX2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3Qg
KmhhbmRsZSwgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLAogCQkJICAgICAgIHVpbnQzMl90IHNo
YXJlX21vZGUsIHVpbnQzMl90IGFjY2Vzc19tYXNrKTsKKwlpbnQgKCpmY250bF9mbikoc3RydWN0
IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCisJCQlzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3As
IGludCBjbWQsIHZhX2xpc3QgY21kX2FyZyk7CiAJaW50ICgqbGludXhfc2V0bGVhc2VfZm4pKHN0
cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3As
IGludCBsZWFzZXR5cGUpOwogCWJvb2wgKCpnZXRsb2NrX2ZuKShzdHJ1Y3QgdmZzX2hhbmRsZV9z
dHJ1Y3QgKmhhbmRsZSwgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBvZmZfdCAqcG9mZnNldCwg
b2ZmX3QgKnBjb3VudCwgaW50ICpwdHlwZSwgcGlkX3QgKnBwaWQpOwogCWludCAoKnN5bWxpbmth
dF9mbikoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCkBAIC0xMzQ1LDYgKzEzNDgs
OCBAQCBib29sIHNtYl92ZnNfY2FsbF9sb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFu
ZGxlLAogaW50IHNtYl92ZnNfY2FsbF9rZXJuZWxfZmxvY2soc3RydWN0IHZmc19oYW5kbGVfc3Ry
dWN0ICpoYW5kbGUsCiAJCQkgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIHVpbnQzMl90
IHNoYXJlX21vZGUsCiAJCQkgICAgICB1aW50MzJfdCBhY2Nlc3NfbWFzayk7CitpbnQgc21iX3Zm
c19jYWxsX2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAorCQkgICAgICAg
c3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgY21kLCAuLi4pOwogaW50IHNtYl92ZnNfY2Fs
bF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQlz
dHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBsZWFzZXR5cGUpOwogYm9vbCBzbWJfdmZzX2Nh
bGxfZ2V0bG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKQEAgLTE3ODAsNiAr
MTc4NSw4IEBAIGJvb2wgdmZzX25vdF9pbXBsZW1lbnRlZF9sb2NrKHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQKIGludCB2ZnNfbm90X2ltcGxlbWVudGVk
X2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkgICAg
IHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwKIAkJCQkgICAgIHVpbnQzMl90IHNoYXJlX21vZGUs
IHVpbnQzMl90IGFjY2Vzc19tYXNrKTsKK2ludCB2ZnNfbm90X2ltcGxlbWVudGVkX2ZjbnRsKHN0
cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAorCQkJICAgICAgc3RydWN0IGZpbGVzX3N0
cnVjdCAqZnNwLCBpbnQgY21kLCB2YV9saXN0IGNtZF9hcmcpOwogaW50IHZmc19ub3RfaW1wbGVt
ZW50ZWRfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJ
CQkJICAgICAgIHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlwZSk7CiBib29s
IHZmc19ub3RfaW1wbGVtZW50ZWRfZ2V0bG9jayh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBm
aWxlc19zdHJ1Y3QgKmZzcCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMvaW5jbHVkZS92ZnNfbWFjcm9z
LmggYi9zb3VyY2UzL2luY2x1ZGUvdmZzX21hY3Jvcy5oCmluZGV4IDI5Nzk3NjllN2Q1Li4yZGQ1
OTcxMWUxOSAxMDA2NDQKLS0tIGEvc291cmNlMy9pbmNsdWRlL3Zmc19tYWNyb3MuaAorKysgYi9z
b3VyY2UzL2luY2x1ZGUvdmZzX21hY3Jvcy5oCkBAIC0yODYsNiArMjg2LDExIEBACiAjZGVmaW5l
IFNNQl9WRlNfTkVYVF9LRVJORUxfRkxPQ0soaGFuZGxlLCBmc3AsIHNoYXJlX21vZGUsIGFjY2Vz
c19tYXNrKQlcCiAJc21iX3Zmc19jYWxsX2tlcm5lbF9mbG9jaygoaGFuZGxlKS0+bmV4dCwgKGZz
cCksIChzaGFyZV9tb2RlKSwgKGFjY2Vzc19tYXNrKSkKIAorI2RlZmluZSBTTUJfVkZTX0ZDTlRM
KGZzcCwgY21kLCAuLi4pIFwKKwlzbWJfdmZzX2NhbGxfZmNudGwoKGZzcCktPmNvbm4tPnZmc19o
YW5kbGVzLCAoZnNwKSwgKGNtZCksIChfX1ZBX0FSR1NfXykpCisjZGVmaW5lIFNNQl9WRlNfTkVY
VF9GQ05UTChoYW5kbGUsIGZzcCwgY21kLCAuLi4pIFwKKwlzbWJfdmZzX2NhbGxfZmNudGwoKGhh
bmRsZSktPm5leHQsIChmc3ApLCAoY21kKSwgKF9fVkFfQVJHU19fKSkKKwogI2RlZmluZSBTTUJf
VkZTX0xJTlVYX1NFVExFQVNFKGZzcCwgbGVhc2V0eXBlKSBcCiAJc21iX3Zmc19jYWxsX2xpbnV4
X3NldGxlYXNlKChmc3ApLT5jb25uLT52ZnNfaGFuZGxlcywgKGZzcCksIChsZWFzZXR5cGUpKQog
I2RlZmluZSBTTUJfVkZTX05FWFRfTElOVVhfU0VUTEVBU0UoaGFuZGxlLCBmc3AsIGxlYXNldHlw
ZSkgXApkaWZmIC0tZ2l0IGEvc291cmNlMy9saWIvc3lzdGVtLmMgYi9zb3VyY2UzL2xpYi9zeXN0
ZW0uYwppbmRleCBkZWY4MjgxZmM0My4uNjc5MzMyMjU1YzAgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMv
bGliL3N5c3RlbS5jCisrKyBiL3NvdXJjZTMvbGliL3N5c3RlbS5jCkBAIC0xMDgsNiArMTA4LDIw
IEBAIGludCBzeXNfZmNudGxfbG9uZyhpbnQgZmQsIGludCBjbWQsIGxvbmcgYXJnKQogCXJldHVy
biByZXQ7CiB9CiAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCitBIGZjbnRsIHdyYXBwZXIgdGhhdCB3aWxsIGRlYWwg
d2l0aCBFSU5UUi4KKyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLworCitpbnQgc3lzX2ZjbnRsX2ludChpbnQgZmQsIGlu
dCBjbWQsIGludCBhcmcpCit7CisJaW50IHJldDsKKworCWRvIHsKKwkJcmV0ID0gZmNudGwoZmQs
IGNtZCwgYXJnKTsKKwl9IHdoaWxlIChyZXQgPT0gLTEgJiYgZXJybm8gPT0gRUlOVFIpOworCXJl
dHVybiByZXQ7Cit9CisKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgR2V0L1NldCBhbGwgdGhlIHBv
c3NpYmxlIHRpbWUgZmllbGRzIGZyb20gYSBzdGF0IHN0cnVjdCBhcyBhIHRpbWVzcGVjLgogKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKi8KZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVs
dC5jIGIvc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMKaW5kZXggNzgxYzVlMDZmYWQuLmRj
N2JiYWNiODBlIDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYworKysg
Yi9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYwpAQCAtMjYxNSw2ICsyNjE1LDQ3IEBAIHN0
YXRpYyBpbnQgdmZzd3JhcF9rZXJuZWxfZmxvY2sodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwg
ZmlsZXNfc3RydWN0ICpmc3AsCiAJcmV0dXJuIDA7CiB9CiAKK3N0YXRpYyBpbnQgdmZzd3JhcF9m
Y250bCh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGNt
ZCwKKwkJCSB2YV9saXN0IGNtZF9hcmcpCit7CisJdm9pZCAqYXJncDsKKwl2YV9saXN0IGR1cF9j
bWRfYXJnOworCWludCByZXN1bHQ7CisJaW50IHZhbDsKKworCVNUQVJUX1BST0ZJTEUoc3lzY2Fs
bF9mY250bCk7CisKKwl2YV9jb3B5KGR1cF9jbWRfYXJnLCBjbWRfYXJnKTsKKworCXN3aXRjaChj
bWQpIHsKKwljYXNlIEZfU0VUTEs6CisJY2FzZSBGX1NFVExLVzoKKwljYXNlIEZfR0VUTEs6Cisj
aWYgZGVmaW5lZChIQVZFX09GRF9MT0NLUykKKwljYXNlIEZfT0ZEX1NFVExLOgorCWNhc2UgRl9P
RkRfU0VUTEtXOgorCWNhc2UgRl9PRkRfR0VUTEs6CisjZW5kaWYKKy8qCWNhc2UgRl9HRVRPV05f
RVg6CisJY2FzZSBGX1NFVE9XTl9FWDoKKwljYXNlIEZfR0VUX1JXX0hJTlQ6CisJY2FzZSBGX1NF
VF9SV19ISU5UOgorCWNhc2UgRl9HRVRfRklMRV9SV19ISU5UOgorCWNhc2UgRl9TRVRfRklMRV9S
V19ISU5UOiovCisJCWFyZ3AgPSB2YV9hcmcoZHVwX2NtZF9hcmcsIHZvaWQgKik7CisJCXJlc3Vs
dCA9IHN5c19mY250bF9wdHIoZnNwLT5maC0+ZmQsIGNtZCwgYXJncCk7CisJCWJyZWFrOworCWRl
ZmF1bHQ6CisJCXZhbCA9IHZhX2FyZyhkdXBfY21kX2FyZywgaW50KTsKKwkJcmVzdWx0ID0gc3lz
X2ZjbnRsX2ludChmc3AtPmZoLT5mZCwgY21kLCB2YWwpOworCX0KKworCXZhX2VuZChkdXBfY21k
X2FyZyk7CisKKwlFTkRfUFJPRklMRShzeXNjYWxsX2ZjbnRsKTsKKwlyZXR1cm4gcmVzdWx0Owor
fQorCiBzdGF0aWMgYm9vbCB2ZnN3cmFwX2dldGxvY2sodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRs
ZSwgZmlsZXNfc3RydWN0ICpmc3AsIG9mZl90ICpwb2Zmc2V0LCBvZmZfdCAqcGNvdW50LCBpbnQg
KnB0eXBlLCBwaWRfdCAqcHBpZCkKIHsKIAlib29sIHJlc3VsdDsKQEAgLTM1MDYsNiArMzU0Nyw3
IEBAIHN0YXRpYyBzdHJ1Y3QgdmZzX2ZuX3BvaW50ZXJzIHZmc19kZWZhdWx0X2ZucyA9IHsKIAku
ZmFsbG9jYXRlX2ZuID0gdmZzd3JhcF9mYWxsb2NhdGUsCiAJLmxvY2tfZm4gPSB2ZnN3cmFwX2xv
Y2ssCiAJLmtlcm5lbF9mbG9ja19mbiA9IHZmc3dyYXBfa2VybmVsX2Zsb2NrLAorCS5mY250bF9m
biA9IHZmc3dyYXBfZmNudGwsCiAJLmxpbnV4X3NldGxlYXNlX2ZuID0gdmZzd3JhcF9saW51eF9z
ZXRsZWFzZSwKIAkuZ2V0bG9ja19mbiA9IHZmc3dyYXBfZ2V0bG9jaywKIAkuc3ltbGlua2F0X2Zu
ID0gdmZzd3JhcF9zeW1saW5rYXQsCmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZzX2Z1
bGxfYXVkaXQuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfZnVsbF9hdWRpdC5jCmluZGV4IGRlNTkx
ZWIyMTM2Li43NTdjZDI2ZDNmMSAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19mdWxs
X2F1ZGl0LmMKKysrIGIvc291cmNlMy9tb2R1bGVzL3Zmc19mdWxsX2F1ZGl0LmMKQEAgLTE1MSw2
ICsxNTEsNyBAQCB0eXBlZGVmIGVudW0gX3Zmc19vcF90eXBlIHsKIAlTTUJfVkZTX09QX0ZBTExP
Q0FURSwKIAlTTUJfVkZTX09QX0xPQ0ssCiAJU01CX1ZGU19PUF9LRVJORUxfRkxPQ0ssCisJU01C
X1ZGU19PUF9GQ05UTCwKIAlTTUJfVkZTX09QX0xJTlVYX1NFVExFQVNFLAogCVNNQl9WRlNfT1Bf
R0VUTE9DSywKIAlTTUJfVkZTX09QX1NZTUxJTktBVCwKQEAgLTE3MzQsNiArMTczNSwyNSBAQCBz
dGF0aWMgaW50IHNtYl9mdWxsX2F1ZGl0X2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9z
dHJ1Y3QgKmhhbmRsZSwKIAlyZXR1cm4gcmVzdWx0OwogfQogCitzdGF0aWMgaW50IHNtYl9mdWxs
X2F1ZGl0X2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAorCQkJCXN0cnVj
dCBmaWxlc19zdHJ1Y3QgKmZzcCwKKwkJCQlpbnQgY21kLCB2YV9saXN0IGNtZF9hcmcpCit7CisJ
dm9pZCAqYXJnOworCXZhX2xpc3QgZHVwX2NtZF9hcmc7CisJaW50IHJlc3VsdDsKKworCXZhX2Nv
cHkoZHVwX2NtZF9hcmcsIGNtZF9hcmcpOworCWFyZyA9IHZhX2FyZyhkdXBfY21kX2FyZywgdm9p
ZCAqKTsKKwlyZXN1bHQgPSBTTUJfVkZTX05FWFRfRkNOVEwoaGFuZGxlLCBmc3AsIGNtZCwgYXJn
KTsKKwl2YV9lbmQoZHVwX2NtZF9hcmcpOworCisJZG9fbG9nKFNNQl9WRlNfT1BfRkNOVEwsIChy
ZXN1bHQgPj0gMCksIGhhbmRsZSwgIiVzIiwKKwkgICAgICAgZnNwX3N0cl9kb19sb2coZnNwKSk7
CisKKwlyZXR1cm4gcmVzdWx0OworfQorCiBzdGF0aWMgaW50IHNtYl9mdWxsX2F1ZGl0X2xpbnV4
X3NldGxlYXNlKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAqZnNwLAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50IGxlYXNldHlwZSkKIHsKQEAgLTI5
ODEsNiArMzAwMSw3IEBAIHN0YXRpYyBzdHJ1Y3QgdmZzX2ZuX3BvaW50ZXJzIHZmc19mdWxsX2F1
ZGl0X2ZucyA9IHsKIAkuZmFsbG9jYXRlX2ZuID0gc21iX2Z1bGxfYXVkaXRfZmFsbG9jYXRlLAog
CS5sb2NrX2ZuID0gc21iX2Z1bGxfYXVkaXRfbG9jaywKIAkua2VybmVsX2Zsb2NrX2ZuID0gc21i
X2Z1bGxfYXVkaXRfa2VybmVsX2Zsb2NrLAorCS5mY250bF9mbiA9IHNtYl9mdWxsX2F1ZGl0X2Zj
bnRsLAogCS5saW51eF9zZXRsZWFzZV9mbiA9IHNtYl9mdWxsX2F1ZGl0X2xpbnV4X3NldGxlYXNl
LAogCS5nZXRsb2NrX2ZuID0gc21iX2Z1bGxfYXVkaXRfZ2V0bG9jaywKIAkuc3ltbGlua2F0X2Zu
ID0gc21iX2Z1bGxfYXVkaXRfc3ltbGlua2F0LApkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVz
L3Zmc19ub3RfaW1wbGVtZW50ZWQuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfbm90X2ltcGxlbWVu
dGVkLmMKaW5kZXggZmZjYmE3YmQ4ZGIuLjJiOTA2YjNjZjI4IDEwMDY0NAotLS0gYS9zb3VyY2Uz
L21vZHVsZXMvdmZzX25vdF9pbXBsZW1lbnRlZC5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNf
bm90X2ltcGxlbWVudGVkLmMKQEAgLTQ0Miw2ICs0NDIsMTQgQEAgaW50IHZmc19ub3RfaW1wbGVt
ZW50ZWRfa2VybmVsX2Zsb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCXJl
dHVybiAtMTsKIH0KIAoraW50IHZmc19ub3RfaW1wbGVtZW50ZWRfZmNudGwoc3RydWN0IHZmc19o
YW5kbGVfc3RydWN0ICpoYW5kbGUsCisJCQkgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3As
IGludCBjbWQsCisJCQkgICAgICB2YV9saXN0IGNtZF9hcmcpCit7CisJZXJybm8gPSBFTk9TWVM7
CisJcmV0dXJuIC0xOworfQorCiBpbnQgdmZzX25vdF9pbXBsZW1lbnRlZF9saW51eF9zZXRsZWFz
ZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkgICAgICAgc3RydWN0IGZp
bGVzX3N0cnVjdCAqZnNwLCBpbnQgbGVhc2V0eXBlKQogewpAQCAtMTA5NSw2ICsxMTAzLDcgQEAg
c3RhdGljIHN0cnVjdCB2ZnNfZm5fcG9pbnRlcnMgdmZzX25vdF9pbXBsZW1lbnRlZF9mbnMgPSB7
CiAJLmZhbGxvY2F0ZV9mbiA9IHZmc19ub3RfaW1wbGVtZW50ZWRfZmFsbG9jYXRlLAogCS5sb2Nr
X2ZuID0gdmZzX25vdF9pbXBsZW1lbnRlZF9sb2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSB2ZnNf
bm90X2ltcGxlbWVudGVkX2tlcm5lbF9mbG9jaywKKwkuZmNudGxfZm4gPSB2ZnNfbm90X2ltcGxl
bWVudGVkX2ZjbnRsLAogCS5saW51eF9zZXRsZWFzZV9mbiA9IHZmc19ub3RfaW1wbGVtZW50ZWRf
bGludXhfc2V0bGVhc2UsCiAJLmdldGxvY2tfZm4gPSB2ZnNfbm90X2ltcGxlbWVudGVkX2dldGxv
Y2ssCiAJLnN5bWxpbmthdF9mbiA9IHZmc19ub3RfaW1wbGVtZW50ZWRfc3ltbGlua2F0LApkaWZm
IC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc190aW1lX2F1ZGl0LmMgYi9zb3VyY2UzL21vZHVs
ZXMvdmZzX3RpbWVfYXVkaXQuYwppbmRleCAyMTNlYTEwYjE3Zi4uN2ZhNjE2MTk0NWEgMTAwNjQ0
Ci0tLSBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfdGltZV9hdWRpdC5jCisrKyBiL3NvdXJjZTMvbW9k
dWxlcy92ZnNfdGltZV9hdWRpdC5jCkBAIC0xMzQ0LDYgKzEzNDQsMzEgQEAgc3RhdGljIGludCBz
bWJfdGltZV9hdWRpdF9rZXJuZWxfZmxvY2soc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5k
bGUsCiAJcmV0dXJuIHJlc3VsdDsKIH0KIAorc3RhdGljIGludCBzbWJfdGltZV9hdWRpdF9mY250
bChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJCQlzdHJ1Y3QgZmlsZXNfc3Ry
dWN0ICpmc3AsCisJCQkJaW50IGNtZCwgdmFfbGlzdCBjbWRfYXJnKQoreworCXZvaWQgKmFyZzsK
Kwl2YV9saXN0IGR1cF9jbWRfYXJnOworCWludCByZXN1bHQ7CisJc3RydWN0IHRpbWVzcGVjIHRz
MSx0czI7CisJZG91YmxlIHRpbWVkaWZmOworCisJdmFfY29weShkdXBfY21kX2FyZywgY21kX2Fy
Zyk7CisJYXJnID0gdmFfYXJnKGR1cF9jbWRfYXJnLCB2b2lkICopOworCWNsb2NrX2dldHRpbWVf
bW9ubygmdHMxKTsKKwlyZXN1bHQgPSBTTUJfVkZTX05FWFRfRkNOVEwoaGFuZGxlLCBmc3AsIGNt
ZCwgYXJnKTsKKwljbG9ja19nZXR0aW1lX21vbm8oJnRzMik7CisJdmFfZW5kKGR1cF9jbWRfYXJn
KTsKKworCXRpbWVkaWZmID0gbnNlY190aW1lX2RpZmYoJnRzMiwmdHMxKSoxLjBlLTk7CisJaWYg
KHRpbWVkaWZmID4gYXVkaXRfdGltZW91dCkgeworCQlzbWJfdGltZV9hdWRpdF9sb2dfZnNwKCJr
ZXJuZWxfZmxvY2siLCB0aW1lZGlmZiwgZnNwKTsKKwl9CisKKwlyZXR1cm4gcmVzdWx0OworfQor
CiBzdGF0aWMgaW50IHNtYl90aW1lX2F1ZGl0X2xpbnV4X3NldGxlYXNlKHZmc19oYW5kbGVfc3Ry
dWN0ICpoYW5kbGUsCiAJCQkJCSBmaWxlc19zdHJ1Y3QgKmZzcCwKIAkJCQkJIGludCBsZWFzZXR5
cGUpCkBAIC0yODY2LDYgKzI4OTEsNyBAQCBzdGF0aWMgc3RydWN0IHZmc19mbl9wb2ludGVycyB2
ZnNfdGltZV9hdWRpdF9mbnMgPSB7CiAJLmZhbGxvY2F0ZV9mbiA9IHNtYl90aW1lX2F1ZGl0X2Zh
bGxvY2F0ZSwKIAkubG9ja19mbiA9IHNtYl90aW1lX2F1ZGl0X2xvY2ssCiAJLmtlcm5lbF9mbG9j
a19mbiA9IHNtYl90aW1lX2F1ZGl0X2tlcm5lbF9mbG9jaywKKwkuZmNudGxfZm4gPSBzbWJfdGlt
ZV9hdWRpdF9mY250bCwKIAkubGludXhfc2V0bGVhc2VfZm4gPSBzbWJfdGltZV9hdWRpdF9saW51
eF9zZXRsZWFzZSwKIAkuZ2V0bG9ja19mbiA9IHNtYl90aW1lX2F1ZGl0X2dldGxvY2ssCiAJLnN5
bWxpbmthdF9mbiA9IHNtYl90aW1lX2F1ZGl0X3N5bWxpbmthdCwKZGlmZiAtLWdpdCBhL3NvdXJj
ZTMvc21iZC92ZnMuYyBiL3NvdXJjZTMvc21iZC92ZnMuYwppbmRleCBiODNjZjFlNGQ1NS4uYmVm
NzllNGM2NGUgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvc21iZC92ZnMuYworKysgYi9zb3VyY2UzL3Nt
YmQvdmZzLmMKQEAgLTIxOTUsNiArMjE5NSwyMSBAQCBpbnQgc21iX3Zmc19jYWxsX2tlcm5lbF9m
bG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkJIGFjY2Vzc19tYXNr
KTsKIH0KIAoraW50IHNtYl92ZnNfY2FsbF9mY250bChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3Qg
KmhhbmRsZSwKKwkJICAgICAgIHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGNtZCwgLi4u
KQoreworCWludCByZXN1bHQ7CisJdmFfbGlzdCBjbWRfYXJnOworCisJVkZTX0ZJTkQoZmNudGwp
OworCisJdmFfc3RhcnQoY21kX2FyZywgY21kKTsKKwlyZXN1bHQgPSBoYW5kbGUtPmZucy0+ZmNu
dGxfZm4oaGFuZGxlLCBmc3AsIGNtZCwgY21kX2FyZyk7CisJdmFfZW5kKGNtZF9hcmcpOworCisJ
cmV0dXJuIHJlc3VsdDsKK30KKwogaW50IHNtYl92ZnNfY2FsbF9saW51eF9zZXRsZWFzZShzdHJ1
Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQlzdHJ1Y3QgZmlsZXNfc3RydWN0ICpm
c3AsIGludCBsZWFzZXR5cGUpCiB7Ci0tIAoyLjIxLjAKCg==


--=-OdM4pf1rbLs6a7qr1pys
Content-Disposition: attachment;
	filename*0=0002-s3-VFS-Use-SMB_VFS_FCNTL-to-set-fd-flags-in-open_fil.pat;
	filename*1=ch
Content-Transfer-Encoding: base64
Content-Type: text/x-patch;
	name="0002-s3-VFS-Use-SMB_VFS_FCNTL-to-set-fd-flags-in-open_fil.patch";
	charset="UTF-8"

RnJvbSA3ZmYwNzMwNDFlMjg3YzMzNDY3ZjlhNGJhYjVhNDkxNmIzOGZjZGZmIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbm9vcCBDIFMgPGFub29wY3NAcmVkaGF0LmNvbT4KRGF0ZTog
RnJpLCAyNyBTZXAgMjAxOSAxMjowNzo0MCArMDUzMApTdWJqZWN0OiBbUEFUQ0ggMi8yXSBzMzog
VkZTOiBVc2UgU01CX1ZGU19GQ05UTCB0byBzZXQgZmQgZmxhZ3MgaW4gb3Blbl9maWxlKCkKClNp
Z25lZC1vZmYtYnk6IEFub29wIEMgUyA8YW5vb3Bjc0ByZWRoYXQuY29tPgotLS0KIHNvdXJjZTMv
c21iZC9vcGVuLmMgIHwgIDIgKy0KIHNvdXJjZTMvc21iZC9wcm90by5oIHwgIDEgKwogc291cmNl
My9zbWJkL3Zmcy5jICAgfCAzMCArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysKIDMgZmls
ZXMgY2hhbmdlZCwgMzIgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBh
L3NvdXJjZTMvc21iZC9vcGVuLmMgYi9zb3VyY2UzL3NtYmQvb3Blbi5jCmluZGV4IDIwYjVhM2Uy
OTRjLi4wZmM0NTYxN2UxOCAxMDA2NDQKLS0tIGEvc291cmNlMy9zbWJkL29wZW4uYworKysgYi9z
b3VyY2UzL3NtYmQvb3Blbi5jCkBAIC0xMzI3LDcgKzEzMjcsNyBAQCBzdGF0aWMgTlRTVEFUVVMg
b3Blbl9maWxlKGZpbGVzX3N0cnVjdCAqZnNwLAogCQkJICogdG9vLiBXaXRoIGJsb2NraW5nIGZp
bGUgZGVzY3JpcHRvcnMgdGhpcwogCQkJICogZG9lcyBub3QgaGFwcGVuLgogCQkJICovCi0JCQly
ZXQgPSBzZXRfYmxvY2tpbmcoZnNwLT5maC0+ZmQsIHRydWUpOworCQkJcmV0ID0gdmZzX3NldF9i
bG9ja2luZyhmc3AsIHRydWUpOwogCQkJaWYgKHJldCA9PSAtMSkgewogCQkJCXN0YXR1cyA9IG1h
cF9udF9lcnJvcl9mcm9tX3VuaXgoZXJybm8pOwogCQkJCURCR19XQVJOSU5HKCJDb3VsZCBub3Qg
c2V0IGZkIHRvIGJsb2NraW5nOiAiCmRpZmYgLS1naXQgYS9zb3VyY2UzL3NtYmQvcHJvdG8uaCBi
L3NvdXJjZTMvc21iZC9wcm90by5oCmluZGV4IDExYzlkYzBmOGIxLi5lOWQwNDQ3NGRmNiAxMDA2
NDQKLS0tIGEvc291cmNlMy9zbWJkL3Byb3RvLmgKKysrIGIvc291cmNlMy9zbWJkL3Byb3RvLmgK
QEAgLTEyMzAsNiArMTIzMCw3IEBAIGludCB2ZnNfYWxsb2NhdGVfZmlsZV9zcGFjZShmaWxlc19z
dHJ1Y3QgKmZzcCwgdWludDY0X3QgbGVuKTsKIGludCB2ZnNfc2V0X2ZpbGVsZW4oZmlsZXNfc3Ry
dWN0ICpmc3AsIG9mZl90IGxlbik7CiBpbnQgdmZzX3Nsb3dfZmFsbG9jYXRlKGZpbGVzX3N0cnVj
dCAqZnNwLCBvZmZfdCBvZmZzZXQsIG9mZl90IGxlbik7CiBpbnQgdmZzX2ZpbGxfc3BhcnNlKGZp
bGVzX3N0cnVjdCAqZnNwLCBvZmZfdCBsZW4pOworaW50IHZmc19zZXRfYmxvY2tpbmcoZmlsZXNf
c3RydWN0ICpmc3AsIGJvb2wgc2V0KTsKIG9mZl90IHZmc190cmFuc2Zlcl9maWxlKGZpbGVzX3N0
cnVjdCAqaW4sIGZpbGVzX3N0cnVjdCAqb3V0LCBvZmZfdCBuKTsKIGNvbnN0IGNoYXIgKnZmc19y
ZWFkZGlybmFtZShjb25uZWN0aW9uX3N0cnVjdCAqY29ubiwgdm9pZCAqcCwKIAkJCSAgICBTTUJf
U1RSVUNUX1NUQVQgKnNidWYsIGNoYXIgKip0YWxsb2NlZCk7CmRpZmYgLS1naXQgYS9zb3VyY2Uz
L3NtYmQvdmZzLmMgYi9zb3VyY2UzL3NtYmQvdmZzLmMKaW5kZXggYmVmNzllNGM2NGUuLmNkNmQw
ZjI1YzA0IDEwMDY0NAotLS0gYS9zb3VyY2UzL3NtYmQvdmZzLmMKKysrIGIvc291cmNlMy9zbWJk
L3Zmcy5jCkBAIC03MTEsNiArNzExLDM2IEBAIGludCB2ZnNfZmlsbF9zcGFyc2UoZmlsZXNfc3Ry
dWN0ICpmc3AsIG9mZl90IGxlbikKIAlyZXR1cm4gcmV0OwogfQogCisvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKgorIFNldCBhIGZkIGludG8gYmxvY2tpbmcvbm9uYmxvY2tpbmcgbW9kZSB0aHJvdWdo
IFZGUworKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKworaW50IHZmc19zZXRfYmxvY2tpbmcoZmls
ZXNfc3RydWN0ICpmc3AsIGJvb2wgc2V0KQoreworCWludCB2YWw7CisjaWZkZWYgT19OT05CTE9D
SworI2RlZmluZSBGTEFHX1RPX1NFVCBPX05PTkJMT0NLCisjZWxzZQorI2lmZGVmIFNZU1YKKyNk
ZWZpbmUgRkxBR19UT19TRVQgT19OREVMQVkKKyNlbHNlIC8qIEJTRCAqLworI2RlZmluZSBGTEFH
X1RPX1NFVCBGTkRFTEFZCisjZW5kaWYKKyNlbmRpZgorCWlmICgodmFsID0gU01CX1ZGU19GQ05U
TChmc3AsIEZfR0VURkwsIDApKSA9PSAtMSkgeworCQlyZXR1cm4gLTE7CisJfQorCisJaWYgKHNl
dCkgeworCQl2YWwgJj0gfkZMQUdfVE9fU0VUOworCX0gZWxzZSB7CisJCXZhbCB8PSBGTEFHX1RP
X1NFVDsKKwl9CisKKwlyZXR1cm4gU01CX1ZGU19GQ05UTChmc3AsIEZfU0VURkwsIHZhbCk7Cisj
dW5kZWYgRkxBR19UT19TRVQKK30KKwogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICBUcmFuc2ZlciBz
b21lIGRhdGEgKG4gYnl0ZXMpIGJldHdlZW4gdHdvIGZpbGVfc3RydWN0J3MuCiAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLwotLSAKMi4yMS4wCgo=


--=-OdM4pf1rbLs6a7qr1pys--


