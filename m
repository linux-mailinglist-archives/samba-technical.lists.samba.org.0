Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id 6ABB9D95E9
	for <lists+samba-technical@lfdr.de>; Wed, 16 Oct 2019 17:48:02 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=From:List-Id:Date:Subject:To:cc;
	bh=FRis3hBxSqHJlk3JqrXDjFcGZ9RLkAJL+aMpI3PzaIc=; b=eoJKhxmjGXZQgMJ3uoJQJmlQGN
	SBNo850VbDyAaGdB5Bm+6Dd643wcrVq6DXS99l9k/eKedoNnaQ56sUzMbZSqCMZh7qlpTJre9aUEq
	ezaKRDPBIZyHtP7gDyyw0Kdf2Xh30pd4f/RPjjLTKxjaC5f8JTidbv8dQNj4HKu3mrMKzd6Xo7lPU
	9n+YdxNLkC3YwC38LT+jSVcaJDx29d7HSrogtsg6M7QqOfmTxJXw/ewR2oXkRoOKhvuBUDaAg2ITt
	WT2n0lZMXiZGCfzUBz+7EbdhgkKgB5of7lmWzzQC7KIRICAwL4SCO01wL1gQZOSMI/vDyZqrxh+sX
	GH48FUyw==;
Received: from localhost ([::1]:47164 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1iKlWN-004HbO-My; Wed, 16 Oct 2019 15:47:31 +0000
Received: from hr2.samba.org ([2a01:4f8:192:486::2:0]:61784) 
 by hr1.samba.org with esmtps (TLS1.3:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1iKlWH-004HbH-AD
 for samba-technical@lists.samba.org; Wed, 16 Oct 2019 15:47:28 +0000
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=samba.org; 
 s=42; h=Date:Message-ID:To:From:CC;
 bh=FRis3hBxSqHJlk3JqrXDjFcGZ9RLkAJL+aMpI3PzaIc=; b=VKlls++pDKQ97hCm7I4g0xgwpQ
 yjdHEONOK9LqjAKZAGZQreNtCa5Dy60ewhrXWA65xfX/bOTfDZuL0Dv08oNN6r3r58W2Cb0+46m6W
 Ji176DRXEL/l1ZVIZCFOXG3v5h5sZG1AEJBho9Pp2IzLhB8uhYSasi0wSqjvE9zgMe9DQzpLtNMPX
 KYaodSGnKEAkEY+IqDUEF51j06X08jWFh4nCUhr1UMwqoIpsP6FHEFPQAicwD1zG/Bb6c2H3KG2gf
 HGqIpaoeQMBaCIR4w8/up7L4GkVRlx3MBgf7R0F7npHkw9qWM0p1KhbJvsfAvY5om9iGGTqHD8GQS
 cb5yrBxjlAV1MWZfmcCHIlpmueLtAJoDJ/CTDUEy22w+IS3HtDxPpZ4eiESX+lq8ob4wAfej73M1U
 gUkrtycqbJsRNuqzeOycW+bvKw8MEE3M76LNjxaXWPKVC7u7XGlCKn+cD/4uemzoNlbwb5LZJ0MhK
 m/dfSE9aA9D+TGx9I+Nfu9jT;
Received: from [127.0.0.2] (localhost [127.0.0.1])
 by hr2.samba.org with esmtpsa (TLS1.2:ECDHE_ECDSA_CHACHA20_POLY1305:256)
 (Exim) id 1iKlWG-0002X1-S6
 for samba-technical@lists.samba.org; Wed, 16 Oct 2019 15:47:25 +0000
Openpgp: id=A3D192CE44EF412517BCED646A739B025C6B98D4
To: Samba Technical <samba-technical@lists.samba.org>
Subject: RFC impersonation and substitution
Message-ID: <a7aabda6-2463-7777-9132-a3a94edfa3a1@samba.org>
Date: Wed, 16 Oct 2019 17:47:19 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.9.0
MIME-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha512;
 protocol="application/pgp-signature";
 boundary="admkNnuneStxjrD0x0qyw6eJxEyknWeki"
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Stefan Metzmacher via samba-technical <samba-technical@lists.samba.org>
Reply-To: Stefan Metzmacher <metze@samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--admkNnuneStxjrD0x0qyw6eJxEyknWeki
Content-Type: multipart/mixed; boundary="dkn595DKL30D9uEKLWdVlJ12Klu6MfZjp";
 protected-headers="v1"
From: Stefan Metzmacher <metze@samba.org>
To: Samba Technical <samba-technical@lists.samba.org>
Message-ID: <a7aabda6-2463-7777-9132-a3a94edfa3a1@samba.org>
Subject: RFC impersonation and substitution

--dkn595DKL30D9uEKLWdVlJ12Klu6MfZjp
Content-Type: multipart/mixed;
 boundary="------------15C5D23ADFEBCA58069A997D"
Content-Language: en-US

This is a multi-part message in MIME format.
--------------15C5D23ADFEBCA58069A997D
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Hi,

some of you already saw my SDC presentation:
https://www.samba.org/~metze/presentations/2019/SDC/

Now I want to start the discussion regarding our impersonation model
here.

We try to get more things (including path based calls) in the smb_vfs
layer async.

I started with tevent_wrapper based impersonation, but that got reverted
as it got too complex, more details can be found here:
https://lists.samba.org/archive/samba-technical/2018-December/131731.html=


Currently our impersonation happens per incoming SMB request.
We change 3 things:
A) the unix token (uid, gid, groups)
B) the global state in order to do smb.conf substitutions like %U
C) we change to the share root directory

The future idea would be that we no longer do impersonation at the
SMB layer. Instead we would explicitly pass down enough information
through the SMB_VFS layer, that vfs modules can do impersonation
just around the raw syscall (or in other required places).
The module write should know where it is required!
Userspace filesystems may do impersonation differently.
Of course we'll provide helper functions to make it
easy for the module writers.

In order to catch problem C) (relying on the correct current
working directory) Jeremy and others are working
hard to convert our SMB_VFS layer to *at() based syscalls.
See https://git.samba.org/?p=3Dsamba.git;a=3Dhistory;f=3Dsource3/include/=
vfs.h

For problems A) and B) I have the idea to pass down
a 'const struct samba_impersonation' as explicit argument
to each SMB_VFS call. Note I called i 'smb_vfs_impersonation'
in my presentation, but I realized that we need the same
for the DCEPRC servers and changed the name.

Regarding problem B) I'm introducing a
'struct loadparm_substitution' that needs tobe passed explicitly
to each lp_*(), lpcfg_*() function that needs substitutions.

struct samba_impersonation will wrap
struct auth_session_info as well as struct loadparm_substitution.
We could add more later if needed.

I started with the struct loadparm_substitution infrastructure
and created some draft patches for struct samba_impersonation.
Before I continue I'd like to get some feedback.

Please have a look and tell me if you are happy with
that approach or if we need to find a better solution.

Thanks!
metze

--------------15C5D23ADFEBCA58069A997D
Content-Type: text/plain; charset=UTF-8;
 name="impersonation-substitution-draft0.patches.txt"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="impersonation-substitution-draft0.patches.txt"

RnJvbSAxM2YwZDVkYTliMTUxZmRlZGY5NjU2ZjlmNGNkMThiNDIyYTE3MjQ3IE1vbiBTZXAg
MTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEu
b3JnPgpEYXRlOiBUdWUsIDE1IE9jdCAyMDE5IDEwOjE1OjE0ICswMjAwClN1YmplY3Q6IFtQ
QVRDSCAwMS8xOF0gczM6bGliOiByZW1vdmUgdW51c2VkIHN0cl9saXN0X3N1Yl9iYXNpYygp
CgpTaWduZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgot
LS0KIHNvdXJjZTMvaW5jbHVkZS9wcm90by5oICB8ICAyIC0tCiBzb3VyY2UzL2xpYi9zdWJz
dGl0dXRlLmMgfCAyOSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogMiBmaWxlcyBj
aGFuZ2VkLCAzMSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9zb3VyY2UzL2luY2x1ZGUv
cHJvdG8uaCBiL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCmluZGV4IGM5OGY3Y2ZhMzUxYi4u
ZjhiNDFmODM4Nzg5IDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaAorKysg
Yi9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaApAQCAtNjIwLDggKzYyMCw2IEBAIHNpemVfdCBz
dHJsZW5fbShjb25zdCBjaGFyICpzKTsKIHNpemVfdCBzdHJsZW5fbV90ZXJtKGNvbnN0IGNo
YXIgKnMpOwogc2l6ZV90IHN0cmxlbl9tX3Rlcm1fbnVsbChjb25zdCBjaGFyICpzKTsKIGlu
dCBmc3RyX3NwcmludGYoZnN0cmluZyBzLCBjb25zdCBjaGFyICpmbXQsIC4uLik7Ci1ib29s
IHN0cl9saXN0X3N1Yl9iYXNpYyggY2hhciAqKmxpc3QsIGNvbnN0IGNoYXIgKnNtYl9uYW1l
LAotCQkJIGNvbnN0IGNoYXIgKmRvbWFpbl9uYW1lICk7CiBib29sIHN0cl9saXN0X3N1YnN0
aXR1dGUoY2hhciAqKmxpc3QsIGNvbnN0IGNoYXIgKnBhdHRlcm4sIGNvbnN0IGNoYXIgKmlu
c2VydCk7CiAKIGNoYXIgKmlwc3RyX2xpc3RfbWFrZShjaGFyICoqaXBzdHJfbGlzdCwKZGlm
ZiAtLWdpdCBhL3NvdXJjZTMvbGliL3N1YnN0aXR1dGUuYyBiL3NvdXJjZTMvbGliL3N1YnN0
aXR1dGUuYwppbmRleCBmOGNhNmY0MWNjMWEuLjgyZmE5OTVmNmNhZSAxMDA2NDQKLS0tIGEv
c291cmNlMy9saWIvc3Vic3RpdHV0ZS5jCisrKyBiL3NvdXJjZTMvbGliL3N1YnN0aXR1dGUu
YwpAQCAtODc4LDMyICs4NzgsMyBAQCB2b2lkIHN0YW5kYXJkX3N1Yl9hZHZhbmNlZChjb25z
dCBjaGFyICpzZXJ2aWNlbmFtZSwgY29uc3QgY2hhciAqdXNlciwKIAlzdHJsY3B5KCBzdHIs
IHMsIGxlbiApOwogCVRBTExPQ19GUkVFKCBzICk7CiB9Ci0KLS8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSB2ZXJzaW9uIG9mIHN0YW5kYXJkX3N1Yl9iYXNpYygpIGZvciBzdHJpbmcg
bGlzdHM7IHVzZXMgdGFsbG9jX3N1Yl9iYXNpYygpCi0gZm9yIHRoZSB3b3JrCi0gKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKiovCi0KLWJvb2wgc3RyX2xpc3Rfc3ViX2Jhc2ljKCBjaGFyICoq
bGlzdCwgY29uc3QgY2hhciAqc21iX25hbWUsCi0JCQkgY29uc3QgY2hhciAqZG9tYWluX25h
bWUgKQotewotCVRBTExPQ19DVFggKmN0eCA9IGxpc3Q7Ci0JY2hhciAqcywgKnRtcHN0cjsK
LQotCXdoaWxlICggKmxpc3QgKSB7Ci0JCXMgPSAqbGlzdDsKLQkJdG1wc3RyID0gdGFsbG9j
X3N1Yl9iYXNpYyhjdHgsIHNtYl9uYW1lLCBkb21haW5fbmFtZSwgcyk7Ci0JCWlmICggIXRt
cHN0ciApIHsKLQkJCURFQlVHKDAsKCJzdHJfbGlzdF9zdWJfYmFzaWM6ICIKLQkJCQkidGFs
bG9jX3N1Yl9iYXNpYygpIHJldHVybiBOVUxMIVxuIikpOwotCQkJcmV0dXJuIGZhbHNlOwot
CQl9Ci0KLQkJVEFMTE9DX0ZSRUUoKmxpc3QpOwotCQkqbGlzdCA9IHRtcHN0cjsKLQotCQls
aXN0Kys7Ci0JfQotCi0JcmV0dXJuIHRydWU7Ci19Ci0tIAoyLjE3LjEKCgpGcm9tIDAyMGM3
YzQwZTY1MTA3NDAxYWJkOTAyMzhlZTk5ZjIyZjFlNWNmZGUgTW9uIFNlcCAxNyAwMDowMDow
MCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+CkRhdGU6
IFR1ZSwgMTUgT2N0IDIwMTkgMTA6MTU6NDEgKzAyMDAKU3ViamVjdDogW1BBVENIIDAyLzE4
XSBzMzpsaWI6IHJlbW92ZSB1bnVzZWQgc3RyX2xpc3Rfc3Vic3RpdHV0ZSgpCgpTaWduZWQt
b2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0KIHNvdXJj
ZTMvaW5jbHVkZS9wcm90by5oIHwgIDEgLQogc291cmNlMy9saWIvdXRpbF9zdHIuYyAgfCA3
NCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogMiBmaWxlcyBj
aGFuZ2VkLCA3NSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9zb3VyY2UzL2luY2x1ZGUv
cHJvdG8uaCBiL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCmluZGV4IGY4YjQxZjgzODc4OS4u
ODFkZGIyYTY3M2EzIDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaAorKysg
Yi9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaApAQCAtNjIwLDcgKzYyMCw2IEBAIHNpemVfdCBz
dHJsZW5fbShjb25zdCBjaGFyICpzKTsKIHNpemVfdCBzdHJsZW5fbV90ZXJtKGNvbnN0IGNo
YXIgKnMpOwogc2l6ZV90IHN0cmxlbl9tX3Rlcm1fbnVsbChjb25zdCBjaGFyICpzKTsKIGlu
dCBmc3RyX3NwcmludGYoZnN0cmluZyBzLCBjb25zdCBjaGFyICpmbXQsIC4uLik7Ci1ib29s
IHN0cl9saXN0X3N1YnN0aXR1dGUoY2hhciAqKmxpc3QsIGNvbnN0IGNoYXIgKnBhdHRlcm4s
IGNvbnN0IGNoYXIgKmluc2VydCk7CiAKIGNoYXIgKmlwc3RyX2xpc3RfbWFrZShjaGFyICoq
aXBzdHJfbGlzdCwKIAkJCWNvbnN0IHN0cnVjdCBpcF9zZXJ2aWNlICppcF9saXN0LApkaWZm
IC0tZ2l0IGEvc291cmNlMy9saWIvdXRpbF9zdHIuYyBiL3NvdXJjZTMvbGliL3V0aWxfc3Ry
LmMKaW5kZXggZTY2MGUyOTVjMzM5Li41ZDFkMTI5MTAxMWEgMTAwNjQ0Ci0tLSBhL3NvdXJj
ZTMvbGliL3V0aWxfc3RyLmMKKysrIGIvc291cmNlMy9saWIvdXRpbF9zdHIuYwpAQCAtNTcw
LDgwICs1NzAsNiBAQCBpbnQgZnN0cl9zcHJpbnRmKGZzdHJpbmcgcywgY29uc3QgY2hhciAq
Zm10LCAuLi4pCiAJcmV0dXJuIHJldDsKIH0KIAotLyoqCi0gTGlzdCBvZiBTdHJpbmdzIG1h
bmlwdWxhdGlvbiBmdW5jdGlvbnMKLSoqLwotCi0jZGVmaW5lIFNfTElTVF9BQlMgMTYgLyog
TGlzdCBBbGxvY2F0aW9uIEJsb2NrIFNpemUgKi8KLQotLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotIHN1YnN0aXR1dGUgYSBzcGVjaWZpYyBwYXR0ZXJuIGluIGEgc3RyaW5nIGxpc3QK
LSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KLQotYm9vbCBzdHJfbGlzdF9zdWJzdGl0dXRl
KGNoYXIgKipsaXN0LCBjb25zdCBjaGFyICpwYXR0ZXJuLCBjb25zdCBjaGFyICppbnNlcnQp
Ci17Ci0JVEFMTE9DX0NUWCAqY3R4ID0gbGlzdDsKLQljaGFyICpwLCAqcywgKnQ7Ci0Jc3Np
emVfdCBscywgbHAsIGxpLCBsZCwgaSwgZDsKLQotCWlmICghbGlzdCkKLQkJcmV0dXJuIGZh
bHNlOwotCWlmICghcGF0dGVybikKLQkJcmV0dXJuIGZhbHNlOwotCWlmICghaW5zZXJ0KQot
CQlyZXR1cm4gZmFsc2U7Ci0KLQlscCA9IChzc2l6ZV90KXN0cmxlbihwYXR0ZXJuKTsKLQls
aSA9IChzc2l6ZV90KXN0cmxlbihpbnNlcnQpOwotCWxkID0gbGkgLWxwOwotCi0Jd2hpbGUg
KCpsaXN0KSB7Ci0JCXMgPSAqbGlzdDsKLQkJbHMgPSAoc3NpemVfdClzdHJsZW4ocyk7Ci0K
LQkJd2hpbGUgKChwID0gc3Ryc3RyX20ocywgcGF0dGVybikpKSB7Ci0JCQl0ID0gKmxpc3Q7
Ci0JCQlkID0gcCAtdDsKLQkJCWlmIChsZCkgewotCQkJCXQgPSB0YWxsb2NfYXJyYXkoY3R4
LCBjaGFyLCBscyArbGQgKzEpOwotCQkJCWlmICghdCkgewotCQkJCQlERUJVRygwLCgic3Ry
X2xpc3Rfc3Vic3RpdHV0ZTogIgotCQkJCQkJIlVuYWJsZSB0byBhbGxvY2F0ZSBtZW1vcnki
KSk7Ci0JCQkJCXJldHVybiBmYWxzZTsKLQkJCQl9Ci0JCQkJbWVtY3B5KHQsICpsaXN0LCBk
KTsKLQkJCQltZW1jcHkodCArZCArbGksIHAgK2xwLCBscyAtZCAtbHAgKzEpOwotCQkJCVRB
TExPQ19GUkVFKCpsaXN0KTsKLQkJCQkqbGlzdCA9IHQ7Ci0JCQkJbHMgKz0gbGQ7Ci0JCQkJ
cyA9IHQgK2QgK2xpOwotCQkJfQotCi0JCQlmb3IgKGkgPSAwOyBpIDwgbGk7IGkrKykgewot
CQkJCXN3aXRjaCAoaW5zZXJ0W2ldKSB7Ci0JCQkJCWNhc2UgJ2AnOgotCQkJCQljYXNlICci
JzoKLQkJCQkJY2FzZSAnXCcnOgotCQkJCQljYXNlICc7JzoKLQkJCQkJY2FzZSAnJCc6Ci0J
CQkJCWNhc2UgJyUnOgotCQkJCQljYXNlICdccic6Ci0JCQkJCWNhc2UgJ1xuJzoKLQkJCQkJ
CXRbZCAraV0gPSAnXyc7Ci0JCQkJCQlicmVhazsKLQkJCQkJZGVmYXVsdDoKLQkJCQkJCXRb
ZCAraV0gPSBpbnNlcnRbaV07Ci0JCQkJfQotCQkJfQotCQl9Ci0KLQkJbGlzdCsrOwotCX0K
LQotCXJldHVybiB0cnVlOwotfQotCi0KICNkZWZpbmUgSVBTVFJfTElTVF9TRVAJIiwiCiAj
ZGVmaW5lIElQU1RSX0xJU1RfQ0hBUgknLCcKIAotLSAKMi4xNy4xCgoKRnJvbSA1ODM4NGU0
ZGZiNWJkNjgxN2ZlYjlhMzI1ODMwY2EyMGUwZTA2YjAyIE1vbiBTZXAgMTcgMDA6MDA6MDAg
MjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBU
dWUsIDE1IE9jdCAyMDE5IDEyOjA3OjE3ICswMjAwClN1YmplY3Q6IFtQQVRDSCAwMy8xOF0g
czM6cGFyYW06IGludHJvZHVjZSBscF9zdWJzdGl0dXRlZF9zdHJpbmcoKQoKVGhlIGlkZWEg
aXMgdG8gZ2V0IHJpZCBvZiB0aGUgZ2xvYmFsIHN0YXRlIHRoYXQncwpjdXJyZW50bHkgdXNl
ZCBmb3IgdGhlIHN1YnN0aXR1dGlvbiBpbiBscF9zdHJpbmcoKS4KCkluIHRoZSBlbmQgYWxs
IGNhbGxlcnMgbmVlZCB0byBwYXNzIGFuIGV4cGxpY2l0CmNvbnN0IHN0cnVjdCBsb2FkcGFy
bV9zdWJzdGl0dXRpb24gKnN1Yl9jdHgsCndoaWNoIGNvbnRhaW5zIGFsbCByZWxldmFudCBp
bmZvcm1hdGlvbgpmb3IgdGhlIHN1YnN0aXR1dGlvbi4KCkZvciBub3cgd2UgaW50cm9kdWNl
IGxvYWRwYXJtX3MzX2dsb2JhbF9zdWJzdGl0dXRpb24oKQphcyBhIHBsYWNlaG9sZGVyIGZv
ciBhIHZhbGlkIHBvaW50ZXIsIGJ1dCBzdGlsbCB1bmNoYW5nZWQKYmVoYXZpb3IuCgpTaWdu
ZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0KIHNv
dXJjZTMvaW5jbHVkZS9wcm90by5oICB8ICA2ICsrKysrKwogc291cmNlMy9wYXJhbS9sb2Fk
cGFybS5jIHwgMzQgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKy0tLQogMiBmaWxl
cyBjaGFuZ2VkLCAzNyBpbnNlcnRpb25zKCspLCAzIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdp
dCBhL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oIGIvc291cmNlMy9pbmNsdWRlL3Byb3RvLmgK
aW5kZXggODFkZGIyYTY3M2EzLi5hY2I3ZTk1OTY2YzEgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMv
aW5jbHVkZS9wcm90by5oCisrKyBiL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCkBAIC03MzEs
NiArNzMxLDEyIEBAIE5UU1RBVFVTIHRydXN0X3B3X2NoYW5nZShzdHJ1Y3QgbmV0bG9nb25f
Y3JlZHNfY2xpX2NvbnRleHQgKmNvbnRleHQsCiAKIC8qIFRoZSBmb2xsb3dpbmcgZGVmaW5p
dGlvbnMgY29tZSBmcm9tIHBhcmFtL2xvYWRwYXJtLmMgICovCiAKK3N0cnVjdCBsb2FkcGFy
bV9zdWJzdGl0dXRpb247Citjb25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICps
b2FkcGFybV9zM19nbG9iYWxfc3Vic3RpdHV0aW9uKHZvaWQpOworY2hhciAqbHBfc3Vic3Rp
dHV0ZWRfc3RyaW5nKFRBTExPQ19DVFggKm1lbV9jdHgsCisJCQkgICAgY29uc3Qgc3RydWN0
IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiAqbHBfc3ViLAorCQkJICAgIGNvbnN0IGNoYXIgKnMp
OworCiAjaW5jbHVkZSAic291cmNlMy9wYXJhbS9wYXJhbV9wcm90by5oIgogCiBjaGFyICps
cF9zZXJ2aWNlbmFtZShUQUxMT0NfQ1RYICpjdHgsIGludCk7CmRpZmYgLS1naXQgYS9zb3Vy
Y2UzL3BhcmFtL2xvYWRwYXJtLmMgYi9zb3VyY2UzL3BhcmFtL2xvYWRwYXJtLmMKaW5kZXgg
YjFhNTIwNTVhZGU3Li45N2FkZjk4ODVhZWMgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvcGFyYW0v
bG9hZHBhcm0uYworKysgYi9zb3VyY2UzL3BhcmFtL2xvYWRwYXJtLmMKQEAgLTk4NiwxNiAr
OTg2LDMxIEBAIHN0YXRpYyBzdHJ1Y3QgbG9hZHBhcm1fY29udGV4dCAqc2V0dXBfbHBfY29u
dGV4dChUQUxMT0NfQ1RYICptZW1fY3R4KQogCXJldHVybiBscF9jdHg7CiB9CiAKK3N0cnVj
dCBsb2FkcGFybV9zdWJzdGl0dXRpb24geworCXVpbnQ4X3QgZHVtbXk7Cit9OworCitzdGF0
aWMgY29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiBzM19nbG9iYWxfc3Vic3Rp
dHV0aW9uOworCitjb25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpsb2FkcGFy
bV9zM19nbG9iYWxfc3Vic3RpdHV0aW9uKHZvaWQpCit7CisJcmV0dXJuICZzM19nbG9iYWxf
c3Vic3RpdHV0aW9uOworfQorCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogIENvbnZlbmllbmNlIHJvdXRp
bmUgdG8gZ3JhYiBzdHJpbmcgcGFyYW1ldGVycyBpbnRvIHRhbGxvY2VkIG1lbW9yeQogIGFu
ZCBydW4gc3RhbmRhcmRfc3ViX2Jhc2ljIG9uIHRoZW0uIFRoZSBidWZmZXJzIGNhbiBiZSB3
cml0dGVuIHRvIGJ5CiAgY2FsbGVycyB3aXRob3V0IGFmZmVjdGluZyB0aGUgc291cmNlIHN0
cmluZy4KICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLwogCi1jaGFyICpscF9zdHJpbmcoVEFMTE9DX0NUWCAq
Y3R4LCBjb25zdCBjaGFyICpzKQorY2hhciAqbHBfc3Vic3RpdHV0ZWRfc3RyaW5nKFRBTExP
Q19DVFggKm1lbV9jdHgsCisJCQkgICAgY29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1
dGlvbiAqbHBfc3ViLAorCQkJICAgIGNvbnN0IGNoYXIgKnMpCiB7CiAJY2hhciAqcmV0Owog
CisJU01CX0FTU0VSVChscF9zdWIgIT0gTlVMTCk7CisKIAkvKiBUaGUgZm9sbG93IGRlYnVn
IGlzIHVzZWZ1bCBmb3IgdHJhY2tpbmcgZG93biBtZW1vcnkgcHJvYmxlbXMKIAkgICBlc3Bl
Y2lhbGx5IGlmIHlvdSBoYXZlIGFuIGlubmVyIGxvb3AgdGhhdCBpcyBjYWxsaW5nIGEgbHBf
KigpCiAJICAgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nLiAgUGVyaGFwcyB0aGlz
IGRlYnVnIHNob3VsZCBiZQpAQCAtMTAwOCwxNCArMTAyMywyMiBAQCBjaGFyICpscF9zdHJp
bmcoVEFMTE9DX0NUWCAqY3R4LCBjb25zdCBjaGFyICpzKQogCQlyZXR1cm4gTlVMTDsKIAl9
CiAKLQlyZXQgPSB0YWxsb2Nfc3ViX2Jhc2ljKGN0eCwKKwlpZiAobHBfc3ViICE9ICZzM19n
bG9iYWxfc3Vic3RpdHV0aW9uKSB7CisJCS8qCisJCSAqIEtlZXAgaXQgc2ltcGxlIGZvciBu
b3csIHVudGlsCisJCSAqIGFsbCBjYWxsZXJzIHBhc3Mgc29tZXRoaW5nIHVzZWZ1bC4KKwkJ
ICovCisJCXJldHVybiB0YWxsb2Nfc3RyZHVwKG1lbV9jdHgsIHMpOworCX0KKworCXJldCA9
IHRhbGxvY19zdWJfYmFzaWMobWVtX2N0eCwKIAkJCWdldF9jdXJyZW50X3VzZXJuYW1lKCks
CiAJCQljdXJyZW50X3VzZXJfaW5mby5kb21haW4sCiAJCQlzKTsKIAlpZiAodHJpbV9jaGFy
KHJldCwgJ1wiJywgJ1wiJykpIHsKIAkJaWYgKHN0cmNocihyZXQsJ1wiJykgIT0gTlVMTCkg
ewogCQkJVEFMTE9DX0ZSRUUocmV0KTsKLQkJCXJldCA9IHRhbGxvY19zdWJfYmFzaWMoY3R4
LAorCQkJcmV0ID0gdGFsbG9jX3N1Yl9iYXNpYyhtZW1fY3R4LAogCQkJCQlnZXRfY3VycmVu
dF91c2VybmFtZSgpLAogCQkJCQljdXJyZW50X3VzZXJfaW5mby5kb21haW4sCiAJCQkJCXMp
OwpAQCAtMTAyNCw2ICsxMDQ3LDExIEBAIGNoYXIgKmxwX3N0cmluZyhUQUxMT0NfQ1RYICpj
dHgsIGNvbnN0IGNoYXIgKnMpCiAJcmV0dXJuIHJldDsKIH0KIAorY2hhciAqbHBfc3RyaW5n
KFRBTExPQ19DVFggKmN0eCwgY29uc3QgY2hhciAqcykKK3sKKwlyZXR1cm4gbHBfc3Vic3Rp
dHV0ZWRfc3RyaW5nKGN0eCwgJnMzX2dsb2JhbF9zdWJzdGl0dXRpb24sIHMpOworfQorCiAv
KgogICAgSW4gdGhpcyBzZWN0aW9uIGFsbCB0aGUgZnVuY3Rpb25zIHRoYXQgYXJlIHVzZWQg
dG8gYWNjZXNzIHRoZQogICAgcGFyYW1ldGVycyBmcm9tIHRoZSByZXN0IG9mIHRoZSBwcm9n
cmFtIGFyZSBkZWZpbmVkCi0tIAoyLjE3LjEKCgpGcm9tIGM2OGNkOTIwMzhjN2I3MGFhMDNh
ODIyM2FmNTc3MDA3YjM4NWEwZDMgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0
ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+CkRhdGU6IFR1ZSwgMTUgT2N0IDIw
MTkgMTI6Mjk6MDggKzAyMDAKU3ViamVjdDogW1BBVENIIDA0LzE4XSBzMzpwYXJhbTogc3Bs
aXQgb3V0IGxwX3Bhcm1fc3Vic3RpdHV0ZWRfc3RyaW5nKCkKClNpZ25lZC1vZmYtYnk6IFN0
ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+Ci0tLQogc291cmNlMy9pbmNsdWRl
L3Byb3RvLmggIHwgIDYgKysrKysrCiBzb3VyY2UzL3BhcmFtL2xvYWRwYXJtLmMgfCAyNyAr
KysrKysrKysrKysrKysrKysrKysrKystLS0KIDIgZmlsZXMgY2hhbmdlZCwgMzAgaW5zZXJ0
aW9ucygrKSwgMyBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9zb3VyY2UzL2luY2x1ZGUv
cHJvdG8uaCBiL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCmluZGV4IGFjYjdlOTU5NjZjMS4u
ZjE5ODMyYTkwODlkIDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaAorKysg
Yi9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaApAQCAtNzM2LDYgKzczNiwxMiBAQCBjb25zdCBz
dHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpsb2FkcGFybV9zM19nbG9iYWxfc3Vic3Rp
dHV0aW9uKHZvaWQpOwogY2hhciAqbHBfc3Vic3RpdHV0ZWRfc3RyaW5nKFRBTExPQ19DVFgg
Km1lbV9jdHgsCiAJCQkgICAgY29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiAq
bHBfc3ViLAogCQkJICAgIGNvbnN0IGNoYXIgKnMpOworY2hhciAqbHBfcGFybV9zdWJzdGl0
dXRlZF9zdHJpbmcoVEFMTE9DX0NUWCAqbWVtX2N0eCwKKwkJCQkgY29uc3Qgc3RydWN0IGxv
YWRwYXJtX3N1YnN0aXR1dGlvbiAqbHBfc3ViLAorCQkJCSBpbnQgc251bSwKKwkJCQkgY29u
c3QgY2hhciAqdHlwZSwKKwkJCQkgY29uc3QgY2hhciAqb3B0aW9uLAorCQkJCSBjb25zdCBj
aGFyICpkZWYpOwogCiAjaW5jbHVkZSAic291cmNlMy9wYXJhbS9wYXJhbV9wcm90by5oIgog
CmRpZmYgLS1naXQgYS9zb3VyY2UzL3BhcmFtL2xvYWRwYXJtLmMgYi9zb3VyY2UzL3BhcmFt
L2xvYWRwYXJtLmMKaW5kZXggOTdhZGY5ODg1YWVjLi45ZGI4ZTFlMDNlYjAgMTAwNjQ0Ci0t
LSBhL3NvdXJjZTMvcGFyYW0vbG9hZHBhcm0uYworKysgYi9zb3VyY2UzL3BhcmFtL2xvYWRw
YXJtLmMKQEAgLTEyNDIsMTkgKzEyNDIsNDAgQEAgc3RhdGljIGludCBscF9lbnVtKGNvbnN0
IGNoYXIgKnMsY29uc3Qgc3RydWN0IGVudW1fbGlzdCAqX2VudW0pCiAKIC8qIFJldHVybiBw
YXJhbWV0cmljIG9wdGlvbiBmcm9tIGEgZ2l2ZW4gc2VydmljZS4gVHlwZSBpcyBhIHBhcnQg
b2Ygb3B0aW9uIGJlZm9yZSAnOicgKi8KIC8qIFBhcmFtZXRyaWMgb3B0aW9uIGhhcyBmb2xs
b3dpbmcgc3ludGF4OiAnVHlwZTogb3B0aW9uID0gdmFsdWUnICovCi1jaGFyICpscF9wYXJt
X3RhbGxvY19zdHJpbmcoVEFMTE9DX0NUWCAqY3R4LCBpbnQgc251bSwgY29uc3QgY2hhciAq
dHlwZSwgY29uc3QgY2hhciAqb3B0aW9uLCBjb25zdCBjaGFyICpkZWYpCitjaGFyICpscF9w
YXJtX3N1YnN0aXR1dGVkX3N0cmluZyhUQUxMT0NfQ1RYICptZW1fY3R4LAorCQkJCSBjb25z
dCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWIsCisJCQkJIGludCBzbnVt
LAorCQkJCSBjb25zdCBjaGFyICp0eXBlLAorCQkJCSBjb25zdCBjaGFyICpvcHRpb24sCisJ
CQkJIGNvbnN0IGNoYXIgKmRlZikKIHsKIAlzdHJ1Y3QgcGFybWxpc3RfZW50cnkgKmRhdGEg
PSBnZXRfcGFyYW1ldHJpY3Moc251bSwgdHlwZSwgb3B0aW9uKTsKIAorCVNNQl9BU1NFUlQo
bHBfc3ViICE9IE5VTEwpOworCiAJaWYgKGRhdGEgPT0gTlVMTHx8ZGF0YS0+dmFsdWU9PU5V
TEwpIHsKIAkJaWYgKGRlZikgewotCQkJcmV0dXJuIGxwX3N0cmluZyhjdHgsIGRlZik7CisJ
CQlyZXR1cm4gbHBfc3Vic3RpdHV0ZWRfc3RyaW5nKG1lbV9jdHgsIGxwX3N1YiwgZGVmKTsK
IAkJfSBlbHNlIHsKIAkJCXJldHVybiBOVUxMOwogCQl9CiAJfQogCi0JcmV0dXJuIGxwX3N0
cmluZyhjdHgsIGRhdGEtPnZhbHVlKTsKKwlyZXR1cm4gbHBfc3Vic3RpdHV0ZWRfc3RyaW5n
KG1lbV9jdHgsIGxwX3N1YiwgZGF0YS0+dmFsdWUpOworfQorCitjaGFyICpscF9wYXJtX3Rh
bGxvY19zdHJpbmcoVEFMTE9DX0NUWCAqbWVtX2N0eCwKKwkJCSAgICBpbnQgc251bSwKKwkJ
CSAgICBjb25zdCBjaGFyICp0eXBlLAorCQkJICAgIGNvbnN0IGNoYXIgKm9wdGlvbiwKKwkJ
CSAgICBjb25zdCBjaGFyICpkZWYpCit7CisJcmV0dXJuIGxwX3Bhcm1fc3Vic3RpdHV0ZWRf
c3RyaW5nKG1lbV9jdHgsCisJCQkJCSAgJnMzX2dsb2JhbF9zdWJzdGl0dXRpb24sCisJCQkJ
CSAgc251bSwKKwkJCQkJICB0eXBlLAorCQkJCQkgIG9wdGlvbiwKKwkJCQkJICBkZWYpOwog
fQogCiAvKiBSZXR1cm4gcGFyYW1ldHJpYyBvcHRpb24gZnJvbSBhIGdpdmVuIHNlcnZpY2Uu
IFR5cGUgaXMgYSBwYXJ0IG9mIG9wdGlvbiBiZWZvcmUgJzonICovCi0tIAoyLjE3LjEKCgpG
cm9tIDllMjBlZjU5YmM0OGY3Mzc0YzgxYTM2M2U4MzdmMmQzODllMGVhNzcgTW9uIFNlcCAx
NyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5v
cmc+CkRhdGU6IFR1ZSwgMTUgT2N0IDIwMTkgMTM6Mzg6MTYgKzAyMDAKU3ViamVjdDogW1BB
VENIIDA1LzE4XSBzMzptZHNzdmM6IG1ha2UgdXNlIG9mIGxwX3Bhcm1fY29uc3Rfc3RyaW5n
KCkKCldlIGRvbid0IG5lZWQgYW55IHN1YnN0aXR1dGlvbiBmb3IgZWxhc3RpY3NlYXJjaCBv
cHRpb25zLgoKU2lnbmVkLW9mZi1ieTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJh
Lm9yZz4KLS0tCiBzb3VyY2UzL3JwY19zZXJ2ZXIvbWRzc3ZjL2VzX3BhcnNlcl90ZXN0LmMg
fCAxMiArKysrKy0tLS0tLQogc291cmNlMy9ycGNfc2VydmVyL21kc3N2Yy9tZHNzdmNfZXMu
YyAgICAgIHwgMjQgKysrKysrKysrKysrLS0tLS0tLS0tLQogMiBmaWxlcyBjaGFuZ2VkLCAx
OCBpbnNlcnRpb25zKCspLCAxOCBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9zb3VyY2Uz
L3JwY19zZXJ2ZXIvbWRzc3ZjL2VzX3BhcnNlcl90ZXN0LmMgYi9zb3VyY2UzL3JwY19zZXJ2
ZXIvbWRzc3ZjL2VzX3BhcnNlcl90ZXN0LmMKaW5kZXggNTc1MTYwNmZhMWVhLi43ZDg4YzY3
YWJmZmMgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvcnBjX3NlcnZlci9tZHNzdmMvZXNfcGFyc2Vy
X3Rlc3QuYworKysgYi9zb3VyY2UzL3JwY19zZXJ2ZXIvbWRzc3ZjL2VzX3BhcnNlcl90ZXN0
LmMKQEAgLTM5LDcgKzM5LDcgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KQog
CWpzb25fdCAqbWFwcGluZ3MgPSBOVUxMOwogCWpzb25fZXJyb3JfdCBqc29uX2Vycm9yOwog
CWNoYXIgKmRlZmF1bHRfcGF0aCA9IE5VTEw7Ci0JY2hhciAqcGF0aCA9IE5VTEw7CisJY29u
c3QgY2hhciAqcGF0aCA9IE5VTEw7CiAJY29uc3QgY2hhciAqcXVlcnlfc3RyaW5nID0gTlVM
TDsKIAljb25zdCBjaGFyICpwYXRoX3Njb3BlID0gTlVMTDsKIAljaGFyICplc19xdWVyeSA9
IE5VTEw7CkBAIC02NywxMiArNjcsMTAgQEAgaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiph
cmd2KQogCQlyZXR1cm4gMTsKIAl9CiAKLQlwYXRoID0gbHBfcGFybV90YWxsb2Nfc3RyaW5n
KG1lbV9jdHgsCi0JCQkJICAgICBHTE9CQUxfU0VDVElPTl9TTlVNLAotCQkJCSAgICAgImVs
YXN0aWNzZWFyY2giLAotCQkJCSAgICAgIm1hcHBpbmdzIiwKLQkJCQkgICAgIGRlZmF1bHRf
cGF0aCk7Ci0JVEFMTE9DX0ZSRUUoZGVmYXVsdF9wYXRoKTsKKwlwYXRoID0gbHBfcGFybV9j
b25zdF9zdHJpbmcoR0xPQkFMX1NFQ1RJT05fU05VTSwKKwkJCQkgICAgImVsYXN0aWNzZWFy
Y2giLAorCQkJCSAgICAibWFwcGluZ3MiLAorCQkJCSAgICBkZWZhdWx0X3BhdGgpOwogCWlm
IChwYXRoID09IE5VTEwpIHsKIAkJVEFMTE9DX0ZSRUUobWVtX2N0eCk7CiAJCXJldHVybiAx
OwpkaWZmIC0tZ2l0IGEvc291cmNlMy9ycGNfc2VydmVyL21kc3N2Yy9tZHNzdmNfZXMuYyBi
L3NvdXJjZTMvcnBjX3NlcnZlci9tZHNzdmMvbWRzc3ZjX2VzLmMKaW5kZXggM2M1NGFiZjAx
ZmRlLi5hYTE2OWE4MGUxZmUgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvcnBjX3NlcnZlci9tZHNz
dmMvbWRzc3ZjX2VzLmMKKysrIGIvc291cmNlMy9ycGNfc2VydmVyL21kc3N2Yy9tZHNzdmNf
ZXMuYwpAQCAtNTUsNyArNTUsNyBAQCBzdGF0aWMgYm9vbCBtZHNzdmNfZXNfaW5pdChzdHJ1
Y3QgbWRzc3ZjX2N0eCAqbWRzc3ZjX2N0eCkKIAlzdHJ1Y3QgbWRzc3ZjX2VzX2N0eCAqbWRz
c3ZjX2VzX2N0eCA9IE5VTEw7CiAJanNvbl9lcnJvcl90IGpzb25fZXJyb3I7CiAJY2hhciAq
ZGVmYXVsdF9wYXRoID0gTlVMTDsKLQljaGFyICpwYXRoID0gTlVMTDsKKwljb25zdCBjaGFy
ICpwYXRoID0gTlVMTDsKIAogCW1kc3N2Y19lc19jdHggPSB0YWxsb2NfemVybyhtZHNzdmNf
Y3R4LCBzdHJ1Y3QgbWRzc3ZjX2VzX2N0eCk7CiAJaWYgKG1kc3N2Y19lc19jdHggPT0gTlVM
TCkgewpAQCAtNzgsMTIgKzc4LDEwIEBAIHN0YXRpYyBib29sIG1kc3N2Y19lc19pbml0KHN0
cnVjdCBtZHNzdmNfY3R4ICptZHNzdmNfY3R4KQogCQlyZXR1cm4gZmFsc2U7CiAJfQogCi0J
cGF0aCA9IGxwX3Bhcm1fdGFsbG9jX3N0cmluZyhtZHNzdmNfZXNfY3R4LAotCQkJCSAgICAg
R0xPQkFMX1NFQ1RJT05fU05VTSwKLQkJCQkgICAgICJlbGFzdGljc2VhcmNoIiwKLQkJCQkg
ICAgICJtYXBwaW5ncyIsCi0JCQkJICAgICBkZWZhdWx0X3BhdGgpOwotCVRBTExPQ19GUkVF
KGRlZmF1bHRfcGF0aCk7CisJcGF0aCA9IGxwX3Bhcm1fY29uc3Rfc3RyaW5nKEdMT0JBTF9T
RUNUSU9OX1NOVU0sCisJCQkJICAgICJlbGFzdGljc2VhcmNoIiwKKwkJCQkgICAgIm1hcHBp
bmdzIiwKKwkJCQkgICAgZGVmYXVsdF9wYXRoKTsKIAlpZiAocGF0aCA9PSBOVUxMKSB7CiAJ
CVRBTExPQ19GUkVFKG1kc3N2Y19lc19jdHgpOwogCQlyZXR1cm4gZmFsc2U7CkBAIC05Mywx
MSArOTEsMTAgQEAgc3RhdGljIGJvb2wgbWRzc3ZjX2VzX2luaXQoc3RydWN0IG1kc3N2Y19j
dHggKm1kc3N2Y19jdHgpCiAJaWYgKG1kc3N2Y19lc19jdHgtPm1hcHBpbmdzID09IE5VTEwp
IHsKIAkJREJHX0VSUigiT3BlbmluZyBtYXBwaW5nIGZpbGUgWyVzXSBmYWlsZWQ6ICVzXG4i
LAogCQkJcGF0aCwganNvbl9lcnJvci50ZXh0KTsKLQkJVEFMTE9DX0ZSRUUocGF0aCk7CiAJ
CVRBTExPQ19GUkVFKG1kc3N2Y19lc19jdHgpOwogCQlyZXR1cm4gZmFsc2U7CiAJfQotCVRB
TExPQ19GUkVFKHBhdGgpOworCVRBTExPQ19GUkVFKGRlZmF1bHRfcGF0aCk7CiAKIAltZHNz
dmNfY3R4LT5iYWNrZW5kX3ByaXZhdGUgPSBtZHNzdmNfZXNfY3R4OwogCXJldHVybiB0cnVl
OwpAQCAtMTg3LDYgKzE4NCw3IEBAIHN0YXRpYyBzdHJ1Y3QgdGV2ZW50X3JlcSAqbWRzX2Vz
X2Nvbm5lY3Rfc2VuZCgKIAlzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxID0gTlVMTDsKIAlzdHJ1
Y3QgdGV2ZW50X3JlcSAqc3VicmVxID0gTlVMTDsKIAlzdHJ1Y3QgbWRzX2VzX2Nvbm5lY3Rf
c3RhdGUgKnN0YXRlID0gTlVMTDsKKwljb25zdCBjaGFyICpzZXJ2ZXJfYWRkciA9IE5VTEw7
CiAJYm9vbCB1c2VfdGxzOwogCU5UU1RBVFVTIHN0YXR1czsKIApAQCAtMTk5LDEyICsxOTcs
MTYgQEAgc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICptZHNfZXNfY29ubmVjdF9zZW5kKAog
CQkubWRzX2VzX2N0eCA9IG1kc19lc19jdHgsCiAJfTsKIAotCXN0YXRlLT5zZXJ2ZXJfYWRk
ciA9IGxwX3Bhcm1fdGFsbG9jX3N0cmluZygKLQkJc3RhdGUsCisJc2VydmVyX2FkZHIgPSBs
cF9wYXJtX2NvbnN0X3N0cmluZygKIAkJbWRzX2VzX2N0eC0+bWRzX2N0eC0+c251bSwKIAkJ
ImVsYXN0aWNzZWFyY2giLAogCQkiYWRkcmVzcyIsCiAJCSJsb2NhbGhvc3QiKTsKKwlzdGF0
ZS0+c2VydmVyX2FkZHIgPSB0YWxsb2Nfc3RyZHVwKHN0YXRlLCBzZXJ2ZXJfYWRkcik7CisJ
aWYgKHRldmVudF9yZXFfbm9tZW0oc3RhdGUtPnNlcnZlcl9hZGRyLCByZXEpKSB7CisJCXJl
dHVybiB0ZXZlbnRfcmVxX3Bvc3QocmVxLCBldik7CisJfQorCiAJc3RhdGUtPnNlcnZlcl9w
b3J0ID0gbHBfcGFybV9pbnQoCiAJCW1kc19lc19jdHgtPm1kc19jdHgtPnNudW0sCiAJCSJl
bGFzdGljc2VhcmNoIiwKLS0gCjIuMTcuMQoKCkZyb20gNGU3YzFjNjNkZDk5ZDc1OGQ0MDMw
MTJiMTQwYjRkNjYzODk4NzA2NCBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogU3Rl
ZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KRGF0ZTogVHVlLCAxNSBPY3QgMjAx
OSAxMzo1Njo0NCArMDIwMApTdWJqZWN0OiBbUEFUQ0ggMDYvMThdIHMzOnZmc190c21zbTog
bWFrZSB1c2Ugb2YgbHBfcGFybV9zdWJzdGl0dXRlZF9zdHJpbmcoKQoKU2lnbmVkLW9mZi1i
eTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBzb3VyY2UzL21v
ZHVsZXMvdmZzX3RzbXNtLmMgfCAxNCArKysrKysrKy0tLS0tLQogMSBmaWxlIGNoYW5nZWQs
IDggaW5zZXJ0aW9ucygrKSwgNiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9zb3VyY2Uz
L21vZHVsZXMvdmZzX3RzbXNtLmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX3RzbXNtLmMKaW5k
ZXggODVhOWJmZGZhOWMwLi4yN2IyMTM2OTY3MzYgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9k
dWxlcy92ZnNfdHNtc20uYworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX3RzbXNtLmMKQEAg
LTg5LDYgKzg5LDggQEAgc3RhdGljIHZvaWQgdHNtc21fZnJlZV9kYXRhKHZvaWQgKipwcHRy
KSB7CiBzdGF0aWMgaW50IHRzbXNtX2Nvbm5lY3Qoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsCiAJCQkgY29uc3QgY2hhciAqc2VydmljZSwKIAkJCSBjb25zdCBjaGFyICp1
c2VyKSB7CisJY29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiAqbHBfc3ViID0K
KwkJbG9hZHBhcm1fczNfZ2xvYmFsX3N1YnN0aXR1dGlvbigpOwogCXN0cnVjdCB0c21zbV9z
dHJ1Y3QgKnRzbWQ7CiAJY29uc3QgY2hhciAqZnJlczsKIAljb25zdCBjaGFyICp0c21uYW1l
OwpAQCAtMTE1LDE4ICsxMTcsMTggQEAgc3RhdGljIGludCB0c21zbV9jb25uZWN0KHN0cnVj
dCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCXRzbW5hbWUgPSAoaGFuZGxlLT5wYXJh
bSA/IGhhbmRsZS0+cGFyYW0gOiAidHNtc20iKTsKIAkKIAkvKiBHZXQgJ2hzbSBzY3JpcHQn
IGFuZCAnZG1hcGkgYXR0cmlidXRlJyBwYXJhbWV0ZXJzIHRvIHRzbWQgY29udGV4dCAqLwot
CXRzbWQtPmhzbXNjcmlwdCA9IGxwX3Bhcm1fdGFsbG9jX3N0cmluZygKLQkJdHNtZCwgU05V
TShoYW5kbGUtPmNvbm4pLCB0c21uYW1lLAorCXRzbWQtPmhzbXNjcmlwdCA9IGxwX3Bhcm1f
c3Vic3RpdHV0ZWRfc3RyaW5nKAorCQl0c21kLCBscF9zdWIsIFNOVU0oaGFuZGxlLT5jb25u
KSwgdHNtbmFtZSwKIAkJImhzbSBzY3JpcHQiLCBOVUxMKTsKIAl0YWxsb2Nfc3RlYWwodHNt
ZCwgdHNtZC0+aHNtc2NyaXB0KTsKIAkKLQl0c21kLT5hdHRyaWJfbmFtZSA9IGxwX3Bhcm1f
dGFsbG9jX3N0cmluZygKLQkJdHNtZCwgU05VTShoYW5kbGUtPmNvbm4pLCB0c21uYW1lLAor
CXRzbWQtPmF0dHJpYl9uYW1lID0gbHBfcGFybV9zdWJzdGl0dXRlZF9zdHJpbmcoCisJCXRz
bWQsIGxwX3N1YiwgU05VTShoYW5kbGUtPmNvbm4pLCB0c21uYW1lLAogCQkiZG1hcGkgYXR0
cmlidXRlIiwgRE1fQVRUUklCX09CSkVDVCk7CiAJdGFsbG9jX3N0ZWFsKHRzbWQsIHRzbWQt
PmF0dHJpYl9uYW1lKTsKIAkKLQl0c21kLT5hdHRyaWJfdmFsdWUgPSBscF9wYXJtX3RhbGxv
Y19zdHJpbmcoCi0JCXRzbWQsIFNOVU0oaGFuZGxlLT5jb25uKSwgdHNtbmFtZSwKKwl0c21k
LT5hdHRyaWJfdmFsdWUgPSBscF9wYXJtX3N1YnN0aXR1dGVkX3N0cmluZygKKwkJdHNtZCwg
bHBfc3ViLCBTTlVNKGhhbmRsZS0+Y29ubiksIHRzbW5hbWUsCiAJCSJkbWFwaSB2YWx1ZSIs
IE5VTEwpOwogCXRhbGxvY19zdGVhbCh0c21kLCB0c21kLT5hdHRyaWJfdmFsdWUpOwogCQot
LSAKMi4xNy4xCgoKRnJvbSAwN2Q0ZmUzMWNlNGI5YjM0NTE4YTAwM2E5ZTVjNDNkYWZkMGY1
ZWYzIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8
bWV0emVAc2FtYmEub3JnPgpEYXRlOiBUdWUsIDE1IE9jdCAyMDE5IDEzOjU4OjQ4ICswMjAw
ClN1YmplY3Q6IFtQQVRDSCAwNy8xOF0gczM6dmZzX3N0cmVhbXNfZGVwb3Q6IG1ha2UgdXNl
IG9mCiBscF9wYXJtX3N1YnN0aXR1dGVkX3N0cmluZygpCgpTaWduZWQtb2ZmLWJ5OiBTdGVm
YW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0KIHNvdXJjZTMvbW9kdWxlcy92
ZnNfc3RyZWFtc19kZXBvdC5jIHwgNCArKystCiAxIGZpbGUgY2hhbmdlZCwgMyBpbnNlcnRp
b25zKCspLCAxIGRlbGV0aW9uKC0pCgpkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zm
c19zdHJlYW1zX2RlcG90LmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX3N0cmVhbXNfZGVwb3Qu
YwppbmRleCA5ZjNiNzk5OTJiYzEuLjliMGU3M2IyNWI3OCAxMDA2NDQKLS0tIGEvc291cmNl
My9tb2R1bGVzL3Zmc19zdHJlYW1zX2RlcG90LmMKKysrIGIvc291cmNlMy9tb2R1bGVzL3Zm
c19zdHJlYW1zX2RlcG90LmMKQEAgLTExNSw2ICsxMTUsOCBAQCBzdGF0aWMgY2hhciAqc3Ry
ZWFtX2Rpcih2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCQkJY29uc3Qgc3RydWN0IHNt
Yl9maWxlbmFtZSAqc21iX2ZuYW1lLAogCQkJY29uc3QgU01CX1NUUlVDVF9TVEFUICpiYXNl
X3NidWYsIGJvb2wgY3JlYXRlX2l0KQogeworCWNvbnN0IHN0cnVjdCBsb2FkcGFybV9zdWJz
dGl0dXRpb24gKmxwX3N1YiA9CisJCWxvYWRwYXJtX3MzX2dsb2JhbF9zdWJzdGl0dXRpb24o
KTsKIAl1aW50MzJfdCBoYXNoOwogCXN0cnVjdCBzbWJfZmlsZW5hbWUgKnNtYl9mbmFtZV9o
YXNoID0gTlVMTDsKIAljaGFyICpyZXN1bHQgPSBOVUxMOwpAQCAtMTQxLDcgKzE0Myw3IEBA
IHN0YXRpYyBjaGFyICpzdHJlYW1fZGlyKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJ
CWdvdG8gZmFpbDsKIAl9CiAKLQlyb290ZGlyID0gbHBfcGFybV90YWxsb2Nfc3RyaW5nKHRh
bGxvY190b3MoKSwKKwlyb290ZGlyID0gbHBfcGFybV9zdWJzdGl0dXRlZF9zdHJpbmcodGFs
bG9jX3RvcygpLCBscF9zdWIsCiAJCVNOVU0oaGFuZGxlLT5jb25uKSwgInN0cmVhbXNfZGVw
b3QiLCAiZGlyZWN0b3J5IiwKIAkJdG1wKTsKIAlpZiAocm9vdGRpciA9PSBOVUxMKSB7Ci0t
IAoyLjE3LjEKCgpGcm9tIDc3ZmE2NTZmZWEwODZlZjM0ZTMxNDY3NjY0ODlhZmRmNmMzNTgx
NjIgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxt
ZXR6ZUBzYW1iYS5vcmc+CkRhdGU6IFR1ZSwgMTUgT2N0IDIwMTkgMTQ6MDA6MjkgKzAyMDAK
U3ViamVjdDogW1BBVENIIDA4LzE4XSBzMzp2ZnNfbmZzNGFjbF94YXR0cjogbWFrZSB1c2Ug
b2YKIGxwX3Bhcm1fc3Vic3RpdHV0ZWRfc3RyaW5nKCkKClNpZ25lZC1vZmYtYnk6IFN0ZWZh
biBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+Ci0tLQogc291cmNlMy9tb2R1bGVzL3Zm
c19uZnM0YWNsX3hhdHRyLmMgfCA0ICsrKy0KIDEgZmlsZSBjaGFuZ2VkLCAzIGluc2VydGlv
bnMoKyksIDEgZGVsZXRpb24oLSkKCmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZz
X25mczRhY2xfeGF0dHIuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfbmZzNGFjbF94YXR0ci5j
CmluZGV4IGQwMzA3OWJlODMxZS4uZjhjYmU3OTY0ZDE0IDEwMDY0NAotLS0gYS9zb3VyY2Uz
L21vZHVsZXMvdmZzX25mczRhY2xfeGF0dHIuYworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZz
X25mczRhY2xfeGF0dHIuYwpAQCAtNDc2LDYgKzQ3Niw4IEBAIHN0YXRpYyBpbnQgbmZzNGFj
bF9jb25uZWN0KHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCQkJICAgY29u
c3QgY2hhciAqc2VydmljZSwKIAkJCSAgIGNvbnN0IGNoYXIgKnVzZXIpCiB7CisJY29uc3Qg
c3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiAqbHBfc3ViID0KKwkJbG9hZHBhcm1fczNf
Z2xvYmFsX3N1YnN0aXR1dGlvbigpOwogCXN0cnVjdCBuZnM0YWNsX2NvbmZpZyAqY29uZmln
ID0gTlVMTDsKIAljb25zdCBzdHJ1Y3QgZW51bV9saXN0ICpkZWZhdWx0X2FjbF9zdHlsZV9s
aXN0ID0gTlVMTDsKIAljb25zdCBjaGFyICpkZWZhdWx0X3hhdHRyX25hbWUgPSBOVUxMOwpA
QCAtNTUxLDcgKzU1Myw3IEBAIHN0YXRpYyBpbnQgbmZzNGFjbF9jb25uZWN0KHN0cnVjdCB2
ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCQkJCQkJIGRlZmF1bHRfYWNsX3N0eWxlX2xp
c3QsCiAJCQkJCQkgREVGQVVMVF9BQ0xfRVZFUllPTkUpOwogCi0JY29uZmlnLT54YXR0cl9u
YW1lID0gbHBfcGFybV90YWxsb2Nfc3RyaW5nKGNvbmZpZywKKwljb25maWctPnhhdHRyX25h
bWUgPSBscF9wYXJtX3N1YnN0aXR1dGVkX3N0cmluZyhjb25maWcsIGxwX3N1YiwKIAkJCQkJ
CSAgIFNOVU0oaGFuZGxlLT5jb25uKSwKIAkJCQkJCSAgICJuZnM0YWNsX3hhdHRyIiwKIAkJ
CQkJCSAgICJ4YXR0cl9uYW1lIiwKLS0gCjIuMTcuMQoKCkZyb20gNDY2MjA1NDI2OTkwMDI5
OTllMjZhNWIyMzIyYjU2NjU2MzU1Zjg4ZSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJv
bTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KRGF0ZTogVHVlLCAxNSBP
Y3QgMjAxOSAxNDowNDoyNyArMDIwMApTdWJqZWN0OiBbUEFUQ0ggMDkvMThdIHMzOnZmc19n
bHVzdGVyZnM6IG1ha2UgdXNlIG9mCiBscF9wYXJtX3N1YnN0aXR1dGVkX3N0cmluZygpCgpT
aWduZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0K
IHNvdXJjZTMvbW9kdWxlcy92ZnNfZ2x1c3RlcmZzLmMgfCAxOSArKysrKysrKysrKysrKy0t
LS0tCiAxIGZpbGUgY2hhbmdlZCwgMTQgaW5zZXJ0aW9ucygrKSwgNSBkZWxldGlvbnMoLSkK
CmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZzX2dsdXN0ZXJmcy5jIGIvc291cmNl
My9tb2R1bGVzL3Zmc19nbHVzdGVyZnMuYwppbmRleCAzZTI4ZmNkMTQzZmUuLjY0NmE1ZjU5
Mjc4ZiAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19nbHVzdGVyZnMuYworKysg
Yi9zb3VyY2UzL21vZHVsZXMvdmZzX2dsdXN0ZXJmcy5jCkBAIC0yNjgsNiArMjY4LDggQEAg
c3RhdGljIGludCB2ZnNfZ2x1c3Rlcl9jb25uZWN0KHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZGxlLAogCQkJICAgICAgIGNvbnN0IGNoYXIgKnNlcnZpY2UsCiAJCQkgICAgICAg
Y29uc3QgY2hhciAqdXNlcikKIHsKKwljb25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0
aW9uICpscF9zdWIgPQorCQlsb2FkcGFybV9zM19nbG9iYWxfc3Vic3RpdHV0aW9uKCk7CiAJ
Y29uc3QgY2hhciAqdm9sZmlsZV9zZXJ2ZXJzOwogCWNvbnN0IGNoYXIgKnZvbHVtZTsKIAlj
aGFyICpsb2dmaWxlOwpAQCAtMjgxLDE0ICsyODMsMjEgQEAgc3RhdGljIGludCB2ZnNfZ2x1
c3Rlcl9jb25uZWN0KHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCQlyZXQg
PSAtMTsKIAkJZ290byBkb25lOwogCX0KLQlsb2dmaWxlID0gbHBfcGFybV90YWxsb2Nfc3Ry
aW5nKHRtcF9jdHgsIFNOVU0oaGFuZGxlLT5jb25uKSwgImdsdXN0ZXJmcyIsCi0JCQkJICAg
ICAgICJsb2dmaWxlIiwgTlVMTCk7CisJbG9nZmlsZSA9IGxwX3Bhcm1fc3Vic3RpdHV0ZWRf
c3RyaW5nKHRtcF9jdHgsCisJCQkJCSAgICAgbHBfc3ViLAorCQkJCQkgICAgIFNOVU0oaGFu
ZGxlLT5jb25uKSwKKwkJCQkJICAgICAiZ2x1c3RlcmZzIiwKKwkJCQkJICAgICAibG9nZmls
ZSIsCisJCQkJCSAgICAgTlVMTCk7CiAKIAlsb2dsZXZlbCA9IGxwX3Bhcm1faW50KFNOVU0o
aGFuZGxlLT5jb25uKSwgImdsdXN0ZXJmcyIsICJsb2dsZXZlbCIsIC0xKTsKIAotCXZvbGZp
bGVfc2VydmVycyA9IGxwX3Bhcm1fdGFsbG9jX3N0cmluZyh0bXBfY3R4LCBTTlVNKGhhbmRs
ZS0+Y29ubiksCi0JCQkJCSAgICAgICAiZ2x1c3RlcmZzIiwgInZvbGZpbGVfc2VydmVyIiwK
LQkJCQkJICAgICAgIE5VTEwpOworCXZvbGZpbGVfc2VydmVycyA9IGxwX3Bhcm1fc3Vic3Rp
dHV0ZWRfc3RyaW5nKHRtcF9jdHgsCisJCQkJCQkgICAgIGxwX3N1YiwKKwkJCQkJCSAgICAg
U05VTShoYW5kbGUtPmNvbm4pLAorCQkJCQkJICAgICAiZ2x1c3RlcmZzIiwKKwkJCQkJCSAg
ICAgInZvbGZpbGVfc2VydmVyIiwKKwkJCQkJCSAgICAgTlVMTCk7CiAJaWYgKHZvbGZpbGVf
c2VydmVycyA9PSBOVUxMKSB7CiAJCXZvbGZpbGVfc2VydmVycyA9IERFRkFVTFRfVk9MRklM
RV9TRVJWRVI7CiAJfQotLSAKMi4xNy4xCgoKRnJvbSBmNjNmMGM5NGY1YjUzZTU5MDQ4NjZl
ZTk1MjFiZGZhYTJhM2Q1MjBmIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVm
YW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBUdWUsIDE1IE9jdCAyMDE5
IDE0OjA1OjI0ICswMjAwClN1YmplY3Q6IFtQQVRDSCAxMC8xOF0gczM6cGFybTogcmVtb3Zl
IHVudXNlZCBscF9wYXJtX3RhbGxvY19zdHJpbmcoKQoKQ2FsbGVycyBzaG91bGQgdXNlIGxw
X3Bhcm1fc3Vic3RpdHV0ZWRfc3RyaW5nKCkKZGlyZWN0bHkgb3IganVzdCB1c2UgbHBfcGFy
bV9jb25zdF9zdHJpbmcoKS4KClNpZ25lZC1vZmYtYnk6IFN0ZWZhbiBNZXR6bWFjaGVyIDxt
ZXR6ZUBzYW1iYS5vcmc+Ci0tLQogc291cmNlMy9pbmNsdWRlL3Byb3RvLmggIHwgIDEgLQog
c291cmNlMy9wYXJhbS9sb2FkcGFybS5jIHwgMTQgLS0tLS0tLS0tLS0tLS0KIDIgZmlsZXMg
Y2hhbmdlZCwgMTUgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvc291cmNlMy9pbmNsdWRl
L3Byb3RvLmggYi9zb3VyY2UzL2luY2x1ZGUvcHJvdG8uaAppbmRleCBmMTk4MzJhOTA4OWQu
LmMzNDFjYTZjZDkxYiAxMDA2NDQKLS0tIGEvc291cmNlMy9pbmNsdWRlL3Byb3RvLmgKKysr
IGIvc291cmNlMy9pbmNsdWRlL3Byb3RvLmgKQEAgLTc3Miw3ICs3NzIsNiBAQCBpbnQgbHBf
d2lfc2Nhbl9nbG9iYWxfcGFyYW1ldHJpY3MoCiAJCSAgIHZvaWQgKnByaXZhdGVfZGF0YSks
CiAJdm9pZCAqcHJpdmF0ZV9kYXRhKTsKIAotY2hhciAqbHBfcGFybV90YWxsb2Nfc3RyaW5n
KFRBTExPQ19DVFggKmN0eCwgaW50IHNudW0sIGNvbnN0IGNoYXIgKnR5cGUsIGNvbnN0IGNo
YXIgKm9wdGlvbiwgY29uc3QgY2hhciAqZGVmKTsKIGNvbnN0IGNoYXIgKmxwX3Bhcm1fY29u
c3Rfc3RyaW5nKGludCBzbnVtLCBjb25zdCBjaGFyICp0eXBlLCBjb25zdCBjaGFyICpvcHRp
b24sIGNvbnN0IGNoYXIgKmRlZik7CiBzdHJ1Y3QgbG9hZHBhcm1fc2VydmljZTsKIGNvbnN0
IGNoYXIgKmxwX3Bhcm1fY29uc3Rfc3RyaW5nX3NlcnZpY2Uoc3RydWN0IGxvYWRwYXJtX3Nl
cnZpY2UgKnNlcnZpY2UsIGNvbnN0IGNoYXIgKnR5cGUsCmRpZmYgLS1naXQgYS9zb3VyY2Uz
L3BhcmFtL2xvYWRwYXJtLmMgYi9zb3VyY2UzL3BhcmFtL2xvYWRwYXJtLmMKaW5kZXggOWRi
OGUxZTAzZWIwLi42NDA2MmEyMzY1NWIgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvcGFyYW0vbG9h
ZHBhcm0uYworKysgYi9zb3VyY2UzL3BhcmFtL2xvYWRwYXJtLmMKQEAgLTEyNjQsMjAgKzEy
NjQsNiBAQCBjaGFyICpscF9wYXJtX3N1YnN0aXR1dGVkX3N0cmluZyhUQUxMT0NfQ1RYICpt
ZW1fY3R4LAogCXJldHVybiBscF9zdWJzdGl0dXRlZF9zdHJpbmcobWVtX2N0eCwgbHBfc3Vi
LCBkYXRhLT52YWx1ZSk7CiB9CiAKLWNoYXIgKmxwX3Bhcm1fdGFsbG9jX3N0cmluZyhUQUxM
T0NfQ1RYICptZW1fY3R4LAotCQkJICAgIGludCBzbnVtLAotCQkJICAgIGNvbnN0IGNoYXIg
KnR5cGUsCi0JCQkgICAgY29uc3QgY2hhciAqb3B0aW9uLAotCQkJICAgIGNvbnN0IGNoYXIg
KmRlZikKLXsKLQlyZXR1cm4gbHBfcGFybV9zdWJzdGl0dXRlZF9zdHJpbmcobWVtX2N0eCwK
LQkJCQkJICAmczNfZ2xvYmFsX3N1YnN0aXR1dGlvbiwKLQkJCQkJICBzbnVtLAotCQkJCQkg
IHR5cGUsCi0JCQkJCSAgb3B0aW9uLAotCQkJCQkgIGRlZik7Ci19Ci0KIC8qIFJldHVybiBw
YXJhbWV0cmljIG9wdGlvbiBmcm9tIGEgZ2l2ZW4gc2VydmljZS4gVHlwZSBpcyBhIHBhcnQg
b2Ygb3B0aW9uIGJlZm9yZSAnOicgKi8KIC8qIFBhcmFtZXRyaWMgb3B0aW9uIGhhcyBmb2xs
b3dpbmcgc3ludGF4OiAnVHlwZTogb3B0aW9uID0gdmFsdWUnICovCiBjb25zdCBjaGFyICps
cF9wYXJtX2NvbnN0X3N0cmluZyhpbnQgc251bSwgY29uc3QgY2hhciAqdHlwZSwgY29uc3Qg
Y2hhciAqb3B0aW9uLCBjb25zdCBjaGFyICpkZWYpCi0tIAoyLjE3LjEKCgpGcm9tIDAyM2Vi
MzhhMmI3MGY2OWM5M2Q1N2FhYmJjOTUwNzkwNjVkZjYxYWMgTW9uIFNlcCAxNyAwMDowMDow
MCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+CkRhdGU6
IFR1ZSwgMTUgT2N0IDIwMTkgMTY6NTA6MzQgKzAyMDAKU3ViamVjdDogW1BBVENIIDExLzE4
XSBzM19wYXJhbTogYWRkIGxwX3N1YnN0aXR1dGVkX3N0cmluZyBob29rCgpTaWduZWQtb2Zm
LWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0KIGxpYi9wYXJh
bS9zM19wYXJhbS5oICAgICAgICAgfCAzICsrKwogc291cmNlMy9wYXJhbS9sb2FkcGFybV9j
dHguYyB8IDEgKwogMiBmaWxlcyBjaGFuZ2VkLCA0IGluc2VydGlvbnMoKykKCmRpZmYgLS1n
aXQgYS9saWIvcGFyYW0vczNfcGFyYW0uaCBiL2xpYi9wYXJhbS9zM19wYXJhbS5oCmluZGV4
IGYzMWM1YmNiYWE5NS4uMWVmN2ZjNWQ2M2YxIDEwMDY0NAotLS0gYS9saWIvcGFyYW0vczNf
cGFyYW0uaAorKysgYi9saWIvcGFyYW0vczNfcGFyYW0uaApAQCAtMTIsNiArMTIsOSBAQCBz
dHJ1Y3QgbG9hZHBhcm1fczNfaGVscGVycwogCWJvb2wgKCpzdG9yZV9jbWRsaW5lKShjb25z
dCBjaGFyICpwc3pQYXJtTmFtZSwgY29uc3QgY2hhciAqcHN6UGFybVZhbHVlKTsKIAl2b2lk
ICgqZHVtcCkoRklMRSAqZiwgYm9vbCBzaG93X2RlZmF1bHRzLCBpbnQgbWF4dG9wcmludCk7
CiAJY2hhciAqICgqbHBfc3RyaW5nKShUQUxMT0NfQ1RYICpjdHgsIGNvbnN0IGNoYXIgKmlu
KTsKKwljaGFyICooKmxwX3N1YnN0aXR1dGVkX3N0cmluZykoVEFMTE9DX0NUWCAqY3R4LAor
CQkJCWNvbnN0IHN0cnVjdCBsb2FkcGFybV9zdWJzdGl0dXRpb24gKmxwX3N1YiwKKwkJCQlj
b25zdCBjaGFyICppbik7CiAJYm9vbCAoKmxwX2luY2x1ZGUpKHN0cnVjdCBsb2FkcGFybV9j
b250ZXh0Kiwgc3RydWN0IGxvYWRwYXJtX3NlcnZpY2UgKiwKIAkJICAgICAgIAljb25zdCBj
aGFyICosIGNoYXIgKiopOwogCXZvaWQgKCppbml0X2xkYXBfZGVidWdnaW5nKSh2b2lkKTsK
ZGlmZiAtLWdpdCBhL3NvdXJjZTMvcGFyYW0vbG9hZHBhcm1fY3R4LmMgYi9zb3VyY2UzL3Bh
cmFtL2xvYWRwYXJtX2N0eC5jCmluZGV4IDY0NWI3ODdhY2I5Zi4uMjcyZGE0NDQxODlhIDEw
MDY0NAotLS0gYS9zb3VyY2UzL3BhcmFtL2xvYWRwYXJtX2N0eC5jCisrKyBiL3NvdXJjZTMv
cGFyYW0vbG9hZHBhcm1fY3R4LmMKQEAgLTY3LDYgKzY3LDcgQEAgc3RhdGljIHN0cnVjdCBs
b2FkcGFybV9zM19oZWxwZXJzIHMzX2ZucyA9CiAJLnN0b3JlX2NtZGxpbmUgPSBzdG9yZV9s
cF9zZXRfY21kbGluZSwKIAkuZHVtcCA9IGxwX2R1bXAsCiAJLmxwX3N0cmluZyA9IGxwX3N0
cmluZywKKwkubHBfc3Vic3RpdHV0ZWRfc3RyaW5nID0gbHBfc3Vic3RpdHV0ZWRfc3RyaW5n
LAogCS5scF9pbmNsdWRlID0gbHBfaW5jbHVkZSwKIAkuaW5pdF9sZGFwX2RlYnVnZ2luZyA9
IGluaXRfbGRhcF9kZWJ1Z2dpbmcsCiAJLnNldF9uZXRiaW9zX2FsaWFzZXMgPSBzZXRfbmV0
Ymlvc19hbGlhc2VzLAotLSAKMi4xNy4xCgoKRnJvbSA1OWI3MGYwYmUxYzNkNDRlZTYyYWI3
N2VmYTFjMDMyYWU3NzZkNTdkIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVm
YW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBUdWUsIDE1IE9jdCAyMDE5
IDE2OjUyOjMwICswMjAwClN1YmplY3Q6IFtQQVRDSCAxMi8xOF0gcGFyYW06IGFkZCBGTl97
R0xPQkFMLExPQ0FMfV9TVUJTVElUVVRFRF9TVFJJTkcgc3VwcG9ydAoKU2lnbmVkLW9mZi1i
eTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBsaWIvcGFyYW0v
bG9hZHBhcm0uYyAgICAgfCAxMyArKysrKysrKysrKysrCiBsaWIvcGFyYW0vcGFyYW0uaCAg
ICAgICAgfCAgMSArCiBzY3JpcHQvZ2VuZXJhdGVfcGFyYW0ucHkgfCAxMyArKysrKysrKysr
KystCiBzb3VyY2UzL2xpYi91dGlsX3BhdGguYyAgfCAgMSArCiBzb3VyY2UzL3BhcmFtL2xv
YWRwYXJtLmMgfCAgNiArKysrKysKIDUgZmlsZXMgY2hhbmdlZCwgMzMgaW5zZXJ0aW9ucygr
KSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL2xpYi9wYXJhbS9sb2FkcGFybS5jIGIv
bGliL3BhcmFtL2xvYWRwYXJtLmMKaW5kZXggOWE1NzdhYTE4OGM1Li5mNmMyOTI5OTVhYzIg
MTAwNjQ0Ci0tLSBhL2xpYi9wYXJhbS9sb2FkcGFybS5jCisrKyBiL2xpYi9wYXJhbS9sb2Fk
cGFybS5jCkBAIC0xNjUsNiArMTY1LDE2IEBAIHN0YXRpYyBzdHJ1Y3QgbG9hZHBhcm1fY29u
dGV4dCAqZ2xvYmFsX2xvYWRwYXJtX2NvbnRleHQ7CiAJIH0JCQkJCQkJCVwKIAkgcmV0dXJu
IGxwX2N0eC0+Z2xvYmFscy0+dmFyX25hbWUgPyB0YWxsb2Nfc3RyZHVwKGN0eCwgbHBjZmdf
c3RyaW5nKGxwX2N0eC0+Z2xvYmFscy0+dmFyX25hbWUpKSA6IHRhbGxvY19zdHJkdXAoY3R4
LCAiIik7IFwKIH0KKyNkZWZpbmUgRk5fR0xPQkFMX1NVQlNUSVRVVEVEX1NUUklORyhmbl9u
YW1lLHZhcl9uYW1lKSBcCisgX1BVQkxJQ18gY2hhciAqbHBjZmdfICMjIGZuX25hbWUoc3Ry
dWN0IGxvYWRwYXJtX2NvbnRleHQgKmxwX2N0eCwgXAorCQkgY29uc3Qgc3RydWN0IGxvYWRw
YXJtX3N1YnN0aXR1dGlvbiAqbHBfc3ViLCBUQUxMT0NfQ1RYICpjdHgpIFwKK3sgXAorCSBp
ZiAobHBfY3R4ID09IE5VTEwpIHJldHVybiBOVUxMOwkJCQlcCisJIGlmIChscF9jdHgtPnMz
X2ZucykgewkJCQkJCVwKKwkJIHJldHVybiBscF9jdHgtPmdsb2JhbHMtPnZhcl9uYW1lID8g
bHBfY3R4LT5zM19mbnMtPmxwX3N1YnN0aXR1dGVkX3N0cmluZyhjdHgsIGxwX3N1YiwgbHBf
Y3R4LT5nbG9iYWxzLT52YXJfbmFtZSkgOiB0YWxsb2Nfc3RyZHVwKGN0eCwgIiIpOyBcCisJ
IH0JCQkJCQkJCVwKKwkgcmV0dXJuIGxwX2N0eC0+Z2xvYmFscy0+dmFyX25hbWUgPyB0YWxs
b2Nfc3RyZHVwKGN0eCwgbHBjZmdfc3RyaW5nKGxwX2N0eC0+Z2xvYmFscy0+dmFyX25hbWUp
KSA6IHRhbGxvY19zdHJkdXAoY3R4LCAiIik7IFwKK30KIAogI2RlZmluZSBGTl9HTE9CQUxf
Q09OU1RfU1RSSU5HKGZuX25hbWUsdmFyX25hbWUpCQkJCVwKICBfUFVCTElDXyBjb25zdCBj
aGFyICpscGNmZ18gIyMgZm5fbmFtZShzdHJ1Y3QgbG9hZHBhcm1fY29udGV4dCAqbHBfY3R4
KSB7IFwKQEAgLTE5OCw2ICsyMDgsOSBAQCBzdGF0aWMgc3RydWN0IGxvYWRwYXJtX2NvbnRl
eHQgKmdsb2JhbF9sb2FkcGFybV9jb250ZXh0OwogCSByZXR1cm4odGFsbG9jX3N0cmR1cChj
dHgsIGxwY2ZnX3N0cmluZygoY29uc3QgY2hhciAqKSgoc2VydmljZSAhPSBOVUxMICYmIHNl
cnZpY2UtPnZhbCAhPSBOVUxMKSA/IHNlcnZpY2UtPnZhbCA6IHNEZWZhdWx0LT52YWwpKSkp
OyBcCiAgfQogCisvKiBqdXN0IGEgY29weSBmb3Igbm93ICovCisjZGVmaW5lIEZOX0xPQ0FM
X1NVQlNUSVRVVEVEX1NUUklORyhmbl9uYW1lLHZhbCkgRk5fTE9DQUxfU1RSSU5HKGZuX25h
bWUsdmFsKQorCiAjZGVmaW5lIEZOX0xPQ0FMX0NPTlNUX1NUUklORyhmbl9uYW1lLHZhbCkg
XAogIF9QVUJMSUNfIGNvbnN0IGNoYXIgKmxwY2ZnXyAjIyBmbl9uYW1lKHN0cnVjdCBsb2Fk
cGFybV9zZXJ2aWNlICpzZXJ2aWNlLCBcCiAJCQkJCXN0cnVjdCBsb2FkcGFybV9zZXJ2aWNl
ICpzRGVmYXVsdCkgeyBcCmRpZmYgLS1naXQgYS9saWIvcGFyYW0vcGFyYW0uaCBiL2xpYi9w
YXJhbS9wYXJhbS5oCmluZGV4IDBhM2JkZTZjNWNiNS4uNDRmMDE5MTdhNDU2IDEwMDY0NAot
LS0gYS9saWIvcGFyYW0vcGFyYW0uaAorKysgYi9saWIvcGFyYW0vcGFyYW0uaApAQCAtNDEs
NiArNDEsNyBAQCBzdHJ1Y3Qgc21ic3J2X2Nvbm5lY3Rpb247CiAKIHN0cnVjdCBsb2FkcGFy
bV9jb250ZXh0Owogc3RydWN0IGxvYWRwYXJtX3NlcnZpY2U7CitzdHJ1Y3QgbG9hZHBhcm1f
c3Vic3RpdHV0aW9uOwogc3RydWN0IHNtYmNsaV9vcHRpb25zOwogc3RydWN0IHNtYmNsaV9z
ZXNzaW9uX29wdGlvbnM7CiBzdHJ1Y3QgZ2Vuc2VjX3NldHRpbmdzOwpkaWZmIC0tZ2l0IGEv
c2NyaXB0L2dlbmVyYXRlX3BhcmFtLnB5IGIvc2NyaXB0L2dlbmVyYXRlX3BhcmFtLnB5Cmlu
ZGV4IDVmOGE1MDU2MmQ0Yy4uMzg4YjZmZDEyMTFjIDEwMDY0NAotLS0gYS9zY3JpcHQvZ2Vu
ZXJhdGVfcGFyYW0ucHkKKysrIGIvc2NyaXB0L2dlbmVyYXRlX3BhcmFtLnB5CkBAIC03NSw2
ICs3NSw3IEBAIGRlZiBpdGVyYXRlX2FsbChwYXRoKToKICAgICAgICAgICAgIGNvbnRpbnVl
CiAKICAgICAgICAgY29uc3RhbnQgPSBwYXJhbWV0ZXIuYXR0cmliLmdldCgiY29uc3RhbnQi
KQorICAgICAgICBzdWJzdGl0dXRpb24gPSBwYXJhbWV0ZXIuYXR0cmliLmdldCgic3Vic3Rp
dHV0aW9uIikKICAgICAgICAgcGFybSA9IHBhcmFtZXRlci5hdHRyaWIuZ2V0KCJwYXJtIikK
ICAgICAgICAgaWYgbmFtZSBpcyBOb25lIG9yIHBhcmFtX3R5cGUgaXMgTm9uZSBvciBjb250
ZXh0IGlzIE5vbmU6CiAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oIkVycm9yIHBhcnNp
bmcgcGFyYW1ldGVyOiAiICsgbmFtZSkKQEAgLTg5LDYgKzkwLDcgQEAgZGVmIGl0ZXJhdGVf
YWxsKHBhdGgpOgogICAgICAgICAgICAgICAgJ2NvbnRleHQnOiBjb250ZXh0LAogICAgICAg
ICAgICAgICAgJ2Z1bmN0aW9uJzogZnVuYywKICAgICAgICAgICAgICAgICdjb25zdGFudCc6
IChjb25zdGFudCA9PSAnMScpLAorICAgICAgICAgICAgICAgJ3N1YnN0aXR1dGlvbic6IChz
dWJzdGl0dXRpb24gPT0gJzEnKSwKICAgICAgICAgICAgICAgICdwYXJtJzogKHBhcm0gPT0g
JzEnKSwKICAgICAgICAgICAgICAgICdzeW5vbnltJyA6IHN5bm9ueW0sCiAgICAgICAgICAg
ICAgICAnZ2VuZXJhdGVkJyA6IGdlbmVyYXRlZCwKQEAgLTEzNSw2ICsxMzcsOCBAQCBkZWYg
Z2VuZXJhdGVfZnVuY3Rpb25zKHBhdGhfaW4sIHBhdGhfb3V0KToKICAgICAgICAgICAgIG91
dHB1dF9zdHJpbmcgKz0gdGVtcAogICAgICAgICAgICAgaWYgcGFyYW1ldGVyWydjb25zdGFu
dCddOgogICAgICAgICAgICAgICAgIG91dHB1dF9zdHJpbmcgKz0gIl9DT05TVCIKKyAgICAg
ICAgICAgIGlmIHBhcmFtZXRlclsnc3Vic3RpdHV0aW9uJ106CisgICAgICAgICAgICAgICAg
b3V0cHV0X3N0cmluZyArPSAiX1NVQlNUSVRVVEVEIgogICAgICAgICAgICAgaWYgcGFyYW1l
dGVyWydwYXJtJ106CiAgICAgICAgICAgICAgICAgb3V0cHV0X3N0cmluZyArPSAiX1BBUk0i
CiAgICAgICAgICAgICB0ZW1wID0gcGFyYW1fdHlwZV9kaWN0LmdldChwYXJhbWV0ZXJbJ3R5
cGUnXSkKQEAgLTE5Miw3ICsxOTYsMTQgQEAgZGVmIG1ha2VfczNfcGFyYW1fcHJvdG8ocGF0
aF9pbiwgcGF0aF9vdXQpOgogICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICBw
YXJhbSA9ICJpbnQiCiAKLSAgICAgICAgICAgIGlmIHBhcmFtZXRlclsndHlwZSddID09ICdz
dHJpbmcnIGFuZCBub3QgcGFyYW1ldGVyWydjb25zdGFudCddOgorICAgICAgICAgICAgaWYg
cGFyYW1ldGVyWyd0eXBlJ10gPT0gJ3N0cmluZycgYW5kIHBhcmFtZXRlclsnc3Vic3RpdHV0
aW9uJ106CisgICAgICAgICAgICAgICAgaWYgcGFyYW1ldGVyWydjb250ZXh0J10gPT0gJ0cn
OgorICAgICAgICAgICAgICAgICAgICBvdXRwdXRfc3RyaW5nICs9ICcoVEFMTE9DX0NUWCAq
Y3R4LCBjb25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWIpO1xuJwor
ICAgICAgICAgICAgICAgIGVsaWYgcGFyYW1ldGVyWydjb250ZXh0J10gPT0gJ1MnOgorICAg
ICAgICAgICAgICAgICAgICBvdXRwdXRfc3RyaW5nICs9ICcoVEFMTE9DX0NUWCAqY3R4LCBj
b25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWIsICVzKTtcbicgJSBw
YXJhbQorICAgICAgICAgICAgICAgIGVsc2U6CisgICAgICAgICAgICAgICAgICAgIHJhaXNl
IEV4Y2VwdGlvbihwYXJhbWV0ZXJbJ25hbWUnXSArICIgaGFzIGFuIGludmFsaWQgcGFyYW0g
dHlwZSAiICsgcGFyYW1ldGVyWyd0eXBlJ10pCisgICAgICAgICAgICBlbGlmIHBhcmFtZXRl
clsndHlwZSddID09ICdzdHJpbmcnIGFuZCBub3QgcGFyYW1ldGVyWydjb25zdGFudCddOgog
ICAgICAgICAgICAgICAgIGlmIHBhcmFtZXRlclsnY29udGV4dCddID09ICdHJzoKICAgICAg
ICAgICAgICAgICAgICAgb3V0cHV0X3N0cmluZyArPSAnKFRBTExPQ19DVFggKmN0eCk7XG4n
CiAgICAgICAgICAgICAgICAgZWxpZiBwYXJhbWV0ZXJbJ2NvbnRleHQnXSA9PSAnUyc6CmRp
ZmYgLS1naXQgYS9zb3VyY2UzL2xpYi91dGlsX3BhdGguYyBiL3NvdXJjZTMvbGliL3V0aWxf
cGF0aC5jCmluZGV4IGQ5ZmVkMjljMmE1MS4uNjNkMDFiODEwMDA1IDEwMDY0NAotLS0gYS9z
b3VyY2UzL2xpYi91dGlsX3BhdGguYworKysgYi9zb3VyY2UzL2xpYi91dGlsX3BhdGguYwpA
QCAtMjYsNiArMjYsNyBAQAogI2luY2x1ZGUgImxpYi91dGlsL3NhbWJhX3V0aWwuaCIKICNp
bmNsdWRlICJsaWIvdXRpbF9wYXRoLmgiCiAKK3N0cnVjdCBsb2FkcGFybV9zdWJzdGl0dXRp
b247CiBzdHJ1Y3Qgc2hhcmVfcGFyYW1zOwogI2luY2x1ZGUgInNvdXJjZTMvcGFyYW0vcGFy
YW1fcHJvdG8uaCIKIApkaWZmIC0tZ2l0IGEvc291cmNlMy9wYXJhbS9sb2FkcGFybS5jIGIv
c291cmNlMy9wYXJhbS9sb2FkcGFybS5jCmluZGV4IDY0MDYyYTIzNjU1Yi4uZjhlNWRkOTcw
NTdkIDEwMDY0NAotLS0gYS9zb3VyY2UzL3BhcmFtL2xvYWRwYXJtLmMKKysrIGIvc291cmNl
My9wYXJhbS9sb2FkcGFybS5jCkBAIC0xMDU5LDYgKzEwNTksOSBAQCBjaGFyICpscF9zdHJp
bmcoVEFMTE9DX0NUWCAqY3R4LCBjb25zdCBjaGFyICpzKQogCiAjZGVmaW5lIEZOX0dMT0JB
TF9TVFJJTkcoZm5fbmFtZSxwdHIpIFwKIGNoYXIgKmxwXyAjIyBmbl9uYW1lKFRBTExPQ19D
VFggKmN0eCkge3JldHVybihscF9zdHJpbmcoKGN0eCksICooY2hhciAqKikoJkdsb2JhbHMu
cHRyKSA/ICooY2hhciAqKikoJkdsb2JhbHMucHRyKSA6ICIiKSk7fQorI2RlZmluZSBGTl9H
TE9CQUxfU1VCU1RJVFVURURfU1RSSU5HKGZuX25hbWUscHRyKSBcCitjaGFyICpscF8gIyMg
Zm5fbmFtZShUQUxMT0NfQ1RYICpjdHgsIGNvbnN0IHN0cnVjdCBsb2FkcGFybV9zdWJzdGl0
dXRpb24gKmxwX3N1YikgXAorIHtyZXR1cm4gbHBfc3Vic3RpdHV0ZWRfc3RyaW5nKGN0eCwg
bHBfc3ViLCAqKGNoYXIgKiopKCZHbG9iYWxzLnB0cikgPyAqKGNoYXIgKiopKCZHbG9iYWxz
LnB0cikgOiAiIik7fQogI2RlZmluZSBGTl9HTE9CQUxfQ09OU1RfU1RSSU5HKGZuX25hbWUs
cHRyKSBcCiAgY29uc3QgY2hhciAqbHBfICMjIGZuX25hbWUodm9pZCkge3JldHVybigqKGNv
bnN0IGNoYXIgKiBjb25zdCAqKSgmR2xvYmFscy5wdHIpID8gKihjb25zdCBjaGFyICogY29u
c3QgKikoJkdsb2JhbHMucHRyKSA6ICIiKTt9CiAjZGVmaW5lIEZOX0dMT0JBTF9MSVNUKGZu
X25hbWUscHRyKSBcCkBAIC0xMDcyLDYgKzEwNzUsOSBAQCBjaGFyICpscF8gIyMgZm5fbmFt
ZShUQUxMT0NfQ1RYICpjdHgpIHtyZXR1cm4obHBfc3RyaW5nKChjdHgpLCAqKGNoYXIgKiop
KCZHbG9iYQogCiAjZGVmaW5lIEZOX0xPQ0FMX1NUUklORyhmbl9uYW1lLHZhbCkgXAogY2hh
ciAqbHBfICMjIGZuX25hbWUoVEFMTE9DX0NUWCAqY3R4LGludCBpKSB7cmV0dXJuKGxwX3N0
cmluZygoY3R4KSwgKExQX1NOVU1fT0soaSkgJiYgU2VydmljZVB0cnNbKGkpXS0+dmFsKSA/
IFNlcnZpY2VQdHJzWyhpKV0tPnZhbCA6IHNEZWZhdWx0LnZhbCkpO30KKyNkZWZpbmUgRk5f
TE9DQUxfU1VCU1RJVFVURURfU1RSSU5HKGZuX25hbWUsdmFsKSBcCitjaGFyICpscF8gIyMg
Zm5fbmFtZShUQUxMT0NfQ1RYICpjdHgsIGNvbnN0IHN0cnVjdCBsb2FkcGFybV9zdWJzdGl0
dXRpb24gKmxwX3N1YiwgaW50IGkpIFwKKyB7cmV0dXJuIGxwX3N1YnN0aXR1dGVkX3N0cmlu
ZygoY3R4KSwgbHBfc3ViLCAoTFBfU05VTV9PSyhpKSAmJiBTZXJ2aWNlUHRyc1soaSldLT52
YWwpID8gU2VydmljZVB0cnNbKGkpXS0+dmFsIDogc0RlZmF1bHQudmFsKTt9CiAjZGVmaW5l
IEZOX0xPQ0FMX0NPTlNUX1NUUklORyhmbl9uYW1lLHZhbCkgXAogIGNvbnN0IGNoYXIgKmxw
XyAjIyBmbl9uYW1lKGludCBpKSB7cmV0dXJuIChjb25zdCBjaGFyICopKChMUF9TTlVNX09L
KGkpICYmIFNlcnZpY2VQdHJzWyhpKV0tPnZhbCkgPyBTZXJ2aWNlUHRyc1soaSldLT52YWwg
OiBzRGVmYXVsdC52YWwpO30KICNkZWZpbmUgRk5fTE9DQUxfTElTVChmbl9uYW1lLHZhbCkg
XAotLSAKMi4xNy4xCgoKRnJvbSA3YWViOTQ0YWQxY2Q0ZGM2YWUwZjM3YzUyNGExNzQzMTZk
NjU5NmZhIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hl
ciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBUdWUsIDE1IE9jdCAyMDE5IDE2OjU0OjQ1ICsw
MjAwClN1YmplY3Q6IFtQQVRDSCAxMy8xOF0gc21iZG90Y29uZjogbWFyayAiYWlvIHdyaXRl
IGJlaGluZCIgd2l0aAogc3Vic3RpdHV0aW9uPSIxIgoKU2lnbmVkLW9mZi1ieTogU3RlZmFu
IE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBkb2NzLXhtbC9zbWJkb3Rjb25m
L3R1bmluZy9haW93cml0ZWJlaGluZC54bWwgfCAxICsKIHNvdXJjZTMvc21iZC9zZXJ2aWNl
LmMgICAgICAgICAgICAgICAgICAgICAgICB8IDQgKysrLQogMiBmaWxlcyBjaGFuZ2VkLCA0
IGluc2VydGlvbnMoKyksIDEgZGVsZXRpb24oLSkKCmRpZmYgLS1naXQgYS9kb2NzLXhtbC9z
bWJkb3Rjb25mL3R1bmluZy9haW93cml0ZWJlaGluZC54bWwgYi9kb2NzLXhtbC9zbWJkb3Rj
b25mL3R1bmluZy9haW93cml0ZWJlaGluZC54bWwKaW5kZXggYzg4Y2Q5N2ZhOTcwLi5kNjBh
ZjcxNTRmZDEgMTAwNjQ0Ci0tLSBhL2RvY3MteG1sL3NtYmRvdGNvbmYvdHVuaW5nL2Fpb3dy
aXRlYmVoaW5kLnhtbAorKysgYi9kb2NzLXhtbC9zbWJkb3Rjb25mL3R1bmluZy9haW93cml0
ZWJlaGluZC54bWwKQEAgLTEsNiArMSw3IEBACiA8c2FtYmE6cGFyYW1ldGVyIG5hbWU9ImFp
byB3cml0ZSBiZWhpbmQiCiAgICAgICAgICAgICAgICAgIGNvbnRleHQ9IlMiCiAJCSB0eXBl
PSJzdHJpbmciCisgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbj0iMSIKICAgICAgICAg
ICAgICAgICAgeG1sbnM6c2FtYmE9Imh0dHA6Ly93d3cuc2FtYmEub3JnL3NhbWJhL0RURC9z
YW1iYS1kb2MiPgogPGRlc2NyaXB0aW9uPgogCTxwYXJhPklmIFNhbWJhIGhhcyBiZWVuIGJ1
aWx0IHdpdGggYXN5bmNocm9ub3VzIEkvTyBzdXBwb3J0LApkaWZmIC0tZ2l0IGEvc291cmNl
My9zbWJkL3NlcnZpY2UuYyBiL3NvdXJjZTMvc21iZC9zZXJ2aWNlLmMKaW5kZXggN2UyNTJh
NDU5YjNhLi4xMmJmNzMzNzhkYWMgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvc21iZC9zZXJ2aWNl
LmMKKysrIGIvc291cmNlMy9zbWJkL3NlcnZpY2UuYwpAQCAtNTMwLDYgKzUzMCw4IEBAIHN0
YXRpYyBOVFNUQVRVUyBtYWtlX2Nvbm5lY3Rpb25fc251bShzdHJ1Y3Qgc21iWHNydl9jb25u
ZWN0aW9uICp4Y29ubiwKIAkJCQkJY29uc3QgY2hhciAqcGRldikKIHsKIAlzdHJ1Y3Qgc21i
ZF9zZXJ2ZXJfY29ubmVjdGlvbiAqc2Nvbm4gPSB4Y29ubi0+Y2xpZW50LT5zY29ubjsKKwlj
b25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWIgPQorCQlsb2FkcGFy
bV9zM19nbG9iYWxfc3Vic3RpdHV0aW9uKCk7CiAJc3RydWN0IHNtYl9maWxlbmFtZSAqc21i
X2ZuYW1lX2NwYXRoID0gTlVMTDsKIAlmc3RyaW5nIGRldjsKIAlpbnQgcmV0OwpAQCAtODI0
LDcgKzgyNiw3IEBAIHN0YXRpYyBOVFNUQVRVUyBtYWtlX2Nvbm5lY3Rpb25fc251bShzdHJ1
Y3Qgc21iWHNydl9jb25uZWN0aW9uICp4Y29ubiwKIAkJc2V0X25hbWVhcnJheSggJmNvbm4t
PnZldG9fb3Bsb2NrX2xpc3QsCiAJCQkgICAgICAgbHBfdmV0b19vcGxvY2tfZmlsZXModGFs
bG9jX3RvcygpLCBzbnVtKSk7CiAJCXNldF9uYW1lYXJyYXkoICZjb25uLT5haW9fd3JpdGVf
YmVoaW5kX2xpc3QsCi0JCQkJbHBfYWlvX3dyaXRlX2JlaGluZCh0YWxsb2NfdG9zKCksIHNu
dW0pKTsKKwkJCQlscF9haW9fd3JpdGVfYmVoaW5kKHRhbGxvY190b3MoKSwgbHBfc3ViLCBz
bnVtKSk7CiAJfQogCXNtYl9mbmFtZV9jcGF0aCA9IHN5bnRoZXRpY19zbWJfZm5hbWUodGFs
bG9jX3RvcygpLAogCQkJCQljb25uLT5jb25uZWN0cGF0aCwKLS0gCjIuMTcuMQoKCkZyb20g
Yjk3MDkwNWQxY2QyOWRjODIxZjEwNTVkOTYzYmM4NTM1NmZhMDM2OSBNb24gU2VwIDE3IDAw
OjAwOjAwIDIwMDEKRnJvbTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4K
RGF0ZTogVHVlLCAxNSBPY3QgMjAxOSAxNjo1NDo0NSArMDIwMApTdWJqZWN0OiBbUEFUQ0gg
MTQvMThdIHNtYmRvdGNvbmY6IG1hcmsgImNvbW1lbnQiIHdpdGggc3Vic3RpdHV0aW9uPSIx
IgoKU2lnbmVkLW9mZi1ieTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4K
LS0tCiBkb2NzLXhtbC9zbWJkb3Rjb25mL2Jhc2UvY29tbWVudC54bWwgICAgICAgIHwgIDEg
Kwogc291cmNlMy9ycGNfc2VydmVyL3Nwb29sc3Mvc3J2X3Nwb29sc3NfbnQuYyB8IDEyICsr
KysrKy0tLQogc291cmNlMy9ycGNfc2VydmVyL3NydnN2Yy9zcnZfc3J2c3ZjX250LmMgICB8
IDI5ICsrKysrKysrKysrKysrKy0tLS0tLQogc291cmNlMy9zbWJkL2xhbm1hbi5jICAgICAg
ICAgICAgICAgICAgICAgICB8ICA2ICsrKy0tCiBzb3VyY2UzL3NtYmQvbXNkZnMuYyAgICAg
ICAgICAgICAgICAgICAgICAgIHwgIDQgKystCiA1IGZpbGVzIGNoYW5nZWQsIDM4IGluc2Vy
dGlvbnMoKyksIDE0IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RvY3MteG1sL3NtYmRv
dGNvbmYvYmFzZS9jb21tZW50LnhtbCBiL2RvY3MteG1sL3NtYmRvdGNvbmYvYmFzZS9jb21t
ZW50LnhtbAppbmRleCBiMGRkOTFjODgzOWMuLmM1YWJhODM0NTFhNiAxMDA2NDQKLS0tIGEv
ZG9jcy14bWwvc21iZG90Y29uZi9iYXNlL2NvbW1lbnQueG1sCisrKyBiL2RvY3MteG1sL3Nt
YmRvdGNvbmYvYmFzZS9jb21tZW50LnhtbApAQCAtMSw2ICsxLDcgQEAKIDxzYW1iYTpwYXJh
bWV0ZXIgbmFtZT0iY29tbWVudCIKICAgICAgICAgICAgICAgICAgY29udGV4dD0iUyIKICAg
ICAgICAgICAgICAgICAgdHlwZT0ic3RyaW5nIgorICAgICAgICAgICAgICAgICBzdWJzdGl0
dXRpb249IjEiCiAgICAgICAgICAgICAgICAgIHhtbG5zOnNhbWJhPSJodHRwOi8vd3d3LnNh
bWJhLm9yZy9zYW1iYS9EVEQvc2FtYmEtZG9jIj4KIDxkZXNjcmlwdGlvbj4KICAgICA8cGFy
YT5UaGlzIGlzIGEgdGV4dCBmaWVsZCB0aGF0IGlzIHNlZW4gbmV4dCB0byBhIHNoYXJlIApk
aWZmIC0tZ2l0IGEvc291cmNlMy9ycGNfc2VydmVyL3Nwb29sc3Mvc3J2X3Nwb29sc3NfbnQu
YyBiL3NvdXJjZTMvcnBjX3NlcnZlci9zcG9vbHNzL3Nydl9zcG9vbHNzX250LmMKaW5kZXgg
ZjMyYjQ2NWFmYjY3Li5jODA5OTY1MzJhZDUgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvcnBjX3Nl
cnZlci9zcG9vbHNzL3Nydl9zcG9vbHNzX250LmMKKysrIGIvc291cmNlMy9ycGNfc2VydmVy
L3Nwb29sc3Mvc3J2X3Nwb29sc3NfbnQuYwpAQCAtMjgwNSwxMCArMjgwNSwxMiBAQCBzdGF0
aWMgdm9pZCBzcG9vbHNzX25vdGlmeV9jb21tZW50KHN0cnVjdCBtZXNzYWdpbmdfY29udGV4
dCAqbXNnX2N0eCwKIAkJCQkgICBzdHJ1Y3Qgc3Bvb2xzc19QcmludGVySW5mbzIgKnBpbmZv
MiwKIAkJCQkgICBUQUxMT0NfQ1RYICptZW1fY3R4KQogeworCWNvbnN0IHN0cnVjdCBsb2Fk
cGFybV9zdWJzdGl0dXRpb24gKmxwX3N1YiA9CisJCWxvYWRwYXJtX3MzX2dsb2JhbF9zdWJz
dGl0dXRpb24oKTsKIAljb25zdCBjaGFyICpwOwogCiAJaWYgKCpwaW5mbzItPmNvbW1lbnQg
PT0gJ1wwJykgewotCQlwID0gbHBfY29tbWVudCh0YWxsb2NfdG9zKCksIHNudW0pOworCQlw
ID0gbHBfY29tbWVudCh0YWxsb2NfdG9zKCksIGxwX3N1Yiwgc251bSk7CiAJfSBlbHNlIHsK
IAkJcCA9IHBpbmZvMi0+Y29tbWVudDsKIAl9CkBAIC0zOTcwLDEyICszOTcyLDE0IEBAIHN0
YXRpYyBXRVJST1IgY29uc3RydWN0X3ByaW50ZXJfaW5mbzEoVEFMTE9DX0NUWCAqbWVtX2N0
eCwKIAkJCQkgICAgICBzdHJ1Y3Qgc3Bvb2xzc19QcmludGVySW5mbzEgKnIsCiAJCQkJICAg
ICAgaW50IHNudW0pCiB7CisJY29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiAq
bHBfc3ViID0KKwkJbG9hZHBhcm1fczNfZ2xvYmFsX3N1YnN0aXR1dGlvbigpOwogCVdFUlJP
UiByZXN1bHQ7CiAKIAlyLT5mbGFncwkJPSBmbGFnczsKIAogCWlmIChpbmZvMi0+Y29tbWVu
dCA9PSBOVUxMIHx8IGluZm8yLT5jb21tZW50WzBdID09ICdcMCcpIHsKLQkJci0+Y29tbWVu
dAk9IGxwX2NvbW1lbnQobWVtX2N0eCwgc251bSk7CisJCXItPmNvbW1lbnQJPSBscF9jb21t
ZW50KG1lbV9jdHgsIGxwX3N1Yiwgc251bSk7CiAJfSBlbHNlIHsKIAkJci0+Y29tbWVudAk9
IHRhbGxvY19zdHJkdXAobWVtX2N0eCwgaW5mbzItPmNvbW1lbnQpOyAvKiBzYXZlZCBjb21t
ZW50ICovCiAJfQpAQCAtNDAwNyw2ICs0MDExLDggQEAgc3RhdGljIFdFUlJPUiBjb25zdHJ1
Y3RfcHJpbnRlcl9pbmZvMihUQUxMT0NfQ1RYICptZW1fY3R4LAogCQkJCSAgICAgIHN0cnVj
dCBzcG9vbHNzX1ByaW50ZXJJbmZvMiAqciwKIAkJCQkgICAgICBpbnQgc251bSkKIHsKKwlj
b25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWIgPQorCQlsb2FkcGFy
bV9zM19nbG9iYWxfc3Vic3RpdHV0aW9uKCk7CiAJaW50IGNvdW50OwogCXByaW50X3N0YXR1
c19zdHJ1Y3Qgc3RhdHVzOwogCVdFUlJPUiByZXN1bHQ7CkBAIC00MDMzLDcgKzQwMzksNyBA
QCBzdGF0aWMgV0VSUk9SIGNvbnN0cnVjdF9wcmludGVyX2luZm8yKFRBTExPQ19DVFggKm1l
bV9jdHgsCiAJV19FUlJPUl9IQVZFX05PX01FTU9SWShyLT5kcml2ZXJuYW1lKTsKIAogCWlm
IChpbmZvMi0+Y29tbWVudFswXSA9PSAnXDAnKSB7Ci0JCXItPmNvbW1lbnQJPSBscF9jb21t
ZW50KG1lbV9jdHgsIHNudW0pOworCQlyLT5jb21tZW50CT0gbHBfY29tbWVudChtZW1fY3R4
LCBscF9zdWIsIHNudW0pOwogCX0gZWxzZSB7CiAJCXItPmNvbW1lbnQJPSB0YWxsb2Nfc3Ry
ZHVwKG1lbV9jdHgsIGluZm8yLT5jb21tZW50KTsKIAl9CmRpZmYgLS1naXQgYS9zb3VyY2Uz
L3JwY19zZXJ2ZXIvc3J2c3ZjL3Nydl9zcnZzdmNfbnQuYyBiL3NvdXJjZTMvcnBjX3NlcnZl
ci9zcnZzdmMvc3J2X3NydnN2Y19udC5jCmluZGV4IDYyNDZhNjE2NzJlNS4uMjgxODYxY2U5
ZTFkIDEwMDY0NAotLS0gYS9zb3VyY2UzL3JwY19zZXJ2ZXIvc3J2c3ZjL3Nydl9zcnZzdmNf
bnQuYworKysgYi9zb3VyY2UzL3JwY19zZXJ2ZXIvc3J2c3ZjL3Nydl9zcnZzdmNfbnQuYwpA
QCAtMjIxLDggKzIyMSwxMCBAQCBzdGF0aWMgdm9pZCBpbml0X3Nydl9zaGFyZV9pbmZvXzEo
c3RydWN0IHBpcGVzX3N0cnVjdCAqcCwKIAkJCQkgIHN0cnVjdCBzcnZzdmNfTmV0U2hhcmVJ
bmZvMSAqciwKIAkJCQkgIGludCBzbnVtKQogeworCWNvbnN0IHN0cnVjdCBsb2FkcGFybV9z
dWJzdGl0dXRpb24gKmxwX3N1YiA9CisJCWxvYWRwYXJtX3MzX2dsb2JhbF9zdWJzdGl0dXRp
b24oKTsKIAljaGFyICpuZXRfbmFtZSA9IGxwX3NlcnZpY2VuYW1lKHRhbGxvY190b3MoKSwg
c251bSk7Ci0JY2hhciAqcmVtYXJrID0gbHBfY29tbWVudChwLT5tZW1fY3R4LCBzbnVtKTsK
KwljaGFyICpyZW1hcmsgPSBscF9jb21tZW50KHAtPm1lbV9jdHgsIGxwX3N1Yiwgc251bSk7
CiAKIAlpZiAocmVtYXJrKSB7CiAJCXJlbWFyayA9IHRhbGxvY19zdWJfYWR2YW5jZWQoCkBA
IC0yNDUsMTMgKzI0NywxNSBAQCBzdGF0aWMgdm9pZCBpbml0X3Nydl9zaGFyZV9pbmZvXzIo
c3RydWN0IHBpcGVzX3N0cnVjdCAqcCwKIAkJCQkgIHN0cnVjdCBzcnZzdmNfTmV0U2hhcmVJ
bmZvMiAqciwKIAkJCQkgIGludCBzbnVtKQogeworCWNvbnN0IHN0cnVjdCBsb2FkcGFybV9z
dWJzdGl0dXRpb24gKmxwX3N1YiA9CisJCWxvYWRwYXJtX3MzX2dsb2JhbF9zdWJzdGl0dXRp
b24oKTsKIAljaGFyICpyZW1hcmsgPSBOVUxMOwogCWNoYXIgKnBhdGggPSBOVUxMOwogCWlu
dCBtYXhfY29ubmVjdGlvbnMgPSBscF9tYXhfY29ubmVjdGlvbnMoc251bSk7CiAJdWludDMy
X3QgbWF4X3VzZXMgPSBtYXhfY29ubmVjdGlvbnMhPTAgPyBtYXhfY29ubmVjdGlvbnMgOiAo
dWludDMyX3QpLTE7CiAJY2hhciAqbmV0X25hbWUgPSBscF9zZXJ2aWNlbmFtZSh0YWxsb2Nf
dG9zKCksIHNudW0pOwogCi0JcmVtYXJrID0gbHBfY29tbWVudChwLT5tZW1fY3R4LCBzbnVt
KTsKKwlyZW1hcmsgPSBscF9jb21tZW50KHAtPm1lbV9jdHgsIGxwX3N1Yiwgc251bSk7CiAJ
aWYgKHJlbWFyaykgewogCQlyZW1hcmsgPSB0YWxsb2Nfc3ViX2FkdmFuY2VkKAogCQkJcC0+
bWVtX2N0eCwgbHBfc2VydmljZW5hbWUodGFsbG9jX3RvcygpLCBzbnVtKSwKQEAgLTMxNCw4
ICszMTgsMTAgQEAgc3RhdGljIHZvaWQgbWFwX2dlbmVyaWNfc2hhcmVfc2RfYml0cyhzdHJ1
Y3Qgc2VjdXJpdHlfZGVzY3JpcHRvciAqcHNkKQogc3RhdGljIHZvaWQgaW5pdF9zcnZfc2hh
cmVfaW5mb181MDEoc3RydWN0IHBpcGVzX3N0cnVjdCAqcCwKIAkJCQkgICAgc3RydWN0IHNy
dnN2Y19OZXRTaGFyZUluZm81MDEgKnIsIGludCBzbnVtKQogeworCWNvbnN0IHN0cnVjdCBs
b2FkcGFybV9zdWJzdGl0dXRpb24gKmxwX3N1YiA9CisJCWxvYWRwYXJtX3MzX2dsb2JhbF9z
dWJzdGl0dXRpb24oKTsKIAljb25zdCBjaGFyICpuZXRfbmFtZSA9IGxwX3NlcnZpY2VuYW1l
KHRhbGxvY190b3MoKSwgc251bSk7Ci0JY2hhciAqcmVtYXJrID0gbHBfY29tbWVudChwLT5t
ZW1fY3R4LCBzbnVtKTsKKwljaGFyICpyZW1hcmsgPSBscF9jb21tZW50KHAtPm1lbV9jdHgs
IGxwX3N1Yiwgc251bSk7CiAKIAlpZiAocmVtYXJrKSB7CiAJCXJlbWFyayA9IHRhbGxvY19z
dWJfYWR2YW5jZWQoCkBAIC0zNDMsMTMgKzM0OSwxNSBAQCBzdGF0aWMgdm9pZCBpbml0X3Ny
dl9zaGFyZV9pbmZvXzUwMShzdHJ1Y3QgcGlwZXNfc3RydWN0ICpwLAogc3RhdGljIHZvaWQg
aW5pdF9zcnZfc2hhcmVfaW5mb181MDIoc3RydWN0IHBpcGVzX3N0cnVjdCAqcCwKIAkJCQkg
ICAgc3RydWN0IHNydnN2Y19OZXRTaGFyZUluZm81MDIgKnIsIGludCBzbnVtKQogeworCWNv
bnN0IHN0cnVjdCBsb2FkcGFybV9zdWJzdGl0dXRpb24gKmxwX3N1YiA9CisJCWxvYWRwYXJt
X3MzX2dsb2JhbF9zdWJzdGl0dXRpb24oKTsKIAljb25zdCBjaGFyICpuZXRfbmFtZSA9IGxw
X3NlcnZpY2VuYW1lKHRhbGxvY190b3MoKSwgc251bSk7CiAJY2hhciAqcGF0aCA9IE5VTEw7
CiAJc3RydWN0IHNlY3VyaXR5X2Rlc2NyaXB0b3IgKnNkID0gTlVMTDsKIAlzdHJ1Y3Qgc2Vj
X2Rlc2NfYnVmICpzZF9idWYgPSBOVUxMOwogCXNpemVfdCBzZF9zaXplID0gMDsKIAlUQUxM
T0NfQ1RYICpjdHggPSBwLT5tZW1fY3R4OwotCWNoYXIgKnJlbWFyayA9IGxwX2NvbW1lbnQo
Y3R4LCBzbnVtKTsKKwljaGFyICpyZW1hcmsgPSBscF9jb21tZW50KGN0eCwgbHBfc3ViLCBz
bnVtKTsKIAogCWlmIChyZW1hcmspIHsKIAkJcmVtYXJrID0gdGFsbG9jX3N1Yl9hZHZhbmNl
ZCgKQEAgLTM5MCw3ICszOTgsOSBAQCBzdGF0aWMgdm9pZCBpbml0X3Nydl9zaGFyZV9pbmZv
XzEwMDQoc3RydWN0IHBpcGVzX3N0cnVjdCAqcCwKIAkJCQkgICAgIHN0cnVjdCBzcnZzdmNf
TmV0U2hhcmVJbmZvMTAwNCAqciwKIAkJCQkgICAgIGludCBzbnVtKQogewotCWNoYXIgKnJl
bWFyayA9IGxwX2NvbW1lbnQocC0+bWVtX2N0eCwgc251bSk7CisJY29uc3Qgc3RydWN0IGxv
YWRwYXJtX3N1YnN0aXR1dGlvbiAqbHBfc3ViID0KKwkJbG9hZHBhcm1fczNfZ2xvYmFsX3N1
YnN0aXR1dGlvbigpOworCWNoYXIgKnJlbWFyayA9IGxwX2NvbW1lbnQocC0+bWVtX2N0eCwg
bHBfc3ViLCBzbnVtKTsKIAogCWlmIChyZW1hcmspIHsKIAkJcmVtYXJrID0gdGFsbG9jX3N1
Yl9hZHZhbmNlZCgKQEAgLTE3MTAsNiArMTcyMCw4IEBAIFdFUlJPUiBfc3J2c3ZjX05ldFNo
YXJlR2V0SW5mbyhzdHJ1Y3QgcGlwZXNfc3RydWN0ICpwLAogV0VSUk9SIF9zcnZzdmNfTmV0
U2hhcmVTZXRJbmZvKHN0cnVjdCBwaXBlc19zdHJ1Y3QgKnAsCiAJCQkgICAgICAgc3RydWN0
IHNydnN2Y19OZXRTaGFyZVNldEluZm8gKnIpCiB7CisJY29uc3Qgc3RydWN0IGxvYWRwYXJt
X3N1YnN0aXR1dGlvbiAqbHBfc3ViID0KKwkJbG9hZHBhcm1fczNfZ2xvYmFsX3N1YnN0aXR1
dGlvbigpOwogCWNoYXIgKmNvbW1hbmQgPSBOVUxMOwogCWNoYXIgKnNoYXJlX25hbWUgPSBO
VUxMOwogCWNoYXIgKmNvbW1lbnQgPSBOVUxMOwpAQCAtMTgzMCw3ICsxODQyLDcgQEAgV0VS
Uk9SIF9zcnZzdmNfTmV0U2hhcmVTZXRJbmZvKHN0cnVjdCBwaXBlc19zdHJ1Y3QgKnAsCiAJ
CX0KIAogCQlwYXRobmFtZSA9IGxwX3BhdGgoY3R4LCBzbnVtKTsKLQkJY29tbWVudCA9IGxw
X2NvbW1lbnQoY3R4LCBzbnVtKTsKKwkJY29tbWVudCA9IGxwX2NvbW1lbnQoY3R4LCBscF9z
dWIsIHNudW0pOwogCQl0eXBlID0gU1RZUEVfRElTS1RSRUU7CiAJCWJyZWFrOwogCWNhc2Ug
MTAwNjoKQEAgLTE4MzgsNyArMTg1MCw3IEBAIFdFUlJPUiBfc3J2c3ZjX05ldFNoYXJlU2V0
SW5mbyhzdHJ1Y3QgcGlwZXNfc3RydWN0ICpwLAogCQlyZXR1cm4gV0VSUl9BQ0NFU1NfREVO
SUVEOwogCWNhc2UgMTUwMToKIAkJcGF0aG5hbWUgPSBscF9wYXRoKGN0eCwgc251bSk7Ci0J
CWNvbW1lbnQgPSBscF9jb21tZW50KGN0eCwgc251bSk7CisJCWNvbW1lbnQgPSBscF9jb21t
ZW50KGN0eCwgbHBfc3ViLCBzbnVtKTsKIAkJcHNkID0gaW5mby0+aW5mbzE1MDEtPnNkOwog
CQltYXBfZ2VuZXJpY19zaGFyZV9zZF9iaXRzKHBzZCk7CiAJCXR5cGUgPSBTVFlQRV9ESVNL
VFJFRTsKQEAgLTE4NzgsNyArMTg5MCw4IEBAIFdFUlJPUiBfc3J2c3ZjX05ldFNoYXJlU2V0
SW5mbyhzdHJ1Y3QgcGlwZXNfc3RydWN0ICpwLAogCiAJLyogT25seSBjYWxsIG1vZGlmeSBm
dW5jdGlvbiBpZiBzb21ldGhpbmcgY2hhbmdlZC4gKi8KIAotCWlmIChzdHJjbXAocGF0aCwg
bHBfcGF0aCh0YWxsb2NfdG9zKCksIHNudW0pKSB8fCBzdHJjbXAoY29tbWVudCwgbHBfY29t
bWVudCh0YWxsb2NfdG9zKCksIHNudW0pKQorCWlmIChzdHJjbXAocGF0aCwgbHBfcGF0aCh0
YWxsb2NfdG9zKCksIHNudW0pKQorCQkJfHwgc3RyY21wKGNvbW1lbnQsIGxwX2NvbW1lbnQo
dGFsbG9jX3RvcygpLCBscF9zdWIsIHNudW0pKQogCQkJfHwgKGxwX21heF9jb25uZWN0aW9u
cyhzbnVtKSAhPSBtYXhfY29ubmVjdGlvbnMpCiAJCQl8fCBjc2NfcG9saWN5X2NoYW5nZWQp
IHsKIApkaWZmIC0tZ2l0IGEvc291cmNlMy9zbWJkL2xhbm1hbi5jIGIvc291cmNlMy9zbWJk
L2xhbm1hbi5jCmluZGV4IDUwNDUxYjI3NzhkYy4uNDg5ODhmMWRlZjNhIDEwMDY0NAotLS0g
YS9zb3VyY2UzL3NtYmQvbGFubWFuLmMKKysrIGIvc291cmNlMy9zbWJkL2xhbm1hbi5jCkBA
IC0xODg4LDYgKzE4ODgsOCBAQCBzdGF0aWMgaW50IGZpbGxfc2hhcmVfaW5mbyhjb25uZWN0
aW9uX3N0cnVjdCAqY29ubiwgaW50IHNudW0sIGludCB1TGV2ZWwsCiAgCQkJICAgY2hhcioq
IGJ1ZiwgaW50KiBidWZsZW4sCiAgCQkJICAgY2hhcioqIHN0cmluZ2J1ZiwgaW50KiBzdHJp
bmdzcGFjZSwgY2hhciogYmFzZWFkZHIpCiB7CisJY29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1
YnN0aXR1dGlvbiAqbHBfc3ViID0KKwkJbG9hZHBhcm1fczNfZ2xvYmFsX3N1YnN0aXR1dGlv
bigpOwogCWludCBzdHJ1Y3RfbGVuOwogCWNoYXIqIHA7CiAJY2hhciogcDI7CkBAIC0xOTE1
LDcgKzE5MTcsNyBAQCBzdGF0aWMgaW50IGZpbGxfc2hhcmVfaW5mbyhjb25uZWN0aW9uX3N0
cnVjdCAqY29ubiwgaW50IHNudW0sIGludCB1TGV2ZWwsCiAJCWxlbiA9IDA7CiAKIAkJaWYg
KHVMZXZlbCA+IDApIHsKLQkJCWxlbiArPSBTdHJsZW5FeHBhbmRlZChjb25uLHNudW0sbHBf
Y29tbWVudCh0YWxsb2NfdG9zKCksIHNudW0pKTsKKwkJCWxlbiArPSBTdHJsZW5FeHBhbmRl
ZChjb25uLHNudW0sbHBfY29tbWVudCh0YWxsb2NfdG9zKCksIGxwX3N1Yiwgc251bSkpOwog
CQl9CiAJCWlmICh1TGV2ZWwgPiAxKSB7CiAJCQlsZW4gKz0gc3RybGVuKGxwX3BhdGgodGFs
bG9jX3RvcygpLCBzbnVtKSkgKyAxOwpAQCAtMTk2Miw3ICsxOTY0LDcgQEAgc3RhdGljIGlu
dCBmaWxsX3NoYXJlX2luZm8oY29ubmVjdGlvbl9zdHJ1Y3QgKmNvbm4sIGludCBzbnVtLCBp
bnQgdUxldmVsLAogCQl9CiAJCVNTVkFMKHAsMTQsdHlwZSk7CQkvKiBkZXZpY2UgdHlwZSAq
LwogCQlTSVZBTChwLDE2LFBUUl9ESUZGKHAyLGJhc2VhZGRyKSk7Ci0JCWxlbiArPSBDb3B5
RXhwYW5kZWQoY29ubixzbnVtLCZwMixscF9jb21tZW50KHRhbGxvY190b3MoKSxzbnVtKSwm
bDIpOworCQlsZW4gKz0gQ29weUV4cGFuZGVkKGNvbm4sc251bSwmcDIsbHBfY29tbWVudCh0
YWxsb2NfdG9zKCksIGxwX3N1Yiwgc251bSksJmwyKTsKIAl9CiAKIAlpZiAodUxldmVsID4g
MSkgewpkaWZmIC0tZ2l0IGEvc291cmNlMy9zbWJkL21zZGZzLmMgYi9zb3VyY2UzL3NtYmQv
bXNkZnMuYwppbmRleCBmZTg1NTMyMTVhNDIuLjdlZjM2ODI0MGQ1YyAxMDA2NDQKLS0tIGEv
c291cmNlMy9zbWJkL21zZGZzLmMKKysrIGIvc291cmNlMy9zbWJkL21zZGZzLmMKQEAgLTEy
NjQsNiArMTI2NCw4IEBAIGJvb2wgY3JlYXRlX2p1bmN0aW9uKFRBTExPQ19DVFggKmN0eCwK
IAkJYm9vbCBhbGxvd19icm9rZW5fcGF0aCwKIAkJc3RydWN0IGp1bmN0aW9uX21hcCAqanVj
bikKIHsKKwljb25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWIgPQor
CQlsb2FkcGFybV9zM19nbG9iYWxfc3Vic3RpdHV0aW9uKCk7CiAJaW50IHNudW07CiAJYm9v
bCBkdW1teTsKIAlzdHJ1Y3QgZGZzX3BhdGggKnBkcCA9IHRhbGxvYyhjdHgsc3RydWN0IGRm
c19wYXRoKTsKQEAgLTEyOTksNyArMTMwMSw3IEBAIGJvb2wgY3JlYXRlX2p1bmN0aW9uKFRB
TExPQ19DVFggKmN0eCwKIAogCWp1Y24tPnNlcnZpY2VfbmFtZSA9IHRhbGxvY19zdHJkdXAo
Y3R4LCBwZHAtPnNlcnZpY2VuYW1lKTsKIAlqdWNuLT52b2x1bWVfbmFtZSA9IHRhbGxvY19z
dHJkdXAoY3R4LCBwZHAtPnJlcXBhdGgpOwotCWp1Y24tPmNvbW1lbnQgPSBscF9jb21tZW50
KGN0eCwgc251bSk7CisJanVjbi0+Y29tbWVudCA9IGxwX2NvbW1lbnQoY3R4LCBscF9zdWIs
IHNudW0pOwogCiAJVEFMTE9DX0ZSRUUocGRwKTsKIAlpZiAoIWp1Y24tPnNlcnZpY2VfbmFt
ZSB8fCAhanVjbi0+dm9sdW1lX25hbWUgfHwgISBqdWNuLT5jb21tZW50KSB7Ci0tIAoyLjE3
LjEKCgpGcm9tIDgyNjJmMzA2NDE2ZWE2Y2IxODhlMzU0ZTZmNjAyYjg5MTI2YjU1OTggTW9u
IFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBz
YW1iYS5vcmc+CkRhdGU6IFR1ZSwgMTUgT2N0IDIwMTkgMTY6NTQ6NDUgKzAyMDAKU3ViamVj
dDogW1BBVENIIDE1LzE4XSBzbWJkb3Rjb25mOiBtYXJrICJkZnJlZSBjb21tYW5kIiB3aXRo
IHN1YnN0aXR1dGlvbj0iMSIKClNpZ25lZC1vZmYtYnk6IFN0ZWZhbiBNZXR6bWFjaGVyIDxt
ZXR6ZUBzYW1iYS5vcmc+Ci0tLQogZG9jcy14bWwvc21iZG90Y29uZi9taXNjL2RmcmVlY29t
bWFuZC54bWwgfCAzICsrLQogc291cmNlMy9zbWJkL2RmcmVlLmMgICAgICAgICAgICAgICAg
ICAgICAgfCA0ICsrKy0KIDIgZmlsZXMgY2hhbmdlZCwgNSBpbnNlcnRpb25zKCspLCAyIGRl
bGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RvY3MteG1sL3NtYmRvdGNvbmYvbWlzYy9kZnJl
ZWNvbW1hbmQueG1sIGIvZG9jcy14bWwvc21iZG90Y29uZi9taXNjL2RmcmVlY29tbWFuZC54
bWwKaW5kZXggYTFlZWQ0OTQ4YTY2Li5iMTJlZTBmMjkyMzQgMTAwNjQ0Ci0tLSBhL2RvY3Mt
eG1sL3NtYmRvdGNvbmYvbWlzYy9kZnJlZWNvbW1hbmQueG1sCisrKyBiL2RvY3MteG1sL3Nt
YmRvdGNvbmYvbWlzYy9kZnJlZWNvbW1hbmQueG1sCkBAIC0xLDYgKzEsNyBAQAogPHNhbWJh
OnBhcmFtZXRlciBuYW1lPSJkZnJlZSBjb21tYW5kIgogCSAgICAgICAgIGNvbnRleHQ9IlMi
Ci0JCQkgdHlwZT0ic3RyaW5nIgorCQkgdHlwZT0ic3RyaW5nIgorCQkgc3Vic3RpdHV0aW9u
PSIxIgogCQkgeG1sbnM6c2FtYmE9Imh0dHA6Ly93d3cuc2FtYmEub3JnL3NhbWJhL0RURC9z
YW1iYS1kb2MiPgogPGRlc2NyaXB0aW9uPgogCmRpZmYgLS1naXQgYS9zb3VyY2UzL3NtYmQv
ZGZyZWUuYyBiL3NvdXJjZTMvc21iZC9kZnJlZS5jCmluZGV4IDMxOTAwYzg0N2YxMS4uZDA4
M2NlMjI3OTdmIDEwMDY0NAotLS0gYS9zb3VyY2UzL3NtYmQvZGZyZWUuYworKysgYi9zb3Vy
Y2UzL3NtYmQvZGZyZWUuYwpAQCAtNTcsNiArNTcsOCBAQCBzdGF0aWMgdWludDY0X3Qgc3lz
X2Rpc2tfZnJlZShjb25uZWN0aW9uX3N0cnVjdCAqY29ubiwKIAkJCSAgICAgIHVpbnQ2NF90
ICpkZnJlZSwKIAkJCSAgICAgIHVpbnQ2NF90ICpkc2l6ZSkKIHsKKwljb25zdCBzdHJ1Y3Qg
bG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWIgPQorCQlsb2FkcGFybV9zM19nbG9iYWxf
c3Vic3RpdHV0aW9uKCk7CiAJdWludDY0X3QgZGZyZWVfcmV0dmFsOwogCXVpbnQ2NF90IGRm
cmVlX3EgPSAwOwogCXVpbnQ2NF90IGJzaXplX3EgPSAwOwpAQCAtNzIsNyArNzQsNyBAQCBz
dGF0aWMgdWludDY0X3Qgc3lzX2Rpc2tfZnJlZShjb25uZWN0aW9uX3N0cnVjdCAqY29ubiwK
IAkgKiBJZiBleHRlcm5hbCBkaXNrIGNhbGN1bGF0aW9uIHNwZWNpZmllZCwgdXNlIGl0Lgog
CSAqLwogCi0JZGZyZWVfY29tbWFuZCA9IGxwX2RmcmVlX2NvbW1hbmQodGFsbG9jX3Rvcygp
LCBTTlVNKGNvbm4pKTsKKwlkZnJlZV9jb21tYW5kID0gbHBfZGZyZWVfY29tbWFuZCh0YWxs
b2NfdG9zKCksIGxwX3N1YiwgU05VTShjb25uKSk7CiAJaWYgKGRmcmVlX2NvbW1hbmQgJiYg
KmRmcmVlX2NvbW1hbmQpIHsKIAkJY29uc3QgY2hhciAqcDsKIAkJY2hhciAqKmxpbmVzID0g
TlVMTDsKLS0gCjIuMTcuMQoKCkZyb20gNTQ3ZTczODEwODg0YTM5MTYzNmUyZWM3NzcyNDBk
YzhlMjlhZjQwMSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogU3RlZmFuIE1ldHpt
YWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KRGF0ZTogVHVlLCAxNSBPY3QgMjAxOSAxNjo1NDo0
NSArMDIwMApTdWJqZWN0OiBbUEFUQ0ggMTYvMThdIHNtYmRvdGNvbmY6IG1hcmsgImN1cHMg
b3B0aW9ucyIgd2l0aCBzdWJzdGl0dXRpb249IjEiCgpTaWduZWQtb2ZmLWJ5OiBTdGVmYW4g
TWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0KIGRvY3MteG1sL3NtYmRvdGNvbmYv
cHJpbnRpbmcvY3Vwc29wdGlvbnMueG1sIHwgMSArCiBzb3VyY2UzL3ByaW50aW5nL3ByaW50
X2N1cHMuYyAgICAgICAgICAgICAgICB8IDQgKysrLQogMiBmaWxlcyBjaGFuZ2VkLCA0IGlu
c2VydGlvbnMoKyksIDEgZGVsZXRpb24oLSkKCmRpZmYgLS1naXQgYS9kb2NzLXhtbC9zbWJk
b3Rjb25mL3ByaW50aW5nL2N1cHNvcHRpb25zLnhtbCBiL2RvY3MteG1sL3NtYmRvdGNvbmYv
cHJpbnRpbmcvY3Vwc29wdGlvbnMueG1sCmluZGV4IDdlNmIwN2RiOWY1ZC4uODMzYmEzMGEw
ZDMxIDEwMDY0NAotLS0gYS9kb2NzLXhtbC9zbWJkb3Rjb25mL3ByaW50aW5nL2N1cHNvcHRp
b25zLnhtbAorKysgYi9kb2NzLXhtbC9zbWJkb3Rjb25mL3ByaW50aW5nL2N1cHNvcHRpb25z
LnhtbApAQCAtMSw2ICsxLDcgQEAKIDxzYW1iYTpwYXJhbWV0ZXIgbmFtZT0iY3VwcyBvcHRp
b25zIgogICAgICAgICAgICAgICAgICBjb250ZXh0PSJTIgogICAgICAgICAgICAgICAgICB0
eXBlPSJzdHJpbmciCisgICAgICAgICAgICAgICAgIHN1YnN0aXR1dGlvbj0iMSIKICAgICAg
ICAgICAgICAgICAgeG1sbnM6c2FtYmE9Imh0dHA6Ly93d3cuc2FtYmEub3JnL3NhbWJhL0RU
RC9zYW1iYS1kb2MiPgogPGRlc2NyaXB0aW9uPgogICAgIDxwYXJhPgpkaWZmIC0tZ2l0IGEv
c291cmNlMy9wcmludGluZy9wcmludF9jdXBzLmMgYi9zb3VyY2UzL3ByaW50aW5nL3ByaW50
X2N1cHMuYwppbmRleCA3MzgzMDdmNDdiNGMuLjJhMWIyMzI0ZjI1MSAxMDA2NDQKLS0tIGEv
c291cmNlMy9wcmludGluZy9wcmludF9jdXBzLmMKKysrIGIvc291cmNlMy9wcmludGluZy9w
cmludF9jdXBzLmMKQEAgLTk0Miw2ICs5NDIsOCBAQCBzdGF0aWMgaW50IGN1cHNfam9iX3N1
Ym1pdChpbnQgc251bSwgc3RydWN0IHByaW50am9iICpwam9iLAogCQkJICAgY2hhciAqbHBx
X2NtZCkKIHsKIAlUQUxMT0NfQ1RYICpmcmFtZSA9IHRhbGxvY19zdGFja2ZyYW1lKCk7CisJ
Y29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiAqbHBfc3ViID0KKwkJbG9hZHBh
cm1fczNfZ2xvYmFsX3N1YnN0aXR1dGlvbigpOwogCWludAkJcmV0ID0gMTsJCS8qIFJldHVy
biB2YWx1ZSAqLwogCWh0dHBfdAkJKmh0dHAgPSBOVUxMOwkJLyogSFRUUCBjb25uZWN0aW9u
IHRvIHNlcnZlciAqLwogCWlwcF90CQkqcmVxdWVzdCA9IE5VTEwsCS8qIElQUCBSZXF1ZXN0
ICovCkBAIC0xMDQ5LDcgKzEwNTEsNyBAQCBzdGF0aWMgaW50IGN1cHNfam9iX3N1Ym1pdChp
bnQgc251bSwgc3RydWN0IHByaW50am9iICpwam9iLAogCSAqLwogCiAJaWYgKCFwdXNoX3V0
ZjhfdGFsbG9jKGZyYW1lLCAmY3Vwc29wdGlvbnMsCi0JCQkgICAgICBscF9jdXBzX29wdGlv
bnModGFsbG9jX3RvcygpLCBzbnVtKSwgJnNpemUpKSB7CisJCQkgICAgICBscF9jdXBzX29w
dGlvbnModGFsbG9jX3RvcygpLCBscF9zdWIsIHNudW0pLCAmc2l6ZSkpIHsKIAkJZ290byBv
dXQ7CiAJfQogCW51bV9vcHRpb25zID0gMDsKLS0gCjIuMTcuMQoKCkZyb20gY2NjZDUzNmUz
NmFiNzdjNmFjODBiYzYzNGY1OTNiNzI4MmM5YWFlNCBNb24gU2VwIDE3IDAwOjAwOjAwIDIw
MDEKRnJvbTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KRGF0ZTogVHVl
LCAxNSBPY3QgMjAxOSAxMDowNzo0OCArMDIwMApTdWJqZWN0OiBbUEFUQ0ggMTcvMThdIGF1
dGgvc2FtYmFfaW1wZXJzb25hdGlvbi4qCgotLS0KIGF1dGgvc2FtYmFfaW1wZXJzb25hdGlv
bi5jIHwgMTE2ICsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysKIGF1dGgv
c2FtYmFfaW1wZXJzb25hdGlvbi5oIHwgIDQxICsrKysrKysrKysrKysKIDIgZmlsZXMgY2hh
bmdlZCwgMTU3IGluc2VydGlvbnMoKykKIGNyZWF0ZSBtb2RlIDEwMDY0NCBhdXRoL3NhbWJh
X2ltcGVyc29uYXRpb24uYwogY3JlYXRlIG1vZGUgMTAwNjQ0IGF1dGgvc2FtYmFfaW1wZXJz
b25hdGlvbi5oCgpkaWZmIC0tZ2l0IGEvYXV0aC9zYW1iYV9pbXBlcnNvbmF0aW9uLmMgYi9h
dXRoL3NhbWJhX2ltcGVyc29uYXRpb24uYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAw
MDAwMDAwMDAwMDAuLjJmMmY4ZjY4ODg4YwotLS0gL2Rldi9udWxsCisrKyBiL2F1dGgvc2Ft
YmFfaW1wZXJzb25hdGlvbi5jCkBAIC0wLDAgKzEsMTE2IEBACisvKgorICAgVW5peCBTTUIv
TmV0YmlvcyBpbXBsZW1lbnRhdGlvbi4KKworICAgR2VuZXJpYyBpbXBlcnNvbmF0aW9uIGlu
ZnJhc3RydWN0dXJlCisKKyAgIENvcHlyaWdodCAoQykgU3RlZmFuIE1ldHptYWNoZXIgMjAx
OQorCisgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3Ry
aWJ1dGUgaXQgYW5kL29yIG1vZGlmeQorICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBH
TlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkKKyAgIHRoZSBGcmVl
IFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2Us
IG9yCisgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLgorCisgICBUaGlz
IHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVz
ZWZ1bCwKKyAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBp
bXBsaWVkIHdhcnJhbnR5IG9mCisgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1Ig
QSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCisgICBHTlUgR2VuZXJhbCBQdWJsaWMg
TGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgorCisgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2
ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQorICAgYWxvbmcg
d2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xp
Y2Vuc2VzLz4uCisqLworCisjaW5jbHVkZSAiaW5jbHVkZXMuaCIKKyNpbmNsdWRlICJzeXN0
ZW0vZmlsZXN5cy5oIgorI2luY2x1ZGUgInN5c3RlbS90aHJlYWRzLmgiCisjaW5jbHVkZSAi
YXV0aC9zYW1iYV9pbXBlcnNvbmF0aW9uLmgiCisKK3N0YXRpYyB1aW50NjRfdCBzYW1iYV9p
bXBlcnNvbmF0aW9uX2NhY2hlX2lkX2NvdW50ZXI7CitzdGF0aWMgX190aHJlYWQgdWludDY0
X3Qgc2FtYmFfaW1wZXJzb25hdGlvbl9jYWNoZV9pZF9jdXJyZW50OworCitzdHJ1Y3Qgc2Ft
YmFfaW1wZXJzb25hdGlvbl9pbmZvIHsKKwl1aW50NjRfdCBjYWNoZV9pZDsKKwljb25zdCBz
dHJ1Y3QgYXV0aF9zZXNzaW9uX2luZm8gKnNlc3Npb25faW5mbzsKKwljb25zdCBzdHJ1Y3Qg
bG9hZHBhcm1fc3Vic3RpdHV0aW9uICpscF9zdWI7Cit9OworCitzdHJ1Y3Qgc2FtYmFfaW1w
ZXJzb25hdGlvbiB7CisJc3RydWN0IHNhbWJhX2ltcGVyc29uYXRpb25faW5mbyAqaW5mbzsK
K307CisKK05UU1RBVFVTIHNhbWJhX2ltcGVyc29uYXRpb25fY3JlYXRlKFRBTExPQ19DVFgg
Km1lbV9jdHgsCisJCQkJY29uc3Qgc3RydWN0IGF1dGhfc2Vzc2lvbl9pbmZvICpzZXNzaW9u
X2luZm8sCisJCQkJY29uc3Qgc3RydWN0IGxvYWRwYXJtX3N1YnN0aXR1dGlvbiAqbHBfc3Vi
LAorCQkJCXN0cnVjdCBzYW1iYV9pbXBlcnNvbmF0aW9uICoqX2ltcCkKK3sKKwlzdHJ1Y3Qg
c2FtYmFfaW1wZXJzb25hdGlvbiAqaW1wID0gTlVMTDsKKworCSpfaW1wID0gTlVMTDsKKwor
CWltcCA9IHRhbGxvYyhtZW1fY3R4LCBzdHJ1Y3Qgc2FtYmFfaW1wZXJzb25hdGlvbik7CisJ
aWYgKGltcCA9PSBOVUxMKSB7CisJCXJldHVybiBOVF9TVEFUVVNfTk9fTUVNT1JZOworCX0K
KwlpbXAtPmluZm8gPSB0YWxsb2MoaW1wLCBzdHJ1Y3Qgc2FtYmFfaW1wZXJzb25hdGlvbl9p
bmZvKTsKKwlpZiAoaW1wLT5pbmZvID09IE5VTEwpIHsKKwkJVEFMTE9DX0ZSRUUoaW1wKTsK
KwkJcmV0dXJuIE5UX1NUQVRVU19OT19NRU1PUlk7CisJfQorCWltcC0+aW5mby0+c2Vzc2lv
bl9pbmZvID0gY29weV9zZXNzaW9uX2luZm8oaW1wLT5pbmZvLAorCQkJCQkJICAgIHNlc3Np
b25faW5mbyk7CisJaWYgKGltcC0+aW5mby0+c2Vzc2lvbl9pbmZvID09IE5VTEwpIHsKKwkJ
VEFMTE9DX0ZSRUUoaW1wKTsKKwkJcmV0dXJuIE5UX1NUQVRVU19OT19NRU1PUlk7CisJfQor
CWltcC0+aW5mby0+bHBfc3ViID0gbHBfc3ViOiAvLyBjb3B5Pz8/CisKKwlpbXAtPmluZm8t
PmNhY2hlX2lkID0gKytnbG9iYWxfY2FjaGVfaWRfY291bnRlcjsKKworCSpfaW1wID0gaW1w
OworCXJldHVybiBOVF9TVEFUVVNfT0s7Cit9CisKK3N0cnVjdCBzYW1iYV9pbXBlcnNvbmF0
aW9uICpzYW1iYV9pbXBlcnNvbmF0aW9uX3JlZihUQUxMT0NfQ1RYICptZW1fY3R4LAorCQkJ
CWNvbnN0IHN0cnVjdCBzYW1iYV9pbXBlcnNvbmF0aW9uICppbXApCit7CisJc3RydWN0IHNh
bWJhX2ltcGVyc29uYXRpb24gKnJlZiA9IE5VTEw7CisKKwlyZWYgPSB0YWxsb2MobWVtX2N0
eCwgc3RydWN0IHNhbWJhX2ltcGVyc29uYXRpb24pOworCWlmIChpbXAgPT0gTlVMTCkgewor
CQlyZXR1cm4gTlVMTDsKKwl9CisJcmVmLT5pbmZvID0gdGFsbG9jX3JlZmVyZW5jZShyZWYs
IGltcCk7CisJaWYgKHJlZi0+aW5mbyA9PSBOVUxMKSB7CisJCVRBTExPQ19GUkVFKHJlZik7
CisJCXJldHVybiBOVUxMOworCX0KKworCXJldHVybiByZWY7Cit9CisKK3ZvaWQgc2FtYmFf
aW1wZXJzb25hdGlvbl9jYWNoZV9yZXNldCh2b2lkKQoreworCXNhbWJhX2ltcGVyc29uYXRp
b25fY2FjaGVfaWRfY3VycmVudCA9IDA7Cit9CisKK3VpbnQ2NF90IHNhbWJhX2ltcGVyc29u
YXRpb25fY2FjaGVfaWQoY29uc3Qgc3RydWN0IHNhbWJhX2ltcGVyc29uYXRpb24gKmltcCkK
K3sKKwlTTUJfQVNTRVJUKGltcC0+aW5mby0+Y2FjaGVfaWQgIT0gMCk7CisJcmV0dXJuIGlt
cC0+aW5mby0+Y2FjaGVfaWQ7Cit9CisKK2NvbnN0IHN0cnVjdCBhdXRoX3Nlc3Npb25faW5m
byAqc2FtYmFfaW1wZXJzb25hdGlvbl9zZXNzaW9uX2luZm8oCisJCWNvbnN0IHN0cnVjdCBz
YW1iYV9pbXBlcnNvbmF0aW9uICppbXApCit7CisJcmV0dXJuIGltcC0+aW5mby0+c2Vzc2lv
bl9pbmZvOworfQorCitjb25zdCBzdHJ1Y3QgbG9hZHBhcm1fc3Vic3RpdHV0aW9uICpzYW1i
YV9pbXBlcnNvbmF0aW9uX3N1YnN0aXR1dGlvbigKKwkJY29uc3Qgc3RydWN0IHNhbWJhX2lt
cGVyc29uYXRpb24gKmltcCkKK3sKKwlyZXR1cm4gaW1wLT5pbmZvLT5scF9zdWI7Cit9CisK
K3ZvaWQgc2FtYmFfaW1wZXJzb25hdGlvbl9jYWNoZV9yZXNldCh2b2lkKQoreworCXNhbWJh
X2ltcGVyc29uYXRpb25fY2FjaGVfaWRfY3VycmVudCA9IDA7Cit9CmRpZmYgLS1naXQgYS9h
dXRoL3NhbWJhX2ltcGVyc29uYXRpb24uaCBiL2F1dGgvc2FtYmFfaW1wZXJzb25hdGlvbi5o
Cm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMC4uMzhhNmQ1YjM5MzA5
Ci0tLSAvZGV2L251bGwKKysrIGIvYXV0aC9zYW1iYV9pbXBlcnNvbmF0aW9uLmgKQEAgLTAs
MCArMSw0MSBAQAorLyoKKyAgIFVuaXggU01CL05ldGJpb3MgaW1wbGVtZW50YXRpb24uCisK
KyAgIEdlbmVyaWMgaW1wZXJzb25hdGlvbiBpbmZyYXN0cnVjdHVyZQorCisgICBDb3B5cmln
aHQgKEMpIFN0ZWZhbiBNZXR6bWFjaGVyIDIwMTkKKworICAgVGhpcyBwcm9ncmFtIGlzIGZy
ZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKKyAg
IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2Ug
YXMgcHVibGlzaGVkIGJ5CisgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uOyBlaXRo
ZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgorICAgKGF0IHlvdXIgb3B0aW9uKSBh
bnkgbGF0ZXIgdmVyc2lvbi4KKworICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGlu
IHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCisgICBidXQgV0lUSE9VVCBBTlkg
V0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgorICAgTUVS
Q0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2Vl
IHRoZQorICAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4K
KworICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVy
YWwgUHVibGljIExpY2Vuc2UKKyAgIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90
LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LgorKi8KKworI2lmbmRlZiBf
X0FVVEhfU0FNQkFfSU1QRVJTT05BVElPTl9IX18KKyNkZWZpbmUgX19BVVRIX1NBTUJBX0lN
UEVSU09OQVRJT05fSF9fIDEKKworc3RydWN0IGF1dGhfc2Vzc2lvbl9pbmZvOworc3RydWN0
IGxvYWRwYXJtX3N1YnN0aXR1dGlvbjsKK3N0cnVjdCBzYW1iYV9pbXBlcnNvbmF0aW9uOwor
CitOVFNUQVRVUyBzYW1iYV9pbXBlcnNvbmF0aW9uX2NyZWF0ZShUQUxMT0NfQ1RYICptZW1f
Y3R4LAorCQkJCWNvbnN0IHN0cnVjdCBhdXRoX3Nlc3Npb25faW5mbyAqc2Vzc2lvbl9pbmZv
LAorCQkJCXN0cnVjdCBzYW1iYV9pbXBlcnNvbmF0aW9uICoqX2ltcCk7CitzdHJ1Y3Qgc2Ft
YmFfaW1wZXJzb25hdGlvbiAqc2FtYmFfaW1wZXJzb25hdGlvbl9yZWYoVEFMTE9DX0NUWCAq
bWVtX2N0eCwKKwkJCQljb25zdCBzdHJ1Y3Qgc2FtYmFfaW1wZXJzb25hdGlvbiAqaW1wKTsK
K3ZvaWQgc2FtYmFfaW1wZXJzb25hdGlvbl9jYWNoZV9yZXNldCh2b2lkKTsKK3VpbnQ2NF90
IHNhbWJhX2ltcGVyc29uYXRpb25fY2FjaGVfaWQoY29uc3Qgc3RydWN0IHNhbWJhX2ltcGVy
c29uYXRpb24gKmltcCk7Citjb25zdCBzdHJ1Y3QgYXV0aF9zZXNzaW9uX2luZm8gKnNhbWJh
X2ltcGVyc29uYXRpb25fc2Vzc2lvbl9pbmZvKAorCQljb25zdCBzdHJ1Y3Qgc2FtYmFfaW1w
ZXJzb25hdGlvbiAqaW1wKTsKK2NvbnN0IHN0cnVjdCBsb2FkcGFybV9zdWJzdGl0dXRpb24g
KnNhbWJhX2ltcGVyc29uYXRpb25fc3Vic3RpdHV0aW9uKAorCQljb25zdCBzdHJ1Y3Qgc2Ft
YmFfaW1wZXJzb25hdGlvbiAqaW1wKQorCisjZW5kaWYgLyogX19BVVRIX1NBTUJBX0lNUEVS
U09OQVRJT05fSF9fICovCi0tIAoyLjE3LjEKCgpGcm9tIDU5MjcyMDU2N2FhYmQ2OTQzMDc3
MTE3MDQ1MjE0Y2IyNWNjNjAzZDMgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0
ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+CkRhdGU6IFdlZCwgMTggU2VwIDIw
MTkgMTE6MDc6MDggKzAyMDAKU3ViamVjdDogW1BBVENIIDE4LzE4XSBUT0RPOiBzbWJfdmZz
X2ltcGVyc29uYXRpb24KCi0tLQogc291cmNlMy9pbmNsdWRlL3Zmcy5oIHwgODAgKysrKysr
KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKwogc291cmNlMy9zbWJkL3Zm
cy5jICAgIHwgMjQgKysrKysrKysrKysrKwogMiBmaWxlcyBjaGFuZ2VkLCAxMDQgaW5zZXJ0
aW9ucygrKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvaW5jbHVkZS92ZnMuaCBiL3NvdXJjZTMv
aW5jbHVkZS92ZnMuaAppbmRleCA1ZWE0ZjgwNTgxNzQuLmU2NTdmMWQzNTExZCAxMDA2NDQK
LS0tIGEvc291cmNlMy9pbmNsdWRlL3Zmcy5oCisrKyBiL3NvdXJjZTMvaW5jbHVkZS92ZnMu
aApAQCAtMzA2LDYgKzMwNiw3IEBAIHN0cnVjdCBlYV9saXN0Owogc3RydWN0IHNtYl9maWxl
X3RpbWU7CiBzdHJ1Y3Qgc21iX2ZpbGVuYW1lOwogc3RydWN0IGRmc19HZXRERlNSZWZlcnJh
bDsKK3N0cnVjdCBzYW1iYV9pbXBlcnNvbmF0aW9uOwogCiB0eXBlZGVmIHVuaW9uIHVuaWRf
dCB7CiAJdWlkX3QgdWlkOwpAQCAtMjAxMiw0ICsyMDEzLDgzIEBAIE5UU1RBVFVTIHZmc19u
b3RfaW1wbGVtZW50ZWRfZHVyYWJsZV9yZWNvbm5lY3Qoc3RydWN0IHZmc19oYW5kbGVfc3Ry
dWN0ICpoYW5kbGUsCiAJCQkJCSAgICAgICBUQUxMT0NfQ1RYICptZW1fY3R4LAogCQkJCQkg
ICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqKmZzcCwKIAkJCQkJICAgICAgIERBVEFfQkxP
QiAqbmV3X2Nvb2tpZSk7CisKK05UU1RBVFVTIHNtYl92ZnNfaW1wZXJzb25hdGVfdW5peF90
b2tlbihjb25zdCBzdHJ1Y3Qgc2FtYmFfaW1wZXJzb25hdGlvbiAqaW1wKTsKKworLyoKKyAq
IEZvciBub3cgd2UnbGwgYWxsb3cgX19pbXAgPSBOVUxMLCBidXQgb25jZSBpdCdzIHBhc3Nl
ZCBkb3duCisgKiBldmVyeXdoZXJlIHdlIHNob3VsZCBhc3NlcnQgYSB2YWxpZCBwb2ludGVy
LgorICovCisjZGVmaW5lIF9fU01CX1ZGU19JTVBFUlNPTkFURV9VTklYX1RPS0VOX0NIRUNL
X0VSUk5PKF9faW1wLCBfX3JldF9lcnJubykgXAorZG8geyBcCisJY29uc3Qgc3RydWN0IHNh
bWJhX2ltcGVyc29uYXRpb24gKl9fX2ltcCA9IChfX2ltcCk7IFwKKwlpZiAoX19faW1wICE9
IE5VTEwpIHtcCisJCU5UU1RBVFVTIHN0YXR1czsgXAorCQlzdGF0dXMgPSBzbWJfdmZzX2lt
cGVyc29uYXRlX3VuaXhfdG9rZW4oX19faW1wKTsgXAorCQlpZiAoIU5UX1NUQVRVU19JU19P
SyhzdGF0dXMpKSB7IFwKKwkJCWVycm5vID0gX19yZXRfZXJybm87IFwKKwkJCXJldHVybiAt
MTsgXAorCQl9IFwKKwl9IFwKK30gd2hpbGUoMCkKKworc3RhdGljIGlubGluZSBpbnQgc21i
X3Zmc19zeXNfb3BlbmF0KGNvbnN0IHN0cnVjdCBzYW1iYV9pbXBlcnNvbmF0aW9uICppbXAs
CisJCQkJICAgICBpbnQgZGlyZmQsCisJCQkJICAgICBjb25zdCBjaGFyICpwYXRobmFtZSwK
KwkJCQkgICAgIGludCBmbGFncywKKwkJCQkgICAgIG1vZGVfdCBtb2RlKQoreworCV9fU01C
X1ZGU19JTVBFUlNPTkFURV9VTklYX1RPS0VOX0NIRUNLX0VSUk5PKGltcCwgRVBFUk0pOwor
CXJldHVybiBvcGVuYXQoZGlyZmQsIHBhdGhuYW1lLCBmbGFncywgbW9kZSk7Cit9CisjZGVm
aW5lIG9wZW5hdCBfX2Vycm9yX3BsZWFzZV91c2Vfc21iX3Zmc19zeXNfb3BlbmF0CisKK3N0
YXRpYyBpbmxpbmUgaW50IHNtYl92ZnNfc3lzX21rZGlyYXQoY29uc3Qgc3RydWN0IHNhbWJh
X2ltcGVyc29uYXRpb24gKmltcCwKKwkJCQkgICAgICBpbnQgZGlyZmQsCisJCQkJICAgICAg
Y29uc3QgY2hhciAqcGF0aG5hbWUsCisJCQkJICAgICAgbW9kZV90IG1vZGUpCit7CisJX19T
TUJfVkZTX0lNUEVSU09OQVRFX1VOSVhfVE9LRU5fQ0hFQ0tfRVJSTk8oaW1wLCBFUEVSTSk7
CisJcmV0dXJuIG1rZGlyYXQoZGlyZmQsIGNvbnN0IGNoYXIgKnBhdGhuYW1lLCBtb2RlKTsK
K30KKyNkZWZpbmUgbWtkaXJhdCBfX2Vycm9yX3BsZWFzZV91c2Vfc21iX3Zmc19zeXNfbWtk
aXJhdAorCitzdGF0aWMgaW5saW5lIGludCBzbWJfdmZzX3N5c19yZW5hbWVhdChjb25zdCBz
dHJ1Y3Qgc2FtYmFfaW1wZXJzb25hdGlvbiAqaW1wLAorCQkJCSAgICAgICBpbnQgb2xkZGly
ZmQsIGNvbnN0IGNoYXIgKm9sZHBhdGgsCisJCQkJICAgICAgIGludCBuZXdkaXJmZCwgY29u
c3QgY2hhciAqbmV3cGF0aCkKK3sKKwlfX1NNQl9WRlNfSU1QRVJTT05BVEVfVU5JWF9UT0tF
Tl9DSEVDS19FUlJOTyhpbXAsIEVQRVJNKTsKKwlyZXR1cm4gcmVuYW1lYXQob2xkZGlyZmQs
IG9sZHBhdGgsIG5ld2RpcmZkLCBuZXdwYXRoKTsKK30KKyNkZWZpbmUgcmVuYW1lYXQgX19l
cnJvcl9wbGVhc2VfdXNlX3NtYl92ZnNfc3lzX3JlbmFtZWF0CisKK3N0YXRpYyBpbmxpbmUg
aW50IHNtYl92ZnNfc3lzX3N5bWxpbmthdChjb25zdCBzdHJ1Y3Qgc2FtYmFfaW1wZXJzb25h
dGlvbiAqaW1wLAorCQkJCQljb25zdCBjaGFyICp0YXJnZXQsCisJCQkJCWludCBuZXdkaXJm
ZCwKKwkJCQkJY29uc3QgY2hhciAqbGlua3BhdGgpCit7CisJX19TTUJfVkZTX0lNUEVSU09O
QVRFX1VOSVhfVE9LRU5fQ0hFQ0tfRVJSTk8oaW1wLCBFUEVSTSk7CisJcmV0dXJuIHN5bWxp
bmthdCh0YXJnZXQsIG5ld2RpcmZkLCBsaW5rcGF0aCk7Cit9CisjZGVmaW5lIHN5bWxpbmth
dCBfX2Vycm9yX3BsZWFzZV91c2Vfc21iX3Zmc19zeXNfc3ltbGlua2F0CisKK3N0YXRpYyBp
bmxpbmUgc3NpemVfdCBzbWJfdmZzX3N5c19yZWFkbGlua2F0KAorCQljb25zdCBzdHJ1Y3Qg
c2FtYmFfaW1wZXJzb25hdGlvbiAqaW1wLAorCQlpbnQgZGlyZmQsIGNvbnN0IGNoYXIgKnBh
dGhuYW1lLCBjaGFyICpidWYsIHNpemVfdCBidWZzaXopCit7CisJX19TTUJfVkZTX0lNUEVS
U09OQVRFX1VOSVhfVE9LRU5fQ0hFQ0tfRVJSTk8oaW1wLCBFUEVSTSk7CisJcmV0dXJuIHJl
YWRsaW5rYXQoZGlyZmQsIHBhdGhuYW1lLCBidWYsIGJ1ZnNpeik7Cit9CisjZGVmaW5lIHJl
YWRsaW5rYXQgX19lcnJvcl9wbGVhc2VfdXNlX3NtYl92ZnNfc3lzX3JlYWRsaW5rYXQKKwor
c3RhdGljIGlubGluZSBpbnQgc21iX3Zmc19zeXNfbGlua2F0KGNvbnN0IHN0cnVjdCBzYW1i
YV9pbXBlcnNvbmF0aW9uICppbXAsCisJCQkJICAgICBpbnQgb2xkZGlyZmQsIGNvbnN0IGNo
YXIgKm9sZHBhdGgsCisJCQkJICAgICBpbnQgbmV3ZGlyZmQsIGNvbnN0IGNoYXIgKm5ld3Bh
dGgsCisJCQkJICAgICBpbnQgZmxhZ3MpCit7CisJX19TTUJfVkZTX0lNUEVSU09OQVRFX1VO
SVhfVE9LRU5fQ0hFQ0tfRVJSTk8oaW1wLCBFUEVSTSk7CisJcmV0dXJuIGxpbmthdChvbGRk
aXJmZCwgb2xkcGF0aCwgbmV3ZGlyZmQsIG5ld3BhdGgsIGZsYWdzKTsKK30KKyNkZWZpbmUg
bGlua2F0IF9fZXJyb3JfcGxlYXNlX3VzZV9zbWJfdmZzX3N5c19saW5rYXQKKwogI2VuZGlm
IC8qIF9WRlNfSCAqLwpkaWZmIC0tZ2l0IGEvc291cmNlMy9zbWJkL3Zmcy5jIGIvc291cmNl
My9zbWJkL3Zmcy5jCmluZGV4IDM0OTIzYjYyYWI0Mi4uMjBkMmZjZWI4MDdkIDEwMDY0NAot
LS0gYS9zb3VyY2UzL3NtYmQvdmZzLmMKKysrIGIvc291cmNlMy9zbWJkL3Zmcy5jCkBAIC0z
ODQsNiArMzg0LDMwIEBAIGJvb2wgc21iZF92ZnNfaW5pdChjb25uZWN0aW9uX3N0cnVjdCAq
Y29ubikKIAlyZXR1cm4gVHJ1ZTsKIH0KIAorTlRTVEFUVVMgc21iX3Zmc19pbXBlcnNvbmF0
ZV91bml4X3Rva2VuKGNvbnN0IHN0cnVjdCBzYW1iYV9pbXBlcnNvbmF0aW9uICppbXApCit7
CisJU01CX0FTU0VSVChpbXAtPmluZm8tPmNhY2hlX2lkICE9IDApOworCisJaWYgKHNtYl92
ZnNfaW1wZXJzb25hdGlvbl9jYWNoZV9pZF9jdXJyZW50ICE9IGltcC0+aW5mby0+Y2FjaGVf
aWQpIHsKKwkJY29uc3Qgc3RydWN0IGF1dGhfc2Vzc2lvbl9pbmZvICpzaSA9IGltcC0+aW5m
by0+c2Vzc2lvbl9pbmZvOworCQljb25zdCBzdHJ1Y3QgdW5peF90b2tlbiAqdXRvayA9IHNp
LT51bml4X3Rva2VuOworCQlpbnQgcmV0OworCisJCS8qIEJlY29tZSB0aGUgY29ycmVjdCBj
cmVkZW50aWFsIG9uIHRoaXMgdGhyZWFkLiAqLworCQlyZXQgPSBzZXRfdGhyZWFkX2NyZWRl
bnRpYWxzKHV0b2stPnVpZCwKKwkJCQkJICAgICB1dG9rLT5naWQsCisJCQkJCSAgICAgKHNp
emVfdCl1dG9rLT5uZ3JvdXBzLAorCQkJCQkgICAgIHV0b2stPmdyb3Vwcyk7CisJCWlmIChy
ZXQgIT0gMCkgeworCQkJcmV0dXJuIE5UX1NUQVRVU19DQU5OT1RfSU1QRVJTT05BVEU7CisJ
CX0KKworCQlzbWJfdmZzX2ltcGVyc29uYXRpb25fY2FjaGVfaWRfY3VycmVudCA9IGltcC0+
aW5mby0+Y2FjaGVfaWQ7CisJfQorCisJcmV0dXJuIE5UX1NUQVRVU19PSzsKK30KKwogLyoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKICBDaGVjayBpZiBhIGZpbGUgZXhpc3RzIGluIHRoZSB2ZnMuCiAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8KLS0gCjIuMTcuMQoK
--------------15C5D23ADFEBCA58069A997D--

--dkn595DKL30D9uEKLWdVlJ12Klu6MfZjp--

--admkNnuneStxjrD0x0qyw6eJxEyknWeki
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEfFbGo3YXpfgryIw9DbX1YShpvVYFAl2nO4cACgkQDbX1YShp
vVZ1hg//RaIm/G9Gr4FcEx17bYwbZiaxvExKQlx7fyhARBxtEmneI2Uj2d9bqAYh
/ZEmkJOX6o7GKlQnUaScoF2ARmcPaiZVp/Jta4pXWgcq/msAmNPT18Yk0A9/cVln
ldhhPcRB/xJi2Zks35n+Dd211tVkoWpKX2d0eoRLgTxLh1x0JQLZOsAhDXmCarLg
DumSuiYoMDVf4gBbk9URf8UKxfSfWS97oVJe+LvPPPLJcnBRsrHV0j8cpuXDp863
tcNFyIsW/zA2MKZ6PiMVST2zYlMcFT/k646sVPJwFSgaZRfMc1Xf56fbyIqkPqfw
kTHdU7v1G5StAdfEu2CX9IaMW54ImE8c9jV+AxmOHx06OYtTmOSmSXL1SrS9wNKk
DphpJFTP/5ChckRdAYaQ0ara4xLqtWqkxS97ihmMirE6rKZ7Y88g2Kwzmt2QEU0D
//ZA36k/xn3V7J62Cb2XykY9POOhR35kS4ijwVxnEXhVeO3tQSBUmJ99YX9M2P07
fGavHGfE2JzjLtQOUQ2KOyhrSdmwRp+CUEpPNuHguMOiDhYK+4IgM6t4jYwQjLay
Jl2sue/+4oKOy32Gg1m1ngJ9BT3pM5WinwSRk0rZEI6Mm8ccIruFn6MrGjsW4POq
OG4yInszc96Og3lqV2GVKq8OllBWysMB7pD608S76C1LslTYkK4=
=yiHb
-----END PGP SIGNATURE-----

--admkNnuneStxjrD0x0qyw6eJxEyknWeki--

