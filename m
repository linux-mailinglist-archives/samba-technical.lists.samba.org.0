Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id 8D2AC9907C
	for <lists+samba-technical@lfdr.de>; Thu, 22 Aug 2019 12:15:00 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=Cc:From:List-Id:Date:To:Subject;
	bh=pXM0ApkXA7R1trPU5ey9C270ayI39ljfMA9wqkaCj1c=; b=dnRa9zQh6BeTuHKpNYSecEhrwt
	l3pArEwQMaKNwiciZX5yAczjVe6dQVx31XnQqeVb/ZpATPGukfUBjgD2ToMq9awdlO+S8ACkV5hPU
	10UB9dCMy/f62fnVtIyMbY1mkWpNq7B8aa4L2BHbDl1rifJv+Hza+U4LtiFjdO4fC8xqz4h5XKDW6
	UUk6E4dWxVRLfuEwmaLSC2Jyfi10hPXCvUNw4YDUXxZp4rsdJCEOXDBrrxZ941RmAQAulbeaaXPCb
	N6m783aLmSboG13xwDhHmPmBHxpF34Y7SV/BN0OSDEQlA4w09v69cr9VZCQx63EJ0ZtqlJaCZ6+DV
	upOw+Qzg==;
Received: from localhost ([::1]:33410 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1i0k6F-007Xrs-6s; Thu, 22 Aug 2019 10:13:47 +0000
Received: from latitanza.investici.org ([82.94.249.234]:58319) 
 by hr1.samba.org with esmtps (TLS1.2:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1i0k69-007Xrl-OV
 for samba-technical@lists.samba.org; Thu, 22 Aug 2019 10:13:44 +0000
Received: from mx3.investici.org (localhost [127.0.0.1])
 by latitanza.investici.org (Postfix) with ESMTP id A00F4120522;
 Thu, 22 Aug 2019 10:13:31 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cryptolab.net;
 s=stigmate; t=1566468811;
 bh=pXM0ApkXA7R1trPU5ey9C270ayI39ljfMA9wqkaCj1c=;
 h=Subject:From:To:Cc:Date:From;
 b=oEZ4Kn+PE/YfchPQVjs/Kx41Z9mcUabHXEF1t/bMMzxiHbdldn91l6YOctK2yYGbp
 1ndh5dqQPmkpd5W6jKnBjTpsRarYyAvXpVspZ7MMYIIoE/mIy0CuWZuYyPZj8PYPg3
 MZkmScwOqW/oWmSiPGVPmDhW8m7gjsu5kYGtUvS8=
Received: from [82.94.249.234] (mx3.investici.org [82.94.249.234])
 (Authenticated sender: anoopcs@autistici.org) by localhost (Postfix) with
 ESMTPSA id 4706F1204DC; Thu, 22 Aug 2019 10:13:21 +0000 (UTC)
Message-ID: <dbaed65e1d71d7cf5da358359f2f071204a2a8a0.camel@cryptolab.net>
Subject: [PATCH] Use pthreadpool for aio scheduling in vfs_glusterfs
To: samba-technical <samba-technical@lists.samba.org>
Date: Thu, 22 Aug 2019 15:43:08 +0530
Content-Type: multipart/mixed; boundary="=-rsIbkcVAlrSQezb8npog"
User-Agent: Evolution 3.32.4 (3.32.4-1.fc30) 
MIME-Version: 1.0
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Anoop C S via samba-technical <samba-technical@lists.samba.org>
Reply-To: Anoop C S <anoopcs@cryptolab.net>
Cc: "Volker.Lendecke" <Volker.Lendecke@SerNet.DE>, gd <gd@samba.org>,
 Stefan Metzmacher <metze@samba.org>, Jeremy Allison <jra@samba.org>,
 obnox <obnox@samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>


--=-rsIbkcVAlrSQezb8npog
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit

Hi,

Proposing the attached patch to use pthreadpool inside vfs_glusterfs to
schedule aio operations which is found to achieve significant
performance boost.

Reviews are appreciated.

Thanks,
Anoop C S.

--=-rsIbkcVAlrSQezb8npog
Content-Disposition: attachment; filename="master.patch"
Content-Type: text/x-patch; name="master.patch"; charset="UTF-8"
Content-Transfer-Encoding: base64

RnJvbSBjNDhhODBlZjA3MjQ5NjVkMWJlNDk4OGYxMTQ3N2RiYWFiNWJjZmJlIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBQb29ybmltYSBHIDxwZ3VydXNpZEByZWRoYXQuY29tPgpEYXRl
OiBXZWQsIDI0IEp1bCAyMDE5IDE1OjE1OjMzICswNTMwClN1YmplY3Q6IFtQQVRDSF0gdmZzX2ds
dXN0ZXJmczogVXNlIHB0aHJlYWRwb29sIGZvciBzY2hlZHVsaW5nIGFpbyBvcGVyYXRpb25zCgpT
aWduZWQtb2ZmLWJ5OiBQb29ybmltYSBHIDxwZ3VydXNpZEByZWRoYXQuY29tPgotLS0KIHNvdXJj
ZTMvbW9kdWxlcy92ZnNfZ2x1c3RlcmZzLmMgfCA1MzUgKysrKysrKysrKysrKysrKy0tLS0tLS0t
LS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCAyNjAgaW5zZXJ0aW9ucygrKSwgMjc1IGRlbGV0aW9u
cygtKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfZ2x1c3RlcmZzLmMgYi9zb3Vy
Y2UzL21vZHVsZXMvdmZzX2dsdXN0ZXJmcy5jCmluZGV4IDA5Mjk5YmM3MGM1Li43ZjYzYjVkNjY2
MiAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19nbHVzdGVyZnMuYworKysgYi9zb3Vy
Y2UzL21vZHVsZXMvdmZzX2dsdXN0ZXJmcy5jCkBAIC00NSwxNCArNDUsMTEgQEAKICNpbmNsdWRl
ICJsaWIvdXRpbC9zeXNfcncuaCIKICNpbmNsdWRlICJzbWJwcm9maWxlLmgiCiAjaW5jbHVkZSAi
bW9kdWxlcy9wb3NpeGFjbF94YXR0ci5oIgorI2luY2x1ZGUgImxpYi9wdGhyZWFkcG9vbC9wdGhy
ZWFkcG9vbF90ZXZlbnQuaCIKIAogI2RlZmluZSBERUZBVUxUX1ZPTEZJTEVfU0VSVkVSICJsb2Nh
bGhvc3QiCiAjZGVmaW5lIEdMVVNURVJfTkFNRV9NQVggMjU1CiAKLXN0YXRpYyBpbnQgcmVhZF9m
ZCA9IC0xOwotc3RhdGljIGludCB3cml0ZV9mZCA9IC0xOwotc3RhdGljIHN0cnVjdCB0ZXZlbnRf
ZmQgKmFpb19yZWFkX2V2ZW50ID0gTlVMTDsKLQogLyoqCiAgKiBIZWxwZXIgdG8gY29udmVydCBz
dHJ1Y3Qgc3RhdCB0byBzdHJ1Y3Qgc3RhdF9leC4KICAqLwpAQCAtNzEzLDI0NSArNzEwLDIxMSBA
QCBzdGF0aWMgc3NpemVfdCB2ZnNfZ2x1c3Rlcl9wcmVhZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwKIAlyZXR1cm4gcmV0OwogfQogCi1zdHJ1Y3QgZ2x1c3RlcmZzX2Fpb19zdGF0
ZTsKLQotc3RydWN0IGdsdXN0ZXJmc19haW9fd3JhcHBlciB7Ci0Jc3RydWN0IGdsdXN0ZXJmc19h
aW9fc3RhdGUgKnN0YXRlOwotfTsKLQotc3RydWN0IGdsdXN0ZXJmc19haW9fc3RhdGUgeworc3Ry
dWN0IHZmc19nbHVzdGVyX3ByZWFkX3N0YXRlIHsKIAlzc2l6ZV90IHJldDsKLQlzdHJ1Y3QgdGV2
ZW50X3JlcSAqcmVxOwotCWJvb2wgY2FuY2VsbGVkOworCWdsZnNfZmRfdCAqZmQ7CisJdm9pZCAq
YnVmOworCXNpemVfdCBjb3VudDsKKwlvZmZfdCBvZmZzZXQ7CisKIAlzdHJ1Y3QgdmZzX2Fpb19z
dGF0ZSB2ZnNfYWlvX3N0YXRlOwotCXN0cnVjdCB0aW1lc3BlYyBzdGFydDsKIAlTTUJQUk9GSUxF
X0JZVEVTX0FTWU5DX1NUQVRFKHByb2ZpbGVfYnl0ZXMpOwogfTsKIAotc3RhdGljIGludCBhaW9f
d3JhcHBlcl9kZXN0cnVjdG9yKHN0cnVjdCBnbHVzdGVyZnNfYWlvX3dyYXBwZXIgKndyYXApCitz
dGF0aWMgdm9pZCB2ZnNfZ2x1c3Rlcl9wcmVhZF9kbyh2b2lkICpwcml2YXRlX2RhdGEpCiB7Ci0J
aWYgKHdyYXAtPnN0YXRlICE9IE5VTEwpIHsKLQkJd3JhcC0+c3RhdGUtPmNhbmNlbGxlZCA9IHRy
dWU7Ci0JfQorCXN0cnVjdCB2ZnNfZ2x1c3Rlcl9wcmVhZF9zdGF0ZSAqc3RhdGUgPSB0YWxsb2Nf
Z2V0X3R5cGVfYWJvcnQoCisJCXByaXZhdGVfZGF0YSwgc3RydWN0IHZmc19nbHVzdGVyX3ByZWFk
X3N0YXRlKTsKKwlzdHJ1Y3QgdGltZXNwZWMgc3RhcnRfdGltZTsKKwlzdHJ1Y3QgdGltZXNwZWMg
ZW5kX3RpbWU7CiAKLQlyZXR1cm4gMDsKLX0KKwlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NFVF9C
VVNZKHN0YXRlLT5wcm9maWxlX2J5dGVzKTsKIAotLyoKLSAqIFRoaXMgZnVuY3Rpb24gaXMgdGhl
IGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgb24gZ2x1c3RlcmZzCi0gKiB0aHJlYWRzIG9u
Y2UgdGhlIGFzeW5jIElPIHN1Ym1pdHRlZCBpcyBjb21wbGV0ZS4gVG8gbm90aWZ5Ci0gKiBTYW1i
YSBvZiB0aGUgY29tcGxldGlvbiB3ZSB1c2UgYSBwaXBlIGJhc2VkIHF1ZXVlLgotICovCisJUFJP
RklMRV9USU1FU1RBTVAoJnN0YXJ0X3RpbWUpOworCisJZG8gewogI2lmZGVmIEhBVkVfR0ZBUElf
VkVSXzdfNgotc3RhdGljIHZvaWQgYWlvX2dsdXN0ZXJmc19kb25lKGdsZnNfZmRfdCAqZmQsIHNz
aXplX3QgcmV0LAotCQkJICAgICAgIHN0cnVjdCBnbGZzX3N0YXQgKnByZXN0YXQsCi0JCQkgICAg
ICAgc3RydWN0IGdsZnNfc3RhdCAqcG9zdHN0YXQsCi0JCQkgICAgICAgdm9pZCAqZGF0YSkKKwkJ
c3RhdGUtPnJldCA9IGdsZnNfcHJlYWQoc3RhdGUtPmZkLCBzdGF0ZS0+YnVmLCBzdGF0ZS0+Y291
bnQsCisJCQkJCXN0YXRlLT5vZmZzZXQsIDAsIE5VTEwpOwogI2Vsc2UKLXN0YXRpYyB2b2lkIGFp
b19nbHVzdGVyZnNfZG9uZShnbGZzX2ZkX3QgKmZkLCBzc2l6ZV90IHJldCwgdm9pZCAqZGF0YSkK
KwkJc3RhdGUtPnJldCA9IGdsZnNfcHJlYWQoc3RhdGUtPmZkLCBzdGF0ZS0+YnVmLCBzdGF0ZS0+
Y291bnQsCisJCQkJCXN0YXRlLT5vZmZzZXQsIDApOwogI2VuZGlmCi17Ci0Jc3RydWN0IGdsdXN0
ZXJmc19haW9fc3RhdGUgKnN0YXRlID0gTlVMTDsKLQlpbnQgc3RzID0gMDsKLQlzdHJ1Y3QgdGlt
ZXNwZWMgZW5kOwotCi0Jc3RhdGUgPSAoc3RydWN0IGdsdXN0ZXJmc19haW9fc3RhdGUgKilkYXRh
OworCX0gd2hpbGUgKChzdGF0ZS0+cmV0ID09IC0xKSAmJiAoZXJybm8gPT0gRUlOVFIpKTsKIAot
CVBST0ZJTEVfVElNRVNUQU1QKCZlbmQpOwotCi0JaWYgKHJldCA8IDApIHsKLQkJc3RhdGUtPnJl
dCA9IC0xOworCWlmIChzdGF0ZS0+cmV0ID09IC0xKSB7CiAJCXN0YXRlLT52ZnNfYWlvX3N0YXRl
LmVycm9yID0gZXJybm87Ci0JfSBlbHNlIHsKLQkJc3RhdGUtPnJldCA9IHJldDsKIAl9Ci0Jc3Rh
dGUtPnZmc19haW9fc3RhdGUuZHVyYXRpb24gPSBuc2VjX3RpbWVfZGlmZigmZW5kLCAmc3RhdGUt
PnN0YXJ0KTsKIAotCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfRU5EKHN0YXRlLT5wcm9maWxlX2J5
dGVzKTsKKwlQUk9GSUxFX1RJTUVTVEFNUCgmZW5kX3RpbWUpOwogCi0JLyoKLQkgKiBXcml0ZSB0
aGUgc3RhdGUgcG9pbnRlciB0byBnbHVzdGVyZnNfYWlvX3N0YXRlIHRvIHRoZQotCSAqIHBpcGUs
IHNvIHdlIGNhbiBjYWxsIHRldmVudF9yZXFfZG9uZSgpIGZyb20gdGhlIG1haW4gdGhyZWFkLAot
CSAqIGJlY2F1c2UgdGV2ZW50X3JlcV9kb25lKCkgaXMgbm90IGRlc2lnbmVkIHRvIGJlIGV4ZWN1
dGVkIGluCi0JICogdGhlIG11bHRpdGhyZWFkIGVudmlyb25tZW50LCBzbyB0ZXZlbnRfcmVxX2Rv
bmUoKSBtdXN0IGJlCi0JICogZXhlY3V0ZWQgZnJvbSB0aGUgc21iZCBtYWluIHRocmVhZC4KLQkg
KgotCSAqIHdyaXRlKDIpIG9uIHBpcGVzIHdpdGggc2l6ZXMgdW5kZXIgX1BPU0lYX1BJUEVfQlVG
Ci0JICogaW4gc2l6ZSBpcyBhdG9taWMsIHdpdGhvdXQgdGhpcywgdGhlIHVzZSBvcCBwaXBlcyBp
biB0aGlzCi0JICogY29kZSB3b3VsZCBub3Qgd29yay4KLQkgKgotCSAqIHN5c193cml0ZSBpcyBh
IHRoaW4gZW5vdWdoIHdyYXBwZXIgYXJvdW5kIHdyaXRlKDIpCi0JICogdGhhdCB3ZSBjYW4gdHJ1
c3QgaXQgaGVyZS4KLQkgKi8KKwlzdGF0ZS0+dmZzX2Fpb19zdGF0ZS5kdXJhdGlvbiA9IG5zZWNf
dGltZV9kaWZmKCZlbmRfdGltZSwgJnN0YXJ0X3RpbWUpOwogCi0Jc3RzID0gc3lzX3dyaXRlKHdy
aXRlX2ZkLCAmc3RhdGUsIHNpemVvZihzdHJ1Y3QgZ2x1c3RlcmZzX2Fpb19zdGF0ZSAqKSk7Ci0J
aWYgKHN0cyA8IDApIHsKLQkJREVCVUcoMCwoIlxuV3JpdGUgdG8gcGlwZSBmYWlsZWQgKCVzKSIs
IHN0cmVycm9yKGVycm5vKSkpOwotCX0KLQotCXJldHVybjsKKwlTTUJQUk9GSUxFX0JZVEVTX0FT
WU5DX1NFVF9JRExFKHN0YXRlLT5wcm9maWxlX2J5dGVzKTsKIH0KIAotLyoKLSAqIFJlYWQgZWFj
aCByZXEgb2ZmIHRoZSBwaXBlIGFuZCBwcm9jZXNzIGl0LgotICovCi1zdGF0aWMgdm9pZCBhaW9f
dGV2ZW50X2ZkX2RvbmUoc3RydWN0IHRldmVudF9jb250ZXh0ICpldmVudF9jdHgsCi0JCQkJc3Ry
dWN0IHRldmVudF9mZCAqZmRlLAotCQkJCXVpbnQxNl90IGZsYWdzLCB2b2lkICpkYXRhKQorc3Rh
dGljIGludCB2ZnNfZ2x1c3Rlcl9wcmVhZF9zdGF0ZV9kZXN0cnVjdG9yKHN0cnVjdCB2ZnNfZ2x1
c3Rlcl9wcmVhZF9zdGF0ZSAqc3RhdGUpCiB7Ci0Jc3RydWN0IHRldmVudF9yZXEgKnJlcSA9IE5V
TEw7Ci0Jc3RydWN0IGdsdXN0ZXJmc19haW9fc3RhdGUgKnN0YXRlID0gTlVMTDsKLQlpbnQgc3Rz
ID0gMDsKLQotCS8qCi0JICogcmVhZCgyKSBvbiBwaXBlcyBpcyBhdG9taWMgaWYgdGhlIG5lZWRl
ZCBkYXRhIGlzIGF2YWlsYWJsZQotCSAqIGluIHRoZSBwaXBlLCBwZXIgU1VTIGFuZCBQT1NJWC4g
IEJlY2F1c2Ugd2UgYWx3YXlzIHdyaXRlCi0JICogdG8gdGhlIHBpcGUgaW4gc2l6ZW9mKHN0cnVj
dCB0ZXZlbnRfcmVxICopIGNodW5rcywgd2UgY2FuCi0JICogYWx3YXlzIHJlYWQgaW4gdGhvc2Ug
Y2h1bmtzLCBhdG9taWNhbGx5LgotCSAqCi0JICogc3lzX3JlYWQgaXMgYSB0aGluIGVub3VnaCB3
cmFwcGVyIGFyb3VuZCByZWFkKDIpIHRoYXQgd2UKLQkgKiBjYW4gdHJ1c3QgaXQgaGVyZS4KLQkg
Ki8KLQotCXN0cyA9IHN5c19yZWFkKHJlYWRfZmQsICZzdGF0ZSwgc2l6ZW9mKHN0cnVjdCBnbHVz
dGVyZnNfYWlvX3N0YXRlICopKTsKKwlyZXR1cm4gLTE7Cit9CiAKLQlpZiAoc3RzIDwgMCkgewot
CQlERUJVRygwLCgiXG5SZWFkIGZyb20gcGlwZSBmYWlsZWQgKCVzKSIsIHN0cmVycm9yKGVycm5v
KSkpOwotCX0KK3N0YXRpYyB2b2lkIHZmc19nbHVzdGVyX3ByZWFkX2RvbmUoc3RydWN0IHRldmVu
dF9yZXEgKnN1YnJlcSkKK3sKKwlzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxID0gdGV2ZW50X3JlcV9j
YWxsYmFja19kYXRhKAorCQlzdWJyZXEsIHN0cnVjdCB0ZXZlbnRfcmVxKTsKKwlzdHJ1Y3QgdmZz
X2dsdXN0ZXJfcHJlYWRfc3RhdGUgKnN0YXRlID0gdGV2ZW50X3JlcV9kYXRhKAorCQlyZXEsIHN0
cnVjdCB2ZnNfZ2x1c3Rlcl9wcmVhZF9zdGF0ZSk7CisJaW50IHJldDsKIAotCS8qIGlmIHdlJ3Zl
IGNhbmNlbGxlZCB0aGUgb3AsIHRoZXJlIGlzIG5vIHJlcSwgc28ganVzdCBjbGVhbiB1cC4gKi8K
LQlpZiAoc3RhdGUtPmNhbmNlbGxlZCA9PSB0cnVlKSB7Ci0JCVRBTExPQ19GUkVFKHN0YXRlKTsK
KwlyZXQgPSBwdGhyZWFkcG9vbF90ZXZlbnRfam9iX3JlY3Yoc3VicmVxKTsKKwlUQUxMT0NfRlJF
RShzdWJyZXEpOworCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfRU5EKHN0YXRlLT5wcm9maWxlX2J5
dGVzKTsKKwl0YWxsb2Nfc2V0X2Rlc3RydWN0b3Ioc3RhdGUsIE5VTEwpOworCWlmICh0ZXZlbnRf
cmVxX2Vycm9yKHJlcSwgcmV0KSkgewogCQlyZXR1cm47CiAJfQogCi0JcmVxID0gc3RhdGUtPnJl
cTsKKwl0ZXZlbnRfcmVxX2RvbmUocmVxKTsKK30KKworc3RhdGljIHNzaXplX3QgdmZzX2dsdXN0
ZXJfcHJlYWRfcmVjdihzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxLAorCQkJCSAgICAgIHN0cnVjdCB2
ZnNfYWlvX3N0YXRlICp2ZnNfYWlvX3N0YXRlKQoreworCXN0cnVjdCB2ZnNfZ2x1c3Rlcl9wcmVh
ZF9zdGF0ZSAqc3RhdGUgPSB0ZXZlbnRfcmVxX2RhdGEoCisJCXJlcSwgc3RydWN0IHZmc19nbHVz
dGVyX3ByZWFkX3N0YXRlKTsKIAotCWlmIChyZXEpIHsKLQkJdGV2ZW50X3JlcV9kb25lKHJlcSk7
CisJaWYgKHRldmVudF9yZXFfaXNfdW5peF9lcnJvcihyZXEsICZ2ZnNfYWlvX3N0YXRlLT5lcnJv
cikpIHsKKwkJcmV0dXJuIC0xOwogCX0KLQlyZXR1cm47CisKKwkqdmZzX2Fpb19zdGF0ZSA9IHN0
YXRlLT52ZnNfYWlvX3N0YXRlOworCXJldHVybiBzdGF0ZS0+cmV0OwogfQogCi1zdGF0aWMgYm9v
bCBpbml0X2dsdXN0ZXJfYWlvKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlKQorc3Rh
dGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfZ2x1c3Rlcl9wcmVhZF9zZW5kKHN0cnVjdCB2ZnNf
aGFuZGxlX3N0cnVjdAorCQkJCQkJICAqaGFuZGxlLCBUQUxMT0NfQ1RYICptZW1fY3R4LAorCQkJ
CQkJICBzdHJ1Y3QgdGV2ZW50X2NvbnRleHQgKmV2LAorCQkJCQkJICBmaWxlc19zdHJ1Y3QgKmZz
cCwKKwkJCQkJCSAgdm9pZCAqZGF0YSwgc2l6ZV90IG4sCisJCQkJCQkgIG9mZl90IG9mZnNldCkK
IHsKLQlpbnQgZmRzWzJdOwotCWludCByZXQgPSAtMTsKKwlzdHJ1Y3QgdmZzX2dsdXN0ZXJfcHJl
YWRfc3RhdGUgKnN0YXRlOworCXN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsICpzdWJyZXE7CiAKLQlp
ZiAocmVhZF9mZCAhPSAtMSkgewotCQkvKgotCQkgKiBBbHJlYWR5IGluaXRpYWxpemVkLgotCQkg
Ki8KLQkJcmV0dXJuIHRydWU7CisJZ2xmc19mZF90ICpnbGZkID0gdmZzX2dsdXN0ZXJfZmV0Y2hf
Z2xmZChoYW5kbGUsIGZzcCk7CisJaWYgKGdsZmQgPT0gTlVMTCkgeworCQlEQkdfRVJSKCJGYWls
ZWQgdG8gZmV0Y2ggZ2x1c3RlciBmZFxuIik7CisJCXJldHVybiBOVUxMOwogCX0KIAotCXJldCA9
IHBpcGUoZmRzKTsKLQlpZiAocmV0ID09IC0xKSB7Ci0JCWdvdG8gZmFpbDsKKwlyZXEgPSB0ZXZl
bnRfcmVxX2NyZWF0ZShtZW1fY3R4LCAmc3RhdGUsIHN0cnVjdCB2ZnNfZ2x1c3Rlcl9wcmVhZF9z
dGF0ZSk7CisJaWYgKHJlcSA9PSBOVUxMKSB7CisJCXJldHVybiBOVUxMOwogCX0KIAotCXJlYWRf
ZmQgPSBmZHNbMF07Ci0Jd3JpdGVfZmQgPSBmZHNbMV07CisJc3RhdGUtPnJldCA9IC0xOworCXN0
YXRlLT5mZCA9IGdsZmQ7CisJc3RhdGUtPmJ1ZiA9IGRhdGE7CisJc3RhdGUtPmNvdW50ID0gbjsK
KwlzdGF0ZS0+b2Zmc2V0ID0gb2Zmc2V0OwogCi0JYWlvX3JlYWRfZXZlbnQgPSB0ZXZlbnRfYWRk
X2ZkKGhhbmRsZS0+Y29ubi0+c2Nvbm4tPmV2X2N0eCwKLQkJCQkJTlVMTCwKLQkJCQkJcmVhZF9m
ZCwKLQkJCQkJVEVWRU5UX0ZEX1JFQUQsCi0JCQkJCWFpb190ZXZlbnRfZmRfZG9uZSwKLQkJCQkJ
TlVMTCk7Ci0JaWYgKGFpb19yZWFkX2V2ZW50ID09IE5VTEwpIHsKLQkJZ290byBmYWlsOwotCX0K
KwlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NUQVJUKHN5c2NhbGxfYXN5c19wcmVhZCwgcHJvZmls
ZV9wLAorCQkJCSAgICAgc3RhdGUtPnByb2ZpbGVfYnl0ZXMsIG4pOworCVNNQlBST0ZJTEVfQllU
RVNfQVNZTkNfU0VUX0lETEUoc3RhdGUtPnByb2ZpbGVfYnl0ZXMpOwogCi0JcmV0dXJuIHRydWU7
Ci1mYWlsOgotCVRBTExPQ19GUkVFKGFpb19yZWFkX2V2ZW50KTsKLQlpZiAocmVhZF9mZCAhPSAt
MSkgewotCQljbG9zZShyZWFkX2ZkKTsKLQkJY2xvc2Uod3JpdGVfZmQpOwotCQlyZWFkX2ZkID0g
LTE7Ci0JCXdyaXRlX2ZkID0gLTE7CisJc3VicmVxID0gcHRocmVhZHBvb2xfdGV2ZW50X2pvYl9z
ZW5kKAorCQlzdGF0ZSwgZXYsIGhhbmRsZS0+Y29ubi0+c2Nvbm4tPnBvb2wsCisJCXZmc19nbHVz
dGVyX3ByZWFkX2RvLCBzdGF0ZSk7CisJaWYgKHRldmVudF9yZXFfbm9tZW0oc3VicmVxLCByZXEp
KSB7CisJCXJldHVybiB0ZXZlbnRfcmVxX3Bvc3QocmVxLCBldik7CiAJfQotCXJldHVybiBmYWxz
ZTsKKwl0ZXZlbnRfcmVxX3NldF9jYWxsYmFjayhzdWJyZXEsIHZmc19nbHVzdGVyX3ByZWFkX2Rv
bmUsIHJlcSk7CisKKwl0YWxsb2Nfc2V0X2Rlc3RydWN0b3Ioc3RhdGUsIHZmc19nbHVzdGVyX3By
ZWFkX3N0YXRlX2Rlc3RydWN0b3IpOworCisJcmV0dXJuIHJlcTsKIH0KIAotc3RhdGljIHN0cnVj
dCBnbHVzdGVyZnNfYWlvX3N0YXRlICphaW9fc3RhdGVfY3JlYXRlKFRBTExPQ19DVFggKm1lbV9j
dHgpCitzdHJ1Y3QgdmZzX2dsdXN0ZXJfcHdyaXRlX3N0YXRlIHsKKwlzc2l6ZV90IHJldDsKKwln
bGZzX2ZkX3QgKmZkOworCWNvbnN0IHZvaWQgKmJ1ZjsKKwlzaXplX3QgY291bnQ7CisJb2ZmX3Qg
b2Zmc2V0OworCisJc3RydWN0IHZmc19haW9fc3RhdGUgdmZzX2Fpb19zdGF0ZTsKKwlTTUJQUk9G
SUxFX0JZVEVTX0FTWU5DX1NUQVRFKHByb2ZpbGVfYnl0ZXMpOworfTsKKworc3RhdGljIHZvaWQg
dmZzX2dsdXN0ZXJfcHdyaXRlX2RvKHZvaWQgKnByaXZhdGVfZGF0YSkKIHsKLQlzdHJ1Y3QgdGV2
ZW50X3JlcSAqcmVxID0gTlVMTDsKLQlzdHJ1Y3QgZ2x1c3RlcmZzX2Fpb19zdGF0ZSAqc3RhdGUg
PSBOVUxMOwotCXN0cnVjdCBnbHVzdGVyZnNfYWlvX3dyYXBwZXIgKndyYXBwZXIgPSBOVUxMOwor
CXN0cnVjdCB2ZnNfZ2x1c3Rlcl9wd3JpdGVfc3RhdGUgKnN0YXRlID0gdGFsbG9jX2dldF90eXBl
X2Fib3J0KAorCQlwcml2YXRlX2RhdGEsIHN0cnVjdCB2ZnNfZ2x1c3Rlcl9wd3JpdGVfc3RhdGUp
OworCXN0cnVjdCB0aW1lc3BlYyBzdGFydF90aW1lOworCXN0cnVjdCB0aW1lc3BlYyBlbmRfdGlt
ZTsKIAotCXJlcSA9IHRldmVudF9yZXFfY3JlYXRlKG1lbV9jdHgsICZ3cmFwcGVyLCBzdHJ1Y3Qg
Z2x1c3RlcmZzX2Fpb193cmFwcGVyKTsKKwlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NFVF9CVVNZ
KHN0YXRlLT5wcm9maWxlX2J5dGVzKTsKIAotCWlmIChyZXEgPT0gTlVMTCkgewotCQlyZXR1cm4g
TlVMTDsKLQl9CisJUFJPRklMRV9USU1FU1RBTVAoJnN0YXJ0X3RpbWUpOwogCi0Jc3RhdGUgPSB0
YWxsb2NfemVybyhOVUxMLCBzdHJ1Y3QgZ2x1c3RlcmZzX2Fpb19zdGF0ZSk7CisJZG8geworI2lm
ZGVmIEhBVkVfR0ZBUElfVkVSXzdfNgorCQlzdGF0ZS0+cmV0ID0gZ2xmc19wd3JpdGUoc3RhdGUt
PmZkLCBzdGF0ZS0+YnVmLCBzdGF0ZS0+Y291bnQsCisJCQkJCSBzdGF0ZS0+b2Zmc2V0LCAwLCBO
VUxMLCBOVUxMKTsKKyNlbHNlCisJCXN0YXRlLT5yZXQgPSBnbGZzX3B3cml0ZShzdGF0ZS0+ZmQs
IHN0YXRlLT5idWYsIHN0YXRlLT5jb3VudCwKKwkJCQkJIHN0YXRlLT5vZmZzZXQsIDApOworI2Vu
ZGlmCisJfSB3aGlsZSAoKHN0YXRlLT5yZXQgPT0gLTEpICYmIChlcnJubyA9PSBFSU5UUikpOwog
Ci0JaWYgKHN0YXRlID09IE5VTEwpIHsKLQkJVEFMTE9DX0ZSRUUocmVxKTsKLQkJcmV0dXJuIE5V
TEw7CisJaWYgKHN0YXRlLT5yZXQgPT0gLTEpIHsKKwkJc3RhdGUtPnZmc19haW9fc3RhdGUuZXJy
b3IgPSBlcnJubzsKIAl9CiAKLQl0YWxsb2Nfc2V0X2Rlc3RydWN0b3Iod3JhcHBlciwgYWlvX3dy
YXBwZXJfZGVzdHJ1Y3Rvcik7Ci0Jc3RhdGUtPmNhbmNlbGxlZCA9IGZhbHNlOwotCXN0YXRlLT5y
ZXEgPSByZXE7CisJUFJPRklMRV9USU1FU1RBTVAoJmVuZF90aW1lKTsKIAotCXdyYXBwZXItPnN0
YXRlID0gc3RhdGU7CisJc3RhdGUtPnZmc19haW9fc3RhdGUuZHVyYXRpb24gPSBuc2VjX3RpbWVf
ZGlmZigmZW5kX3RpbWUsICZzdGFydF90aW1lKTsKIAotCXJldHVybiBzdGF0ZTsKKwlTTUJQUk9G
SUxFX0JZVEVTX0FTWU5DX1NFVF9JRExFKHN0YXRlLT5wcm9maWxlX2J5dGVzKTsKIH0KIAotc3Rh
dGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfZ2x1c3Rlcl9wcmVhZF9zZW5kKHN0cnVjdCB2ZnNf
aGFuZGxlX3N0cnVjdAotCQkJCQkJICAqaGFuZGxlLCBUQUxMT0NfQ1RYICptZW1fY3R4LAotCQkJ
CQkJICBzdHJ1Y3QgdGV2ZW50X2NvbnRleHQgKmV2LAotCQkJCQkJICBmaWxlc19zdHJ1Y3QgKmZz
cCwKLQkJCQkJCSAgdm9pZCAqZGF0YSwgc2l6ZV90IG4sCi0JCQkJCQkgIG9mZl90IG9mZnNldCkK
K3N0YXRpYyBpbnQgdmZzX3B3cml0ZV9zdGF0ZV9kZXN0cnVjdG9yKHN0cnVjdCB2ZnNfZ2x1c3Rl
cl9wd3JpdGVfc3RhdGUgKnN0YXRlKQogewotCXN0cnVjdCBnbHVzdGVyZnNfYWlvX3N0YXRlICpz
dGF0ZSA9IE5VTEw7Ci0Jc3RydWN0IHRldmVudF9yZXEgKnJlcSA9IE5VTEw7Ci0JaW50IHJldCA9
IDA7Ci0JZ2xmc19mZF90ICpnbGZkID0gdmZzX2dsdXN0ZXJfZmV0Y2hfZ2xmZChoYW5kbGUsIGZz
cCk7Ci0KLQlpZiAoZ2xmZCA9PSBOVUxMKSB7Ci0JCURCR19FUlIoIkZhaWxlZCB0byBmZXRjaCBn
bHVzdGVyIGZkXG4iKTsKLQkJcmV0dXJuIE5VTEw7Ci0JfQorCXJldHVybiAtMTsKK30KIAotCXN0
YXRlID0gYWlvX3N0YXRlX2NyZWF0ZShtZW1fY3R4KTsKK3N0YXRpYyB2b2lkIHZmc19wd3JpdGVf
ZG9uZShzdHJ1Y3QgdGV2ZW50X3JlcSAqc3VicmVxKQoreworCXN0cnVjdCB0ZXZlbnRfcmVxICpy
ZXEgPSB0ZXZlbnRfcmVxX2NhbGxiYWNrX2RhdGEoCisJCXN1YnJlcSwgc3RydWN0IHRldmVudF9y
ZXEpOworCXN0cnVjdCB2ZnNfZ2x1c3Rlcl9wd3JpdGVfc3RhdGUgKnN0YXRlID0gdGV2ZW50X3Jl
cV9kYXRhKAorCQlyZXEsIHN0cnVjdCB2ZnNfZ2x1c3Rlcl9wd3JpdGVfc3RhdGUpOworCWludCBy
ZXQ7CiAKLQlpZiAoc3RhdGUgPT0gTlVMTCkgewotCQlyZXR1cm4gTlVMTDsKKwlyZXQgPSBwdGhy
ZWFkcG9vbF90ZXZlbnRfam9iX3JlY3Yoc3VicmVxKTsKKwlUQUxMT0NfRlJFRShzdWJyZXEpOwor
CVNNQlBST0ZJTEVfQllURVNfQVNZTkNfRU5EKHN0YXRlLT5wcm9maWxlX2J5dGVzKTsKKwl0YWxs
b2Nfc2V0X2Rlc3RydWN0b3Ioc3RhdGUsIE5VTEwpOworCWlmICh0ZXZlbnRfcmVxX2Vycm9yKHJl
cSwgcmV0KSkgeworCQlyZXR1cm47CiAJfQogCi0JcmVxID0gc3RhdGUtPnJlcTsKLQotCWlmICgh
aW5pdF9nbHVzdGVyX2FpbyhoYW5kbGUpKSB7Ci0JCXRldmVudF9yZXFfZXJyb3IocmVxLCBFSU8p
OwotCQlyZXR1cm4gdGV2ZW50X3JlcV9wb3N0KHJlcSwgZXYpOwotCX0KKwl0ZXZlbnRfcmVxX2Rv
bmUocmVxKTsKK30KIAotCS8qCi0JICogYWlvX2dsdXN0ZXJmc19kb25lIGFuZCBhaW9fdGV2ZW50
X2ZkX2RvbmUoKQotCSAqIHVzZSB0aGUgcmF3IHRldmVudCBjb250ZXh0LiBXZSBuZWVkIHRvIHVz
ZQotCSAqIHRldmVudF9yZXFfZGVmZXJfY2FsbGJhY2soKSBpbiBvcmRlciB0bwotCSAqIHVzZSB0
aGUgZXZlbnQgY29udGV4dCB3ZSdyZSBzdGFydGVkIHdpdGguCi0JICovCi0JdGV2ZW50X3JlcV9k
ZWZlcl9jYWxsYmFjayhyZXEsIGV2KTsKK3N0YXRpYyBzc2l6ZV90IHZmc19nbHVzdGVyX3B3cml0
ZV9yZWN2KHN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsCisJCQkJICAgICAgIHN0cnVjdCB2ZnNfYWlv
X3N0YXRlICp2ZnNfYWlvX3N0YXRlKQoreworCXN0cnVjdCB2ZnNfZ2x1c3Rlcl9wd3JpdGVfc3Rh
dGUgKnN0YXRlID0gdGV2ZW50X3JlcV9kYXRhKAorCQlyZXEsIHN0cnVjdCB2ZnNfZ2x1c3Rlcl9w
d3JpdGVfc3RhdGUpOwogCi0JU01CUFJPRklMRV9CWVRFU19BU1lOQ19TVEFSVChzeXNjYWxsX2Fz
eXNfcHJlYWQsIHByb2ZpbGVfcCwKLQkJCQkgICAgIHN0YXRlLT5wcm9maWxlX2J5dGVzLCBuKTsK
LQlQUk9GSUxFX1RJTUVTVEFNUCgmc3RhdGUtPnN0YXJ0KTsKLQlyZXQgPSBnbGZzX3ByZWFkX2Fz
eW5jKGdsZmQsIGRhdGEsIG4sIG9mZnNldCwgMCwgYWlvX2dsdXN0ZXJmc19kb25lLAotCQkJCXN0
YXRlKTsKLQlpZiAocmV0IDwgMCkgewotCQl0ZXZlbnRfcmVxX2Vycm9yKHJlcSwgLXJldCk7Ci0J
CXJldHVybiB0ZXZlbnRfcmVxX3Bvc3QocmVxLCBldik7CisJaWYgKHRldmVudF9yZXFfaXNfdW5p
eF9lcnJvcihyZXEsICZ2ZnNfYWlvX3N0YXRlLT5lcnJvcikpIHsKKwkJcmV0dXJuIC0xOwogCX0K
IAotCXJldHVybiByZXE7CisJKnZmc19haW9fc3RhdGUgPSBzdGF0ZS0+dmZzX2Fpb19zdGF0ZTsK
KworCXJldHVybiBzdGF0ZS0+cmV0OwogfQogCiBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZm
c19nbHVzdGVyX3B3cml0ZV9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdApAQCAtOTYxLDc4
ICs5MjQsNDEgQEAgc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfZ2x1c3Rlcl9wd3JpdGVf
c2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QKIAkJCQkJCSAgY29uc3Qgdm9pZCAqZGF0YSwg
c2l6ZV90IG4sCiAJCQkJCQkgIG9mZl90IG9mZnNldCkKIHsKLQlzdHJ1Y3QgZ2x1c3RlcmZzX2Fp
b19zdGF0ZSAqc3RhdGUgPSBOVUxMOwotCXN0cnVjdCB0ZXZlbnRfcmVxICpyZXEgPSBOVUxMOwot
CWludCByZXQgPSAwOwotCWdsZnNfZmRfdCAqZ2xmZCA9IHZmc19nbHVzdGVyX2ZldGNoX2dsZmQo
aGFuZGxlLCBmc3ApOworCXN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsICpzdWJyZXE7CisJc3RydWN0
IHZmc19nbHVzdGVyX3B3cml0ZV9zdGF0ZSAqc3RhdGU7CiAKKwlnbGZzX2ZkX3QgKmdsZmQgPSB2
ZnNfZ2x1c3Rlcl9mZXRjaF9nbGZkKGhhbmRsZSwgZnNwKTsKIAlpZiAoZ2xmZCA9PSBOVUxMKSB7
CiAJCURCR19FUlIoIkZhaWxlZCB0byBmZXRjaCBnbHVzdGVyIGZkXG4iKTsKIAkJcmV0dXJuIE5V
TEw7CiAJfQogCi0Jc3RhdGUgPSBhaW9fc3RhdGVfY3JlYXRlKG1lbV9jdHgpOwotCi0JaWYgKHN0
YXRlID09IE5VTEwpIHsKKwlyZXEgPSB0ZXZlbnRfcmVxX2NyZWF0ZShtZW1fY3R4LCAmc3RhdGUs
IHN0cnVjdCB2ZnNfZ2x1c3Rlcl9wd3JpdGVfc3RhdGUpOworCWlmIChyZXEgPT0gTlVMTCkgewog
CQlyZXR1cm4gTlVMTDsKIAl9CiAKLQlyZXEgPSBzdGF0ZS0+cmVxOwotCi0JaWYgKCFpbml0X2ds
dXN0ZXJfYWlvKGhhbmRsZSkpIHsKLQkJdGV2ZW50X3JlcV9lcnJvcihyZXEsIEVJTyk7Ci0JCXJl
dHVybiB0ZXZlbnRfcmVxX3Bvc3QocmVxLCBldik7Ci0JfQotCi0JLyoKLQkgKiBhaW9fZ2x1c3Rl
cmZzX2RvbmUgYW5kIGFpb190ZXZlbnRfZmRfZG9uZSgpCi0JICogdXNlIHRoZSByYXcgdGV2ZW50
IGNvbnRleHQuIFdlIG5lZWQgdG8gdXNlCi0JICogdGV2ZW50X3JlcV9kZWZlcl9jYWxsYmFjaygp
IGluIG9yZGVyIHRvCi0JICogdXNlIHRoZSBldmVudCBjb250ZXh0IHdlJ3JlIHN0YXJ0ZWQgd2l0
aC4KLQkgKi8KLQl0ZXZlbnRfcmVxX2RlZmVyX2NhbGxiYWNrKHJlcSwgZXYpOworCXN0YXRlLT5y
ZXQgPSAtMTsKKwlzdGF0ZS0+ZmQgPSBnbGZkOworCXN0YXRlLT5idWYgPSBkYXRhOworCXN0YXRl
LT5jb3VudCA9IG47CisJc3RhdGUtPm9mZnNldCA9IG9mZnNldDsKIAogCVNNQlBST0ZJTEVfQllU
RVNfQVNZTkNfU1RBUlQoc3lzY2FsbF9hc3lzX3B3cml0ZSwgcHJvZmlsZV9wLAogCQkJCSAgICAg
c3RhdGUtPnByb2ZpbGVfYnl0ZXMsIG4pOwotCVBST0ZJTEVfVElNRVNUQU1QKCZzdGF0ZS0+c3Rh
cnQpOwotCXJldCA9IGdsZnNfcHdyaXRlX2FzeW5jKGdsZmQsIGRhdGEsIG4sIG9mZnNldCwgMCwg
YWlvX2dsdXN0ZXJmc19kb25lLAotCQkJCXN0YXRlKTsKLQlpZiAocmV0IDwgMCkgewotCQl0ZXZl
bnRfcmVxX2Vycm9yKHJlcSwgLXJldCk7Ci0JCXJldHVybiB0ZXZlbnRfcmVxX3Bvc3QocmVxLCBl
dik7Ci0JfQotCi0JcmV0dXJuIHJlcTsKLX0KLQotc3RhdGljIHNzaXplX3QgdmZzX2dsdXN0ZXJf
cmVjdihzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxLAotCQkJCXN0cnVjdCB2ZnNfYWlvX3N0YXRlICp2
ZnNfYWlvX3N0YXRlKQotewotCXN0cnVjdCBnbHVzdGVyZnNfYWlvX3dyYXBwZXIgKndyYXBwZXIg
PSBOVUxMOwotCWludCByZXQgPSAwOworCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfU0VUX0lETEUo
c3RhdGUtPnByb2ZpbGVfYnl0ZXMpOwogCi0Jd3JhcHBlciA9IHRldmVudF9yZXFfZGF0YShyZXEs
IHN0cnVjdCBnbHVzdGVyZnNfYWlvX3dyYXBwZXIpOwotCi0JaWYgKHdyYXBwZXIgPT0gTlVMTCkg
ewotCQlyZXR1cm4gLTE7Ci0JfQotCi0JaWYgKHdyYXBwZXItPnN0YXRlID09IE5VTEwpIHsKLQkJ
cmV0dXJuIC0xOwotCX0KLQotCWlmICh0ZXZlbnRfcmVxX2lzX3VuaXhfZXJyb3IocmVxLCAmdmZz
X2Fpb19zdGF0ZS0+ZXJyb3IpKSB7Ci0JCXJldHVybiAtMTsKKwlzdWJyZXEgPSBwdGhyZWFkcG9v
bF90ZXZlbnRfam9iX3NlbmQoCisJCXN0YXRlLCBldiwgaGFuZGxlLT5jb25uLT5zY29ubi0+cG9v
bCwKKwkJdmZzX2dsdXN0ZXJfcHdyaXRlX2RvLCBzdGF0ZSk7CisJaWYgKHRldmVudF9yZXFfbm9t
ZW0oc3VicmVxLCByZXEpKSB7CisJCXJldHVybiB0ZXZlbnRfcmVxX3Bvc3QocmVxLCBldik7CiAJ
fQorCXRldmVudF9yZXFfc2V0X2NhbGxiYWNrKHN1YnJlcSwgdmZzX3B3cml0ZV9kb25lLCByZXEp
OwogCi0JKnZmc19haW9fc3RhdGUgPSB3cmFwcGVyLT5zdGF0ZS0+dmZzX2Fpb19zdGF0ZTsKLQly
ZXQgPSB3cmFwcGVyLT5zdGF0ZS0+cmV0OwotCi0JLyogQ2xlYW4gdXAgdGhlIHN0YXRlLCBpdCBp
cyBpbiBhIE5VTEwgY29udGV4dC4gKi8KKwl0YWxsb2Nfc2V0X2Rlc3RydWN0b3Ioc3RhdGUsIHZm
c19wd3JpdGVfc3RhdGVfZGVzdHJ1Y3Rvcik7CiAKLQlUQUxMT0NfRlJFRSh3cmFwcGVyLT5zdGF0
ZSk7Ci0KLQlyZXR1cm4gcmV0OworCXJldHVybiByZXE7CiB9CiAKIHN0YXRpYyBzc2l6ZV90IHZm
c19nbHVzdGVyX3B3cml0ZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKQEAgLTEx
MTUsNjIgKzEwNDEsMTIxIEBAIHN0YXRpYyBpbnQgdmZzX2dsdXN0ZXJfcmVuYW1lYXQoc3RydWN0
IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJcmV0dXJuIHJldDsKIH0KIAorc3RydWN0IHZm
c19nbHVzdGVyX2ZzeW5jX3N0YXRlIHsKKwlzc2l6ZV90IHJldDsKKwlnbGZzX2ZkX3QgKmZkOwor
CisJc3RydWN0IHZmc19haW9fc3RhdGUgdmZzX2Fpb19zdGF0ZTsKKwlTTUJQUk9GSUxFX0JZVEVT
X0FTWU5DX1NUQVRFKHByb2ZpbGVfYnl0ZXMpOworfTsKKworc3RhdGljIHZvaWQgdmZzX2ZzeW5j
X2RvKHZvaWQgKnByaXZhdGVfZGF0YSkKK3sKKwlzdHJ1Y3QgdmZzX2dsdXN0ZXJfZnN5bmNfc3Rh
dGUgKnN0YXRlID0gdGFsbG9jX2dldF90eXBlX2Fib3J0KAorCQlwcml2YXRlX2RhdGEsIHN0cnVj
dCB2ZnNfZ2x1c3Rlcl9mc3luY19zdGF0ZSk7CisJc3RydWN0IHRpbWVzcGVjIHN0YXJ0X3RpbWU7
CisJc3RydWN0IHRpbWVzcGVjIGVuZF90aW1lOworCisJU01CUFJPRklMRV9CWVRFU19BU1lOQ19T
RVRfQlVTWShzdGF0ZS0+cHJvZmlsZV9ieXRlcyk7CisKKwlQUk9GSUxFX1RJTUVTVEFNUCgmc3Rh
cnRfdGltZSk7CisKKwlkbyB7CisjaWZkZWYgSEFWRV9HRkFQSV9WRVJfN182CisJCXN0YXRlLT5y
ZXQgPSBnbGZzX2ZzeW5jKHN0YXRlLT5mZCwgTlVMTCwgTlVMTCk7CisjZWxzZQorCQlzdGF0ZS0+
cmV0ID0gZ2xmc19mc3luYyhzdGF0ZS0+ZmQpOworI2VuZGlmCisJfSB3aGlsZSAoKHN0YXRlLT5y
ZXQgPT0gLTEpICYmIChlcnJubyA9PSBFSU5UUikpOworCisJaWYgKHN0YXRlLT5yZXQgPT0gLTEp
IHsKKwkJc3RhdGUtPnZmc19haW9fc3RhdGUuZXJyb3IgPSBlcnJubzsKKwl9CisKKwlQUk9GSUxF
X1RJTUVTVEFNUCgmZW5kX3RpbWUpOworCisJc3RhdGUtPnZmc19haW9fc3RhdGUuZHVyYXRpb24g
PSBuc2VjX3RpbWVfZGlmZigmZW5kX3RpbWUsICZzdGFydF90aW1lKTsKKworCVNNQlBST0ZJTEVf
QllURVNfQVNZTkNfU0VUX0lETEUoc3RhdGUtPnByb2ZpbGVfYnl0ZXMpOworfQorCitzdGF0aWMg
aW50IHZmc19mc3luY19zdGF0ZV9kZXN0cnVjdG9yKHN0cnVjdCB2ZnNfZ2x1c3Rlcl9mc3luY19z
dGF0ZSAqc3RhdGUpCit7CisJcmV0dXJuIC0xOworfQorCitzdGF0aWMgdm9pZCB2ZnNfZnN5bmNf
ZG9uZShzdHJ1Y3QgdGV2ZW50X3JlcSAqc3VicmVxKQoreworCXN0cnVjdCB0ZXZlbnRfcmVxICpy
ZXEgPSB0ZXZlbnRfcmVxX2NhbGxiYWNrX2RhdGEoCisJCXN1YnJlcSwgc3RydWN0IHRldmVudF9y
ZXEpOworCXN0cnVjdCB2ZnNfZ2x1c3Rlcl9mc3luY19zdGF0ZSAqc3RhdGUgPSB0ZXZlbnRfcmVx
X2RhdGEoCisJCXJlcSwgc3RydWN0IHZmc19nbHVzdGVyX2ZzeW5jX3N0YXRlKTsKKwlpbnQgcmV0
OworCisJcmV0ID0gcHRocmVhZHBvb2xfdGV2ZW50X2pvYl9yZWN2KHN1YnJlcSk7CisJVEFMTE9D
X0ZSRUUoc3VicmVxKTsKKwlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX0VORChzdGF0ZS0+cHJvZmls
ZV9ieXRlcyk7CisJdGFsbG9jX3NldF9kZXN0cnVjdG9yKHN0YXRlLCBOVUxMKTsKKworCWlmICh0
ZXZlbnRfcmVxX2Vycm9yKHJlcSwgcmV0KSkgeworCQlyZXR1cm47CisJfQorCisJdGV2ZW50X3Jl
cV9kb25lKHJlcSk7Cit9CisKK3N0YXRpYyBpbnQgdmZzX2dsdXN0ZXJfZnN5bmNfcmVjdihzdHJ1
Y3QgdGV2ZW50X3JlcSAqcmVxLAorCQkJCSAgc3RydWN0IHZmc19haW9fc3RhdGUgKnZmc19haW9f
c3RhdGUpCit7CisJc3RydWN0IHZmc19nbHVzdGVyX2ZzeW5jX3N0YXRlICpzdGF0ZSA9IHRldmVu
dF9yZXFfZGF0YSgKKwkJcmVxLCBzdHJ1Y3QgdmZzX2dsdXN0ZXJfZnN5bmNfc3RhdGUpOworCisJ
aWYgKHRldmVudF9yZXFfaXNfdW5peF9lcnJvcihyZXEsICZ2ZnNfYWlvX3N0YXRlLT5lcnJvcikp
IHsKKwkJcmV0dXJuIC0xOworCX0KKworCSp2ZnNfYWlvX3N0YXRlID0gc3RhdGUtPnZmc19haW9f
c3RhdGU7CisJcmV0dXJuIHN0YXRlLT5yZXQ7Cit9CisKIHN0YXRpYyBzdHJ1Y3QgdGV2ZW50X3Jl
cSAqdmZzX2dsdXN0ZXJfZnN5bmNfc2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QKIAkJCQkJ
CSAqaGFuZGxlLCBUQUxMT0NfQ1RYICptZW1fY3R4LAogCQkJCQkJIHN0cnVjdCB0ZXZlbnRfY29u
dGV4dCAqZXYsCiAJCQkJCQkgZmlsZXNfc3RydWN0ICpmc3ApCiB7Ci0Jc3RydWN0IHRldmVudF9y
ZXEgKnJlcSA9IE5VTEw7Ci0Jc3RydWN0IGdsdXN0ZXJmc19haW9fc3RhdGUgKnN0YXRlID0gTlVM
TDsKLQlpbnQgcmV0ID0gMDsKLQlnbGZzX2ZkX3QgKmdsZmQgPSB2ZnNfZ2x1c3Rlcl9mZXRjaF9n
bGZkKGhhbmRsZSwgZnNwKTsKKwlzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxLCAqc3VicmVxOworCXN0
cnVjdCB2ZnNfZ2x1c3Rlcl9mc3luY19zdGF0ZSAqc3RhdGU7CiAKKwlnbGZzX2ZkX3QgKmdsZmQg
PSB2ZnNfZ2x1c3Rlcl9mZXRjaF9nbGZkKGhhbmRsZSwgZnNwKTsKIAlpZiAoZ2xmZCA9PSBOVUxM
KSB7CiAJCURCR19FUlIoIkZhaWxlZCB0byBmZXRjaCBnbHVzdGVyIGZkXG4iKTsKIAkJcmV0dXJu
IE5VTEw7CiAJfQogCi0Jc3RhdGUgPSBhaW9fc3RhdGVfY3JlYXRlKG1lbV9jdHgpOwotCi0JaWYg
KHN0YXRlID09IE5VTEwpIHsKKwlyZXEgPSB0ZXZlbnRfcmVxX2NyZWF0ZShtZW1fY3R4LCAmc3Rh
dGUsIHN0cnVjdCB2ZnNfZ2x1c3Rlcl9mc3luY19zdGF0ZSk7CisJaWYgKHJlcSA9PSBOVUxMKSB7
CiAJCXJldHVybiBOVUxMOwogCX0KIAotCXJlcSA9IHN0YXRlLT5yZXE7CisJc3RhdGUtPnJldCA9
IC0xOworCXN0YXRlLT5mZCA9IGdsZmQ7CisKKwlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NUQVJU
KHN5c2NhbGxfYXN5c19mc3luYywgcHJvZmlsZV9wLAorICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIHN0YXRlLT5wcm9maWxlX2J5dGVzLCAwKTsKKwlTTUJQUk9GSUxFX0JZVEVT
X0FTWU5DX1NFVF9JRExFKHN0YXRlLT5wcm9maWxlX2J5dGVzKTsKIAotCWlmICghaW5pdF9nbHVz
dGVyX2FpbyhoYW5kbGUpKSB7Ci0JCXRldmVudF9yZXFfZXJyb3IocmVxLCBFSU8pOworCXN1YnJl
cSA9IHB0aHJlYWRwb29sX3RldmVudF9qb2Jfc2VuZCgKKwkJc3RhdGUsIGV2LCBoYW5kbGUtPmNv
bm4tPnNjb25uLT5wb29sLCB2ZnNfZnN5bmNfZG8sIHN0YXRlKTsKKwlpZiAodGV2ZW50X3JlcV9u
b21lbShzdWJyZXEsIHJlcSkpIHsKIAkJcmV0dXJuIHRldmVudF9yZXFfcG9zdChyZXEsIGV2KTsK
IAl9CisJdGV2ZW50X3JlcV9zZXRfY2FsbGJhY2soc3VicmVxLCB2ZnNfZnN5bmNfZG9uZSwgcmVx
KTsKIAotCS8qCi0JICogYWlvX2dsdXN0ZXJmc19kb25lIGFuZCBhaW9fdGV2ZW50X2ZkX2RvbmUo
KQotCSAqIHVzZSB0aGUgcmF3IHRldmVudCBjb250ZXh0LiBXZSBuZWVkIHRvIHVzZQotCSAqIHRl
dmVudF9yZXFfZGVmZXJfY2FsbGJhY2soKSBpbiBvcmRlciB0bwotCSAqIHVzZSB0aGUgZXZlbnQg
Y29udGV4dCB3ZSdyZSBzdGFydGVkIHdpdGguCi0JICovCi0JdGV2ZW50X3JlcV9kZWZlcl9jYWxs
YmFjayhyZXEsIGV2KTsKKwl0YWxsb2Nfc2V0X2Rlc3RydWN0b3Ioc3RhdGUsIHZmc19mc3luY19z
dGF0ZV9kZXN0cnVjdG9yKTsKIAotCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfU1RBUlQoc3lzY2Fs
bF9hc3lzX2ZzeW5jLCBwcm9maWxlX3AsCi0JCQkJICAgICBzdGF0ZS0+cHJvZmlsZV9ieXRlcywg
MCk7Ci0JUFJPRklMRV9USU1FU1RBTVAoJnN0YXRlLT5zdGFydCk7Ci0JcmV0ID0gZ2xmc19mc3lu
Y19hc3luYyhnbGZkLCBhaW9fZ2x1c3RlcmZzX2RvbmUsIHN0YXRlKTsKLQlpZiAocmV0IDwgMCkg
ewotCQl0ZXZlbnRfcmVxX2Vycm9yKHJlcSwgLXJldCk7Ci0JCXJldHVybiB0ZXZlbnRfcmVxX3Bv
c3QocmVxLCBldik7Ci0JfQogCXJldHVybiByZXE7CiB9CiAKLXN0YXRpYyBpbnQgdmZzX2dsdXN0
ZXJfZnN5bmNfcmVjdihzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxLAotCQkJCSAgc3RydWN0IHZmc19h
aW9fc3RhdGUgKnZmc19haW9fc3RhdGUpCi17Ci0JLyoKLQkgKiBVc2UgaW1wbGljaXQgY29udmVy
c2lvbiBzc2l6ZV90LT5pbnQKLQkgKi8KLQlyZXR1cm4gdmZzX2dsdXN0ZXJfcmVjdihyZXEsIHZm
c19haW9fc3RhdGUpOwotfQotCiBzdGF0aWMgaW50IHZmc19nbHVzdGVyX3N0YXQoc3RydWN0IHZm
c19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJCQkgICAgc3RydWN0IHNtYl9maWxlbmFtZSAqc21i
X2ZuYW1lKQogewpAQCAtMTg3MSwxMCArMTg1NiwxMCBAQCBzdGF0aWMgc3RydWN0IHZmc19mbl9w
b2ludGVycyBnbHVzdGVyZnNfZm5zID0gewogCS5jbG9zZV9mbiA9IHZmc19nbHVzdGVyX2Nsb3Nl
LAogCS5wcmVhZF9mbiA9IHZmc19nbHVzdGVyX3ByZWFkLAogCS5wcmVhZF9zZW5kX2ZuID0gdmZz
X2dsdXN0ZXJfcHJlYWRfc2VuZCwKLQkucHJlYWRfcmVjdl9mbiA9IHZmc19nbHVzdGVyX3JlY3Ys
CisJLnByZWFkX3JlY3ZfZm4gPSB2ZnNfZ2x1c3Rlcl9wcmVhZF9yZWN2LAogCS5wd3JpdGVfZm4g
PSB2ZnNfZ2x1c3Rlcl9wd3JpdGUsCiAJLnB3cml0ZV9zZW5kX2ZuID0gdmZzX2dsdXN0ZXJfcHdy
aXRlX3NlbmQsCi0JLnB3cml0ZV9yZWN2X2ZuID0gdmZzX2dsdXN0ZXJfcmVjdiwKKwkucHdyaXRl
X3JlY3ZfZm4gPSB2ZnNfZ2x1c3Rlcl9wd3JpdGVfcmVjdiwKIAkubHNlZWtfZm4gPSB2ZnNfZ2x1
c3Rlcl9sc2VlaywKIAkuc2VuZGZpbGVfZm4gPSB2ZnNfZ2x1c3Rlcl9zZW5kZmlsZSwKIAkucmVj
dmZpbGVfZm4gPSB2ZnNfZ2x1c3Rlcl9yZWN2ZmlsZSwKLS0gCjIuMjEuMAoK


--=-rsIbkcVAlrSQezb8npog--


