Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id 7D473BE4BA
	for <lists+samba-technical@lfdr.de>; Wed, 25 Sep 2019 20:40:16 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=Cc:From:List-Id:Date:To:Subject;
	bh=1BhCqkBo4xqqI4mmdERFLO3sVEqhk7cA3YCeoN1zmqg=; b=FlGmja/AYSrKKHCqqmfENUet+9
	zj3BA3UQ6eOJo0vgaUUy0w/lnG0oA0yJD6yqNTbMqDA7Ai6A78Rb/aCCTyAkR8B18GfWJnD4u11Mt
	lVT44q+Yr8pUSL16x9HGTLQux5Pc0V4cashaW6Sq7hQqtoDBMZ+zVNVnAhfdGOaTy+nOMT/5hhWWu
	pZZfYYj1D9FHndtoOmdbRG8C0sdZ58F7a9BUqduzYOo0699X1P700aOpusg3ULw/gAwDswb4l40bi
	ZzU6Q/5DLhIluK5KScfiSpB5wEjyehs6oVN4nB/mChnd+dqUWWsiywUPKHDAaGZ0iCBaxtz4kq1Xn
	ykY2jTlA==;
Received: from localhost ([::1]:61516 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1iDCCj-008cHC-Vj; Wed, 25 Sep 2019 18:39:58 +0000
Received: from confino.investici.org ([212.103.72.250]:45905) 
 by hr1.samba.org with esmtps (TLS1.2:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1iDCCe-008cH5-DB
 for samba-technical@lists.samba.org; Wed, 25 Sep 2019 18:39:55 +0000
Received: from mx1.investici.org (localhost [127.0.0.1])
 by confino.investici.org (Postfix) with ESMTP id C676F20FFD;
 Wed, 25 Sep 2019 18:39:39 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=cryptolab.net;
 s=stigmate; t=1569436779;
 bh=1BhCqkBo4xqqI4mmdERFLO3sVEqhk7cA3YCeoN1zmqg=;
 h=Subject:From:To:Cc:Date:In-Reply-To:References:From;
 b=Y9MuXjZ4ClaiprORGrVMqILNCmyd+xHdGGMKZPktYaMY44PyzFx+8fL27KhvONnvd
 kWnUdis+xSq1Q0BoFjhViO/IZUUEsCN2JVQZ/mjqjoKFPxKenCP7cb36NiMZGBGNHZ
 NszMHZbozL/+mSkd5c8yfGZwBYBOKKtAzBCcIzWk=
Received: from [212.103.72.250] (mx1.investici.org [212.103.72.250])
 (Authenticated sender: anoopcs@autistici.org) by localhost (Postfix) with
 ESMTPSA id EAC9021045; Wed, 25 Sep 2019 18:39:37 +0000 (UTC)
Message-ID: <98add807a4ac55e5f401522fbdfd47ddf2358d16.camel@cryptolab.net>
Subject: Re: Implementing SMB_VFS_FCNTL in Samba
To: samba-technical <samba-technical@lists.samba.org>
Date: Thu, 26 Sep 2019 00:09:34 +0530
In-Reply-To: <20190923153107.GA4325@jeremy-ThinkPad-X1>
References: <7024afc6236a656134f867288cdb37579425e3ee.camel@cryptolab.net>
 <20190923153107.GA4325@jeremy-ThinkPad-X1>
Content-Type: multipart/mixed; boundary="=-RgpUddLvwYvm9odYW3MJ"
User-Agent: Evolution 3.32.4 (3.32.4-1.fc30) 
MIME-Version: 1.0
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Anoop C S via samba-technical <samba-technical@lists.samba.org>
Reply-To: Anoop C S <anoopcs@cryptolab.net>
Cc: Jeremy Allison <jra@samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>


--=-RgpUddLvwYvm9odYW3MJ
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: 7bit

On Mon, 2019-09-23 at 08:31 -0700, Jeremy Allison via samba-technical
wrote:
> On Mon, Sep 23, 2019 at 02:51:24PM +0530, Anoop C S wrote:
> > Hi all,
> > 
> > I am attaching a patch as an attempt to implement SMB_VFS_FCNTL(for
> > a
> > background see https://bugzilla.samba.org/show_bug.cgi?id=14060).
> > But I
> > have the following question.
> > 
> > int fcntl(int fd, int cmd, ... /* arg */ );
> > 
> > As per man page, fcntl(2) system call can accept a third optional
> > argument. If present it can be of type int, struct flock *, struct
> > f_owner_ex * or uint64_t *. Our current SMB_VFS_LOCK and
> > SMB_VFS_GETLOCK takes care of "Advisory record locking" and "Open
> > file
> > description locks" commands which requires third argument of type
> > struct flock *. Other important fact here to notice is that in most
> > cases the required third argument type is int. The patch I have
> > prepared right now assumes third argument type to be int. 
> > 
> > So should we rename the call to something else(keeping third
> > argument
> > as int) or change the implementation to consider optional third
> > argument as variable?
> 
> I think we need a varargs argument here like the real fcntl
> definition.

Please find the attached patch in the above suggested direction. For
now it is compile tested only. I will respond back afterwards with some
basic testing results.

--=-RgpUddLvwYvm9odYW3MJ
Content-Disposition: attachment; filename="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"
Content-Type: text/x-patch; name="0001-s3-VFS-Add-SMB_VFS_FCNTL.patch"; charset="UTF-8"
Content-Transfer-Encoding: base64

RnJvbSA4MmUxMjZkMWE1MTcwMWRjODEyZGQ1MTAyNWYzN2M0YzM0ZWUyNDk1IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbm9vcCBDIFMgPGFub29wY3NAcmVkaGF0LmNvbT4KRGF0ZTog
U2F0LCAyMSBTZXAgMjAxOSAxOToxMToxOSArMDUzMApTdWJqZWN0OiBbUEFUQ0hdIHMzOiBWRlM6
IEFkZCBTTUJfVkZTX0ZDTlRMKCkKClNpZ25lZC1vZmYtYnk6IEFub29wIEMgUyA8YW5vb3Bjc0By
ZWRoYXQuY29tPgotLS0KIGV4YW1wbGVzL1ZGUy9za2VsX29wYXF1ZS5jICAgICAgICAgICAgfCAg
OCArKysrKysrCiBleGFtcGxlcy9WRlMvc2tlbF90cmFuc3BhcmVudC5jICAgICAgIHwgMTEgKysr
KysrKysrCiBzb3VyY2UzL2luY2x1ZGUvcHJvdG8uaCAgICAgICAgICAgICAgIHwgIDEgKwogc291
cmNlMy9pbmNsdWRlL3NtYnByb2ZpbGUuaCAgICAgICAgICB8ICAxICsKIHNvdXJjZTMvaW5jbHVk
ZS92ZnMuaCAgICAgICAgICAgICAgICAgfCAgNyArKysrKysKIHNvdXJjZTMvaW5jbHVkZS92ZnNf
bWFjcm9zLmggICAgICAgICAgfCAgNSArKysrCiBzb3VyY2UzL2xpYi9zeXN0ZW0uYyAgICAgICAg
ICAgICAgICAgIHwgMTQgKysrKysrKysrKysKIHNvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVsdC5j
ICAgICAgICAgfCAzNCArKysrKysrKysrKysrKysrKysrKysrKysrKysKIHNvdXJjZTMvbW9kdWxl
cy92ZnNfbm90X2ltcGxlbWVudGVkLmMgfCAgOSArKysrKysrCiBzb3VyY2UzL3NtYmQvdmZzLmMg
ICAgICAgICAgICAgICAgICAgIHwgMTUgKysrKysrKysrKysrCiAxMCBmaWxlcyBjaGFuZ2VkLCAx
MDUgaW5zZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBhL2V4YW1wbGVzL1ZGUy9za2VsX29wYXF1ZS5j
IGIvZXhhbXBsZXMvVkZTL3NrZWxfb3BhcXVlLmMKaW5kZXggYzAzYTQyZmVlMDQuLjcyNzE0ZTdj
MmI2IDEwMDY0NAotLS0gYS9leGFtcGxlcy9WRlMvc2tlbF9vcGFxdWUuYworKysgYi9leGFtcGxl
cy9WRlMvc2tlbF9vcGFxdWUuYwpAQCAtNDQyLDYgKzQ0MiwxMyBAQCBzdGF0aWMgaW50IHNrZWxf
a2VybmVsX2Zsb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAogCXJldHVybiAt
MTsKIH0KIAorc3RhdGljIGludCBza2VsX2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAq
aGFuZGxlLAorCQkgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBjbWQsIHZhX2xp
c3QgY21kX2FyZykKK3sKKwllcnJubyA9IEVOT1NZUzsKKwlyZXR1cm4gLTE7Cit9CisKIHN0YXRp
YyBpbnQgc2tlbF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRs
ZSwKIAkJCSAgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBsZWFzZXR5cGUpCiB7
CkBAIC0xMDg5LDYgKzEwOTYsNyBAQCBzdGF0aWMgc3RydWN0IHZmc19mbl9wb2ludGVycyBza2Vs
X29wYXF1ZV9mbnMgPSB7CiAJLmZhbGxvY2F0ZV9mbiA9IHNrZWxfZmFsbG9jYXRlLAogCS5sb2Nr
X2ZuID0gc2tlbF9sb2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSBza2VsX2tlcm5lbF9mbG9jaywK
KwkuZmNudGxfZm4gPSBza2VsX2ZjbnRsLAogCS5saW51eF9zZXRsZWFzZV9mbiA9IHNrZWxfbGlu
dXhfc2V0bGVhc2UsCiAJLmdldGxvY2tfZm4gPSBza2VsX2dldGxvY2ssCiAJLnN5bWxpbmthdF9m
biA9IHNrZWxfc3ltbGlua2F0LApkaWZmIC0tZ2l0IGEvZXhhbXBsZXMvVkZTL3NrZWxfdHJhbnNw
YXJlbnQuYyBiL2V4YW1wbGVzL1ZGUy9za2VsX3RyYW5zcGFyZW50LmMKaW5kZXggNjU2YzkzMzMz
OGEuLjYwZTNkNThmZmMyIDEwMDY0NAotLS0gYS9leGFtcGxlcy9WRlMvc2tlbF90cmFuc3BhcmVu
dC5jCisrKyBiL2V4YW1wbGVzL1ZGUy9za2VsX3RyYW5zcGFyZW50LmMKQEAgLTU0Nyw2ICs1NDcs
MTYgQEAgc3RhdGljIGludCBza2VsX2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwKIAlyZXR1cm4gU01CX1ZGU19ORVhUX0tFUk5FTF9GTE9DSyhoYW5kbGUsIGZz
cCwgc2hhcmVfbW9kZSwgYWNjZXNzX21hc2spOwogfQogCitzdGF0aWMgaW50IHNrZWxfZmNudGwo
c3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCisJCSAgICAgIHN0cnVjdCBmaWxlc19z
dHJ1Y3QgKmZzcCwgaW50IGNtZCwgdmFfbGlzdCBjbWRfYXJnKQoreworCXZvaWQgKmFyZzsKKwor
CWFyZyA9IHZhX2FyZyhjbWRfYXJnLCB2b2lkICopOworCisJcmV0dXJuIFNNQl9WRlNfTkVYVF9G
Q05UTChoYW5kbGUsIGZzcCwgY21kLCBhcmcpOworfQorCiBzdGF0aWMgaW50IHNrZWxfbGludXhf
c2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJCQkgICAgICAgc3Ry
dWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgbGVhc2V0eXBlKQogewpAQCAtMTM3NCw2ICsxMzg0
LDcgQEAgc3RhdGljIHN0cnVjdCB2ZnNfZm5fcG9pbnRlcnMgc2tlbF90cmFuc3BhcmVudF9mbnMg
PSB7CiAJLmZhbGxvY2F0ZV9mbiA9IHNrZWxfZmFsbG9jYXRlLAogCS5sb2NrX2ZuID0gc2tlbF9s
b2NrLAogCS5rZXJuZWxfZmxvY2tfZm4gPSBza2VsX2tlcm5lbF9mbG9jaywKKwkuZmNudGxfZm4g
PSBza2VsX2ZjbnRsLAogCS5saW51eF9zZXRsZWFzZV9mbiA9IHNrZWxfbGludXhfc2V0bGVhc2Us
CiAJLmdldGxvY2tfZm4gPSBza2VsX2dldGxvY2ssCiAJLnN5bWxpbmthdF9mbiA9IHNrZWxfc3lt
bGlua2F0LApkaWZmIC0tZ2l0IGEvc291cmNlMy9pbmNsdWRlL3Byb3RvLmggYi9zb3VyY2UzL2lu
Y2x1ZGUvcHJvdG8uaAppbmRleCAwZDAyZjM4ZmM4Yi4uZDQyNjdhODRhNjUgMTAwNjQ0Ci0tLSBh
L3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCisrKyBiL3NvdXJjZTMvaW5jbHVkZS9wcm90by5oCkBA
IC0yMTksNiArMjE5LDcgQEAgc3NpemVfdCBzeXNfc2VuZChpbnQgcywgY29uc3Qgdm9pZCAqbXNn
LCBzaXplX3QgbGVuLCBpbnQgZmxhZ3MpOwogc3NpemVfdCBzeXNfcmVjdmZyb20oaW50IHMsIHZv
aWQgKmJ1Ziwgc2l6ZV90IGxlbiwgaW50IGZsYWdzLCBzdHJ1Y3Qgc29ja2FkZHIgKmZyb20sIHNv
Y2tsZW5fdCAqZnJvbWxlbik7CiBpbnQgc3lzX2ZjbnRsX3B0cihpbnQgZmQsIGludCBjbWQsIHZv
aWQgKmFyZyk7CiBpbnQgc3lzX2ZjbnRsX2xvbmcoaW50IGZkLCBpbnQgY21kLCBsb25nIGFyZyk7
CitpbnQgc3lzX2ZjbnRsX2ludChpbnQgZmQsIGludCBjbWQsIGludCBhcmcpOwogdm9pZCB1cGRh
dGVfc3RhdF9leF9tdGltZShzdHJ1Y3Qgc3RhdF9leCAqZHN0LCBzdHJ1Y3QgdGltZXNwZWMgd3Jp
dGVfdHMpOwogdm9pZCB1cGRhdGVfc3RhdF9leF9pdGltZShzdHJ1Y3Qgc3RhdF9leCAqZHN0LCBz
dHJ1Y3QgdGltZXNwZWMgaXRpbWUpOwogdm9pZCB1cGRhdGVfc3RhdF9leF9jcmVhdGVfdGltZShz
dHJ1Y3Qgc3RhdF9leCAqZHN0LCBzdHJ1Y3QgdGltZXNwZWMgY3JlYXRlX3RpbWUpOwpkaWZmIC0t
Z2l0IGEvc291cmNlMy9pbmNsdWRlL3NtYnByb2ZpbGUuaCBiL3NvdXJjZTMvaW5jbHVkZS9zbWJw
cm9maWxlLmgKaW5kZXggNDg5YTYxM2UzZGYuLjJhZTNkYjQwYTczIDEwMDY0NAotLS0gYS9zb3Vy
Y2UzL2luY2x1ZGUvc21icHJvZmlsZS5oCisrKyBiL3NvdXJjZTMvaW5jbHVkZS9zbWJwcm9maWxl
LmgKQEAgLTgwLDYgKzgwLDcgQEAgc3RydWN0IHRldmVudF9jb250ZXh0OwogCVNNQlBST0ZJTEVf
U1RBVFNfQkFTSUMoc3lzY2FsbF9mYWxsb2NhdGUpIFwKIAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lD
KHN5c2NhbGxfZmNudGxfbG9jaykgXAogCVNNQlBST0ZJTEVfU1RBVFNfQkFTSUMoc3lzY2FsbF9r
ZXJuZWxfZmxvY2spIFwKKwlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfZmNudGwpIFwK
IAlTTUJQUk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfbGludXhfc2V0bGVhc2UpIFwKIAlTTUJQ
Uk9GSUxFX1NUQVRTX0JBU0lDKHN5c2NhbGxfZmNudGxfZ2V0bG9jaykgXAogCVNNQlBST0ZJTEVf
U1RBVFNfQkFTSUMoc3lzY2FsbF9yZWFkbGlua2F0KSBcCmRpZmYgLS1naXQgYS9zb3VyY2UzL2lu
Y2x1ZGUvdmZzLmggYi9zb3VyY2UzL2luY2x1ZGUvdmZzLmgKaW5kZXggNDcxNDc4MjFmZmQuLmVm
ZWMxNDZlMGFlIDEwMDY0NAotLS0gYS9zb3VyY2UzL2luY2x1ZGUvdmZzLmgKKysrIGIvc291cmNl
My9pbmNsdWRlL3Zmcy5oCkBAIC0yODEsNiArMjgxLDcgQEAKIC8qIFZlcnNpb24gNDIgLSBNb3Zl
IGNoYW5nZV90b191c2VyKCkgLT4gY2hhbmdlX3RvX3VzZXJfYW5kX3NlcnZpY2UoKSAqLwogLyog
VmVyc2lvbiA0MiAtIE1vdmUgY2hhbmdlX3RvX3VzZXJfYnlfZnNwKCkgLT4gY2hhbmdlX3RvX3Vz
ZXJfYW5kX3NlcnZpY2VfYnlfZnNwKCkgKi8KIC8qIFZlcnNpb24gNDIgLSBNb3ZlIFt1bl1iZWNv
bWVfdXNlciooKSAtPiBbdW5dYmVjb21lX3VzZXJfd2l0aG91dF9zZXJ2aWNlKigpICovCisvKiBW
ZXJzaW9uIDQyIC0gQWRkIFNNQl9WRlNfRkNOVEwgKi8KIAogI2RlZmluZSBTTUJfVkZTX0lOVEVS
RkFDRV9WRVJTSU9OIDQyCiAKQEAgLTgwNyw2ICs4MDgsOCBAQCBzdHJ1Y3QgdmZzX2ZuX3BvaW50
ZXJzIHsKIAlib29sICgqbG9ja19mbikoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUs
IHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IG9wLCBvZmZfdCBvZmZzZXQsIG9mZl90IGNv
dW50LCBpbnQgdHlwZSk7CiAJaW50ICgqa2VybmVsX2Zsb2NrX2ZuKShzdHJ1Y3QgdmZzX2hhbmRs
ZV9zdHJ1Y3QgKmhhbmRsZSwgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLAogCQkJICAgICAgIHVp
bnQzMl90IHNoYXJlX21vZGUsIHVpbnQzMl90IGFjY2Vzc19tYXNrKTsKKwlpbnQgKCpmY250bF9m
bikoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCisJCQlzdHJ1Y3QgZmlsZXNfc3Ry
dWN0ICpmc3AsIGludCBjbWQsIHZhX2xpc3QgY21kX2FyZyk7CiAJaW50ICgqbGludXhfc2V0bGVh
c2VfZm4pKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBzdHJ1Y3QgZmlsZXNfc3Ry
dWN0ICpmc3AsIGludCBsZWFzZXR5cGUpOwogCWJvb2wgKCpnZXRsb2NrX2ZuKShzdHJ1Y3QgdmZz
X2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBvZmZfdCAq
cG9mZnNldCwgb2ZmX3QgKnBjb3VudCwgaW50ICpwdHlwZSwgcGlkX3QgKnBwaWQpOwogCWludCAo
KnN5bWxpbmthdF9mbikoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCkBAIC0xMzQw
LDYgKzEzNDMsOCBAQCBib29sIHNtYl92ZnNfY2FsbF9sb2NrKHN0cnVjdCB2ZnNfaGFuZGxlX3N0
cnVjdCAqaGFuZGxlLAogaW50IHNtYl92ZnNfY2FsbF9rZXJuZWxfZmxvY2soc3RydWN0IHZmc19o
YW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJCQkgICAgICBzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3As
IHVpbnQzMl90IHNoYXJlX21vZGUsCiAJCQkgICAgICB1aW50MzJfdCBhY2Nlc3NfbWFzayk7Citp
bnQgc21iX3Zmc19jYWxsX2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAor
CQkgICAgICAgc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgY21kLCAuLi4pOwogaW50IHNt
Yl92ZnNfY2FsbF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRs
ZSwKIAkJCQlzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBsZWFzZXR5cGUpOwogYm9vbCBz
bWJfdmZzX2NhbGxfZ2V0bG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKQEAg
LTE3NzMsNiArMTc3OCw4IEBAIGJvb2wgdmZzX25vdF9pbXBsZW1lbnRlZF9sb2NrKHZmc19oYW5k
bGVfc3RydWN0ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQKIGludCB2ZnNfbm90X2lt
cGxlbWVudGVkX2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwK
IAkJCQkgICAgIHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwKIAkJCQkgICAgIHVpbnQzMl90IHNo
YXJlX21vZGUsIHVpbnQzMl90IGFjY2Vzc19tYXNrKTsKK2ludCB2ZnNfbm90X2ltcGxlbWVudGVk
X2ZjbnRsKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAorCQkJICAgICAgc3RydWN0
IGZpbGVzX3N0cnVjdCAqZnNwLCBpbnQgY21kLCB2YV9saXN0IGNtZF9hcmcpOwogaW50IHZmc19u
b3RfaW1wbGVtZW50ZWRfbGludXhfc2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpo
YW5kbGUsCiAJCQkJICAgICAgIHN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlw
ZSk7CiBib29sIHZmc19ub3RfaW1wbGVtZW50ZWRfZ2V0bG9jayh2ZnNfaGFuZGxlX3N0cnVjdCAq
aGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZzcCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMvaW5jbHVkZS92
ZnNfbWFjcm9zLmggYi9zb3VyY2UzL2luY2x1ZGUvdmZzX21hY3Jvcy5oCmluZGV4IDZkOTVkODQw
ZTI1Li43NGVlNmI4NDM2OSAxMDA2NDQKLS0tIGEvc291cmNlMy9pbmNsdWRlL3Zmc19tYWNyb3Mu
aAorKysgYi9zb3VyY2UzL2luY2x1ZGUvdmZzX21hY3Jvcy5oCkBAIC0yODYsNiArMjg2LDExIEBA
CiAjZGVmaW5lIFNNQl9WRlNfTkVYVF9LRVJORUxfRkxPQ0soaGFuZGxlLCBmc3AsIHNoYXJlX21v
ZGUsIGFjY2Vzc19tYXNrKQlcCiAJc21iX3Zmc19jYWxsX2tlcm5lbF9mbG9jaygoaGFuZGxlKS0+
bmV4dCwgKGZzcCksIChzaGFyZV9tb2RlKSwgKGFjY2Vzc19tYXNrKSkKIAorI2RlZmluZSBTTUJf
VkZTX0ZDTlRMKGZzcCwgY21kLCAuLi4pIFwKKwlzbWJfdmZzX2NhbGxfZmNudGwoKGZzcCktPmNv
bm4tPnZmc19oYW5kbGVzLCAoZnNwKSwgKGNtZCksIChfX1ZBX0FSR1NfXykpCisjZGVmaW5lIFNN
Ql9WRlNfTkVYVF9GQ05UTChoYW5kbGUsIGZzcCwgY21kLCAuLi4pIFwKKwlzbWJfdmZzX2NhbGxf
ZmNudGwoKGhhbmRsZSktPm5leHQsIChmc3ApLCAoY21kKSwgKF9fVkFfQVJHU19fKSkKKwogI2Rl
ZmluZSBTTUJfVkZTX0xJTlVYX1NFVExFQVNFKGZzcCwgbGVhc2V0eXBlKSBcCiAJc21iX3Zmc19j
YWxsX2xpbnV4X3NldGxlYXNlKChmc3ApLT5jb25uLT52ZnNfaGFuZGxlcywgKGZzcCksIChsZWFz
ZXR5cGUpKQogI2RlZmluZSBTTUJfVkZTX05FWFRfTElOVVhfU0VUTEVBU0UoaGFuZGxlLCBmc3As
IGxlYXNldHlwZSkgXApkaWZmIC0tZ2l0IGEvc291cmNlMy9saWIvc3lzdGVtLmMgYi9zb3VyY2Uz
L2xpYi9zeXN0ZW0uYwppbmRleCBkZWY4MjgxZmM0My4uNjc5MzMyMjU1YzAgMTAwNjQ0Ci0tLSBh
L3NvdXJjZTMvbGliL3N5c3RlbS5jCisrKyBiL3NvdXJjZTMvbGliL3N5c3RlbS5jCkBAIC0xMDgs
NiArMTA4LDIwIEBAIGludCBzeXNfZmNudGxfbG9uZyhpbnQgZmQsIGludCBjbWQsIGxvbmcgYXJn
KQogCXJldHVybiByZXQ7CiB9CiAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCitBIGZjbnRsIHdyYXBwZXIgdGhhdCB3
aWxsIGRlYWwgd2l0aCBFSU5UUi4KKyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworCitpbnQgc3lzX2ZjbnRsX2ludChp
bnQgZmQsIGludCBjbWQsIGludCBhcmcpCit7CisJaW50IHJldDsKKworCWRvIHsKKwkJcmV0ID0g
ZmNudGwoZmQsIGNtZCwgYXJnKTsKKwl9IHdoaWxlIChyZXQgPT0gLTEgJiYgZXJybm8gPT0gRUlO
VFIpOworCXJldHVybiByZXQ7Cit9CisKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAgR2V0L1NldCBh
bGwgdGhlIHBvc3NpYmxlIHRpbWUgZmllbGRzIGZyb20gYSBzdGF0IHN0cnVjdCBhcyBhIHRpbWVz
cGVjLgogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92
ZnNfZGVmYXVsdC5jIGIvc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMKaW5kZXggZjQ4YTU5
MGU1ZTcuLjQ5YmNlZGE2YzhkIDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1
bHQuYworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYwpAQCAtMjYwOSw2ICsyNjA5
LDM5IEBAIHN0YXRpYyBpbnQgdmZzd3JhcF9rZXJuZWxfZmxvY2sodmZzX2hhbmRsZV9zdHJ1Y3Qg
KmhhbmRsZSwgZmlsZXNfc3RydWN0ICpmc3AsCiAJcmV0dXJuIDA7CiB9CiAKK3N0YXRpYyBpbnQg
dmZzd3JhcF9mY250bCh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZz
cCwgaW50IGNtZCwKKwkJCSB2YV9saXN0IGNtZF9hcmcpCit7CisJdm9pZCAqYXJnOworCWludCBy
ZXN1bHQ7CisKKwlTVEFSVF9QUk9GSUxFKHN5c2NhbGxfZmNudGwpOworCisJYXJnID0gdmFfYXJn
KGNtZF9hcmcsIHZvaWQgKik7CisKKwlzd2l0Y2goY21kKSB7CisJY2FzZSBGX1NFVExLOgorCWNh
c2UgRl9TRVRMS1c6CisJY2FzZSBGX0dFVExLOgorCWNhc2UgRl9PRkRfU0VUTEs6CisJY2FzZSBG
X09GRF9TRVRMS1c6CisJY2FzZSBGX09GRF9HRVRMSzoKKwljYXNlIEZfR0VUT1dOX0VYOgorCWNh
c2UgRl9TRVRPV05fRVg6CisJY2FzZSBGX0dFVF9SV19ISU5UOgorCWNhc2UgRl9TRVRfUldfSElO
VDoKKwljYXNlIEZfR0VUX0ZJTEVfUldfSElOVDoKKwljYXNlIEZfU0VUX0ZJTEVfUldfSElOVDoK
KwkJcmVzdWx0ID0gc3lzX2ZjbnRsX3B0cihmc3AtPmZoLT5mZCwgY21kLCBhcmcpOworCQlicmVh
azsKKwlkZWZhdWx0OgorCQlyZXN1bHQgPSBzeXNfZmNudGxfaW50KGZzcC0+ZmgtPmZkLCBjbWQs
ICooKGludCAqKWFyZykpOworCX0KKworCUVORF9QUk9GSUxFKHN5c2NhbGxfZmNudGwpOworCXJl
dHVybiByZXN1bHQ7Cit9CisKIHN0YXRpYyBib29sIHZmc3dyYXBfZ2V0bG9jayh2ZnNfaGFuZGxl
X3N0cnVjdCAqaGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZzcCwgb2ZmX3QgKnBvZmZzZXQsIG9mZl90
ICpwY291bnQsIGludCAqcHR5cGUsIHBpZF90ICpwcGlkKQogewogCWJvb2wgcmVzdWx0OwpAQCAt
MzUwMCw2ICszNTMzLDcgQEAgc3RhdGljIHN0cnVjdCB2ZnNfZm5fcG9pbnRlcnMgdmZzX2RlZmF1
bHRfZm5zID0gewogCS5mYWxsb2NhdGVfZm4gPSB2ZnN3cmFwX2ZhbGxvY2F0ZSwKIAkubG9ja19m
biA9IHZmc3dyYXBfbG9jaywKIAkua2VybmVsX2Zsb2NrX2ZuID0gdmZzd3JhcF9rZXJuZWxfZmxv
Y2ssCisJLmZjbnRsX2ZuID0gdmZzd3JhcF9mY250bCwKIAkubGludXhfc2V0bGVhc2VfZm4gPSB2
ZnN3cmFwX2xpbnV4X3NldGxlYXNlLAogCS5nZXRsb2NrX2ZuID0gdmZzd3JhcF9nZXRsb2NrLAog
CS5zeW1saW5rYXRfZm4gPSB2ZnN3cmFwX3N5bWxpbmthdCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMv
bW9kdWxlcy92ZnNfbm90X2ltcGxlbWVudGVkLmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX25vdF9p
bXBsZW1lbnRlZC5jCmluZGV4IGUwZjM2YjlhNjMyLi5kNWI4MDc5YWUyNiAxMDA2NDQKLS0tIGEv
c291cmNlMy9tb2R1bGVzL3Zmc19ub3RfaW1wbGVtZW50ZWQuYworKysgYi9zb3VyY2UzL21vZHVs
ZXMvdmZzX25vdF9pbXBsZW1lbnRlZC5jCkBAIC00NDAsNiArNDQwLDE0IEBAIGludCB2ZnNfbm90
X2ltcGxlbWVudGVkX2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRs
ZSwKIAlyZXR1cm4gLTE7CiB9CiAKK2ludCB2ZnNfbm90X2ltcGxlbWVudGVkX2ZjbnRsKHN0cnVj
dCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLAorCQkJICAgICAgc3RydWN0IGZpbGVzX3N0cnVj
dCAqZnNwLCBpbnQgY21kLAorCQkJICAgICAgdmFfbGlzdCBjbWRfYXJnKQoreworCWVycm5vID0g
RU5PU1lTOworCXJldHVybiAtMTsKK30KKwogaW50IHZmc19ub3RfaW1wbGVtZW50ZWRfbGludXhf
c2V0bGVhc2Uoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsCiAJCQkJICAgICAgIHN0
cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcCwgaW50IGxlYXNldHlwZSkKIHsKQEAgLTEwOTMsNiArMTEw
MSw3IEBAIHN0YXRpYyBzdHJ1Y3QgdmZzX2ZuX3BvaW50ZXJzIHZmc19ub3RfaW1wbGVtZW50ZWRf
Zm5zID0gewogCS5mYWxsb2NhdGVfZm4gPSB2ZnNfbm90X2ltcGxlbWVudGVkX2ZhbGxvY2F0ZSwK
IAkubG9ja19mbiA9IHZmc19ub3RfaW1wbGVtZW50ZWRfbG9jaywKIAkua2VybmVsX2Zsb2NrX2Zu
ID0gdmZzX25vdF9pbXBsZW1lbnRlZF9rZXJuZWxfZmxvY2ssCisJLmZjbnRsX2ZuID0gdmZzX25v
dF9pbXBsZW1lbnRlZF9mY250bCwKIAkubGludXhfc2V0bGVhc2VfZm4gPSB2ZnNfbm90X2ltcGxl
bWVudGVkX2xpbnV4X3NldGxlYXNlLAogCS5nZXRsb2NrX2ZuID0gdmZzX25vdF9pbXBsZW1lbnRl
ZF9nZXRsb2NrLAogCS5zeW1saW5rYXRfZm4gPSB2ZnNfbm90X2ltcGxlbWVudGVkX3N5bWxpbmth
dCwKZGlmZiAtLWdpdCBhL3NvdXJjZTMvc21iZC92ZnMuYyBiL3NvdXJjZTMvc21iZC92ZnMuYwpp
bmRleCAyMGYzZDM0OTY1Zi4uMTc2NGJlNWUxY2MgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvc21iZC92
ZnMuYworKysgYi9zb3VyY2UzL3NtYmQvdmZzLmMKQEAgLTIxOTAsNiArMjE5MCwyMSBAQCBpbnQg
c21iX3Zmc19jYWxsX2tlcm5lbF9mbG9jayhzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRs
ZSwKIAkJCQkJIGFjY2Vzc19tYXNrKTsKIH0KIAoraW50IHNtYl92ZnNfY2FsbF9mY250bChzdHJ1
Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKKwkJICAgICAgIHN0cnVjdCBmaWxlc19zdHJ1
Y3QgKmZzcCwgaW50IGNtZCwgLi4uKQoreworCWludCByZXN1bHQ7CisJdmFfbGlzdCBjbWRfYXJn
OworCisJVkZTX0ZJTkQoZmNudGwpOworCisJdmFfc3RhcnQoY21kX2FyZywgY21kKTsKKwlyZXN1
bHQgPSBoYW5kbGUtPmZucy0+ZmNudGxfZm4oaGFuZGxlLCBmc3AsIGNtZCwgY21kX2FyZyk7CisJ
dmFfZW5kKGNtZF9hcmcpOworCisJcmV0dXJuIHJlc3VsdDsKK30KKwogaW50IHNtYl92ZnNfY2Fs
bF9saW51eF9zZXRsZWFzZShzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQlz
dHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsIGludCBsZWFzZXR5cGUpCiB7Ci0tIAoyLjIxLjAKCg==


--=-RgpUddLvwYvm9odYW3MJ--


