Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id 2386E1CBA68
	for <lists+samba-technical@lfdr.de>; Sat,  9 May 2020 00:05:27 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=Cc:From:List-Id:Date:Subject:To;
	bh=nLyCc2uAk5WlgMQrg/blhsqyiq23il01Ow5vB8kpSn0=; b=FI0u1Y7kNiFAPBATl4tpspTW9A
	jBqSlqRBOB2ZxFRYufxB4xc9xzqoXdOQ+NmvqDHc/QSaNoIV8cA5LTVt4RrNy+sPdwUCNPmCfsh3A
	ttYd9fkkmtUNd+2qEogmIqd5plO0+CYwokX7BXlNnIWNfxDDg0FP89G1i6vmTkHum3fwiwxpSTYoT
	2bZNFQlzMljXWZMC8n2JLVINvy5MuOINpfaZ4syIgHfvemit96oSR24BWqBbSSoFm+aI/KxwGMLSA
	MYLPPxvkhDrvcfNiAG3une1Us6Vl7a2Mm+PZhoCOHjwqwcc3UquGo8ap8hsW4fAtW6UezD68lToCa
	1IxyoVFA==;
Received: from localhost ([::1]:38690 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1jXB7S-003J3O-V3; Fri, 08 May 2020 22:05:23 +0000
Received: from hr2.samba.org ([2a01:4f8:192:486::2:0]:44908) 
 by hr1.samba.org with esmtps (TLS1.3:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1jXB7E-003J28-J8
 for samba-technical@lists.samba.org; Fri, 08 May 2020 22:05:13 +0000
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=samba.org; 
 s=42; h=Date:Message-ID:From:Cc:To;
 bh=nLyCc2uAk5WlgMQrg/blhsqyiq23il01Ow5vB8kpSn0=; b=Q7z0eRKtAqgZEC6xvR0vQP/f3S
 mShjB5X7Odak7YDVE1QAjOId8fwvolfxmRgPOHoMszziajxA+HcyyqYKpPOjqbgRXxWzoLfb3t7Tc
 md3dOgS5rX7Czai/eOaGhQ7ClC0rUeWUqArLxTEMYVAGWgD5s5yjKEPTXpG5+0Te1VrUI2aN4/Jbi
 NfDg0KTy4R9b+NK9BPL6qLvGiJC9zfuA2mFNSdxYYH53v+jauNz1/dwvQrwK7PPLNWq6vbJ4BIlUX
 Mw7nGIzRXj/VjtrIdIJC4MNwrFfuU+w4TtYvan/K2FX2RrVtc9Pm7JVJqyfWyKeghJW4MVr5a4jIR
 4Cx/QeAXNAEEtryMmCZTmNqaVjYwbJvQDrRlJTsrLVwiN25kEKx9h8DN1hPIBUXwZhiZrx3JieNeo
 b7qyHRdBZY3zRl4cQhEZ7wPZgRRsv4LsfFJUFtwutyh6G9sSKJy9cYkQu3hS8M98BRA0x5gKnStin
 YGFoUUEgv26Zb22pjwLoY9JD;
Received: from [127.0.0.2] (localhost [127.0.0.1])
 by hr2.samba.org with esmtpsa (TLS1.3:ECDHE_RSA_CHACHA20_POLY1305:256)
 (Exim) id 1jXB7E-0001Df-1r; Fri, 08 May 2020 22:05:08 +0000
To: Jeremy Allison <jra@samba.org>
References: <e8f863ca6f5a983bc2a83eeefdd0ded99b0f7e2c.camel@cryptolab.net>
 <20200508062725.GB28687@jeremy-acer>
 <3c150c7ef40086ccb392e2911e954386f8c2bd0a.camel@cryptolab.net>
 <6e4d9002-6887-5c01-e992-1d893b3e6d63@samba.org>
 <ebdfdcd6d3ceab5f43172b3323589a5bcfcd957f.camel@cryptolab.net>
 <20200508185339.GD26399@jeremy-acer>
 <8e7d4319-a919-a364-8337-29308926f509@samba.org>
 <20200508204709.GG26399@jeremy-acer> <20200508205140.GH26399@jeremy-acer>
 <4e66af50-d900-3ed1-7d27-8b399cf63143@samba.org>
 <20200508215055.GA2912@jeremy-acer>
Subject: Re: Data Corruption bug with Samba's vfs_iouring and Linux
 5.6.7/5.7rc3
Message-ID: <9ba6f926-f0b5-6cd1-36f1-2ccdf1c8b5eb@samba.org>
Date: Sat, 9 May 2020 00:04:55 +0200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101
 Thunderbird/68.7.0
MIME-Version: 1.0
In-Reply-To: <20200508215055.GA2912@jeremy-acer>
Content-Type: multipart/signed; micalg=pgp-sha512;
 protocol="application/pgp-signature";
 boundary="4Io1dyyQp4tLVvQRagVnigHsy2Lbjt4Xi"
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Stefan Metzmacher via samba-technical <samba-technical@lists.samba.org>
Reply-To: Stefan Metzmacher <metze@samba.org>
Cc: Anoop C S <anoopcs@cryptolab.net>,
 Samba Technical <samba-technical@lists.samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>

This is an OpenPGP/MIME signed message (RFC 4880 and 3156)
--4Io1dyyQp4tLVvQRagVnigHsy2Lbjt4Xi
Content-Type: multipart/mixed; boundary="bumUFoeiG9eVocxsxNHHy7EVLi61IrrVN";
 protected-headers="v1"
From: Stefan Metzmacher <metze@samba.org>
To: Jeremy Allison <jra@samba.org>
Cc: Anoop C S <anoopcs@cryptolab.net>,
 Samba Technical <samba-technical@lists.samba.org>
Message-ID: <9ba6f926-f0b5-6cd1-36f1-2ccdf1c8b5eb@samba.org>
Subject: Re: Data Corruption bug with Samba's vfs_iouring and Linux
 5.6.7/5.7rc3
References: <e8f863ca6f5a983bc2a83eeefdd0ded99b0f7e2c.camel@cryptolab.net>
 <20200508062725.GB28687@jeremy-acer>
 <3c150c7ef40086ccb392e2911e954386f8c2bd0a.camel@cryptolab.net>
 <6e4d9002-6887-5c01-e992-1d893b3e6d63@samba.org>
 <ebdfdcd6d3ceab5f43172b3323589a5bcfcd957f.camel@cryptolab.net>
 <20200508185339.GD26399@jeremy-acer>
 <8e7d4319-a919-a364-8337-29308926f509@samba.org>
 <20200508204709.GG26399@jeremy-acer> <20200508205140.GH26399@jeremy-acer>
 <4e66af50-d900-3ed1-7d27-8b399cf63143@samba.org>
 <20200508215055.GA2912@jeremy-acer>
In-Reply-To: <20200508215055.GA2912@jeremy-acer>

--bumUFoeiG9eVocxsxNHHy7EVLi61IrrVN
Content-Type: multipart/mixed;
 boundary="------------D1151C684579449A919F906B"
Content-Language: en-US

This is a multi-part message in MIME format.
--------------D1151C684579449A919F906B
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable

Am 08.05.20 um 23:50 schrieb Jeremy Allison:
> On Fri, May 08, 2020 at 11:40:30PM +0200, Stefan Metzmacher wrote:
>> Am 08.05.20 um 22:51 schrieb Jeremy Allison:
>>> On Fri, May 08, 2020 at 01:47:09PM -0700, Jeremy Allison via samba-te=
chnical wrote:
>>>> On Fri, May 08, 2020 at 09:35:31PM +0200, Stefan Metzmacher via samb=
a-technical wrote:
>>>>>
>>>>> Thanks very much Jeremy! I didn't noticed that.
>>>>>
>>>>> I guess the attached patch should be able to fix the recursion.
>>>>
>>>> Oh Metze that's *really* ugly :-). I thought about
>>>> doing that in my code and decided it was in too bad
>>>> taste to live :-).
>>>>
>>>> Is there a cleaner way than putting "busy" and "retry"
>>>> variables in the config struct ?
>>>
>>> And a "Goto again" as well :-(. Bleegh.
>>
>> This version would actually work and looks a bit similar to
>> your version.
>>
>> Can you life with that version?
>=20
> Yes I can live with that :-). It at least moves the horror
> to the wrapper function where you can at least concentrate
> all your attention as to why it's doing what it's doing :-).
>=20
> RB+ from me if you add a comment header above the function
> as well as in the commit so it explains what it's doing.
>=20
> Feel free to crib my ascii art to explain in the header
> comment too :-).
>=20
> Thanks for the cleanup !

I'll do that on Monday.

Here's the current set I tested with
io_uring:nowait_pread =3D yes
on the Ubuntu 5.3 Kernel
using the
echo 1 > /proc/sys/vm/drop_caches
head -c 1 /data/ff11.dat | hexdump -C
tricks

Note for the explicit RWF_NOWAIT I need to catch the EAGAIN status to
retry (for testing).

Feel free to upload this to bugzilla if it's online again.

Do you have some comments on the offset < 0 on write case?

metze


--------------D1151C684579449A919F906B
Content-Type: text/plain; charset=UTF-8;
 name="tmp.diff.txt"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="tmp.diff.txt"

RnJvbSAxMDE4MTBiNmJlYmUwM2M3ZjdjMzU4Y2NkMDViMWZiY2E5M2NhMWU3IE1vbiBTZXAg
MTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEu
b3JnPgpEYXRlOiBGcmksIDggTWF5IDIwMjAgMTM6MDY6NTQgKzAyMDAKU3ViamVjdDogW1BB
VENIIDAxLzI5XSBsaWI6IHV0aWw6IEFkZCBzeXNfdmFsaWRfaW9fcmFuZ2UoKQoKVGhpcyBp
bXBsZW1lbnRzIHRoZSBjb250cmFpbnRzIG9mCltNUy1GU0FdIDIuMS41LjIgU2VydmVyIFJl
cXVlc3RzIGEgUmVhZC4KClRoZSBzcGVjaWFsIGhhbmRsaW5nIG9mIFtNUy1GU0FdIDIuMS41
LjMgU2VydmVyIFJlcXVlc3RzIGEgV3JpdGUKd2l0aCBvZmZzZXQgPCAwLCBzaG91bGQgYmUg
aGFuZGxlZCBieSBoaWdoZXIgbGF5ZXJzIQpXaGljaCBtZWFucyB0aGUgY2hlY2sgY2FuIGFs
c28gYmUgdXNlZCBmb3Igd3JpdGVzLgoKQlVHOiBodHRwczovL2J1Z3ppbGxhLnNhbWJhLm9y
Zy9zaG93X2J1Zy5jZ2k/aWQ9MTQzNjEKClNpZ25lZC1vZmYtYnk6IFN0ZWZhbiBNZXR6bWFj
aGVyIDxtZXR6ZUBzYW1iYS5vcmc+Ci0tLQogbGliL3V0aWwvc3lzX3J3LmMgfCAyNCArKysr
KysrKysrKysrKysrKysrKysrKysKIGxpYi91dGlsL3N5c19ydy5oIHwgIDEgKwogMiBmaWxl
cyBjaGFuZ2VkLCAyNSBpbnNlcnRpb25zKCspCgpkaWZmIC0tZ2l0IGEvbGliL3V0aWwvc3lz
X3J3LmMgYi9saWIvdXRpbC9zeXNfcncuYwppbmRleCA5YTZjZGNhYTYwNjMuLjZmYTdjYTU3
MzY1NCAxMDA2NDQKLS0tIGEvbGliL3V0aWwvc3lzX3J3LmMKKysrIGIvbGliL3V0aWwvc3lz
X3J3LmMKQEAgLTI0LDYgKzI0LDMwIEBACiAjaW5jbHVkZSAic3lzdGVtL2ZpbGVzeXMuaCIK
ICNpbmNsdWRlICJsaWIvdXRpbC9zeXNfcncuaCIKIAorYm9vbCBzeXNfdmFsaWRfaW9fcmFu
Z2Uob2ZmX3Qgb2Zmc2V0LCBzaXplX3QgbGVuZ3RoKQoreworCXVpbnQ2NF90IGxhc3RfYnl0
ZV9vZnM7CisKKwlpZiAob2Zmc2V0IDwgMCkgeworCQlyZXR1cm4gZmFsc2U7CisJfQorCisJ
aWYgKG9mZnNldCA+IElOVDY0X01BWCkgeworCQlyZXR1cm4gZmFsc2U7CisJfQorCisJaWYg
KGxlbmd0aCA+IFVJTlQzMl9NQVgpIHsKKwkJcmV0dXJuIGZhbHNlOworCX0KKworCWxhc3Rf
Ynl0ZV9vZnMgPSAodWludDY0X3Qpb2Zmc2V0ICsgKHVpbnQ2NF90KWxlbmd0aDsKKwlpZiAo
bGFzdF9ieXRlX29mcyA+IElOVDY0X01BWCkgeworCQlyZXR1cm4gZmFsc2U7CisJfQorCisJ
cmV0dXJuIHRydWU7Cit9CisKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiBBIHJlYWQgd3JhcHBlciB0aGF0
IHdpbGwgZGVhbCB3aXRoIEVJTlRSL0VXT1VMREJMT0NLCiAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KZGlm
ZiAtLWdpdCBhL2xpYi91dGlsL3N5c19ydy5oIGIvbGliL3V0aWwvc3lzX3J3LmgKaW5kZXgg
YWI0NTZkODdiMjJlLi43MDg2NGNiMmI3NGEgMTAwNjQ0Ci0tLSBhL2xpYi91dGlsL3N5c19y
dy5oCisrKyBiL2xpYi91dGlsL3N5c19ydy5oCkBAIC0yNyw2ICsyNyw3IEBACiAKIHN0cnVj
dCBpb3ZlYzsKIAorYm9vbCBzeXNfdmFsaWRfaW9fcmFuZ2Uob2ZmX3Qgb2Zmc2V0LCBzaXpl
X3QgbGVuZ3RoKTsKIHNzaXplX3Qgc3lzX3JlYWQoaW50IGZkLCB2b2lkICpidWYsIHNpemVf
dCBjb3VudCk7CiB2b2lkIHN5c19yZWFkX3YoaW50IGZkLCB2b2lkICpidWYsIHNpemVfdCBj
b3VudCk7CiBzc2l6ZV90IHN5c193cml0ZShpbnQgZmQsIGNvbnN0IHZvaWQgKmJ1Ziwgc2l6
ZV90IGNvdW50KTsKLS0gCjIuMTcuMQoKCkZyb20gN2UyN2YyYzNjOGVjZjBiMDI3NDEwZmU2
ZjU2YmJhMzgzYTQ2YjNiOSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogSmVyZW15
IEFsbGlzb24gPGpyYUBzYW1iYS5vcmc+CkRhdGU6IFRodSwgNyBNYXkgMjAyMCAxMjozMjo0
OCAtMDcwMApTdWJqZWN0OiBbUEFUQ0ggMDIvMjldIGxpYjogdXRpbDogQWRkIHN5c19wcmVh
ZF9mdWxsKCkuCgpBIHByZWFkIHdyYXBwZXIgdGhhdCB3aWxsIGRlYWwgd2l0aCBFSU5UUiBh
bmQgbmV2ZXIgcmV0dXJuIGEgc2hvcnQKcmVhZCB1bmxlc3MgcHJlYWQgcmV0dXJucyB6ZXJv
IG1lYW5pbmcgRU9GLgoKVGhyZWFkLXNhZmUgc28gbWF5IGJlIHVzZWQgYXMgYSByZXBsYWNl
bWVudCBmb3IgcHJlYWQKaW5zaWRlIHByZWFkX2RvKCkgdGhyZWFkIGZ1bmN0aW9ucy4KCkJV
RzogaHR0cHM6Ly9idWd6aWxsYS5zYW1iYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzYxCgpT
aWduZWQtb2ZmLWJ5OiBKZXJlbXkgQWxsaXNvbiA8anJhQHNhbWJhLm9yZz4KLS0tCiBsaWIv
dXRpbC9zeXNfcncuYyB8IDM1ICsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
CiBsaWIvdXRpbC9zeXNfcncuaCB8ICAxICsKIDIgZmlsZXMgY2hhbmdlZCwgMzYgaW5zZXJ0
aW9ucygrKQoKZGlmZiAtLWdpdCBhL2xpYi91dGlsL3N5c19ydy5jIGIvbGliL3V0aWwvc3lz
X3J3LmMKaW5kZXggNmZhN2NhNTczNjU0Li44N2VmYmZkMzY3Y2IgMTAwNjQ0Ci0tLSBhL2xp
Yi91dGlsL3N5c19ydy5jCisrKyBiL2xpYi91dGlsL3N5c19ydy5jCkBAIC0xNDMsNiArMTQz
LDQxIEBAIHNzaXplX3Qgc3lzX3ByZWFkKGludCBmZCwgdm9pZCAqYnVmLCBzaXplX3QgY291
bnQsIG9mZl90IG9mZikKIAlyZXR1cm4gcmV0OwogfQogCisvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorIEEg
cHJlYWQgd3JhcHBlciB0aGF0IHdpbGwgZGVhbCB3aXRoIEVJTlRSIGFuZCBuZXZlciByZXR1
cm4gYSBzaG9ydAorIHJlYWQgdW5sZXNzIHByZWFkIHJldHVybnMgemVybyBtZWFuaW5nIEVP
Ri4KKyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLworCitzc2l6ZV90IHN5c19wcmVhZF9mdWxsKGludCBmZCwg
dm9pZCAqYnVmLCBzaXplX3QgY291bnQsIG9mZl90IG9mZikKK3sKKwlzc2l6ZV90IHRvdGFs
X3JlYWQgPSAwOworCXVpbnQ4X3QgKmN1cnJfYnVmID0gKHVpbnQ4X3QgKilidWY7CisJc2l6
ZV90IGN1cnJfY291bnQgPSBjb3VudDsKKwlvZmZfdCBjdXJyX29mZiA9IG9mZjsKKworCXdo
aWxlIChjdXJyX2NvdW50ICE9IDApIHsKKwkJc3NpemVfdCByZXQgPSBzeXNfcHJlYWQoZmQs
CisJCQkJCWN1cnJfYnVmLAorCQkJCQljdXJyX2NvdW50LAorCQkJCQljdXJyX29mZik7CisK
KwkJaWYgKHJldCA9PSAtMSkgeworCQkJcmV0dXJuIC0xOworCQl9CisJCWlmIChyZXQgPT0g
MCkgeworCQkJLyogRU9GICovCisJCQlicmVhazsKKwkJfQorCisJCWN1cnJfYnVmICs9IHJl
dDsKKwkJY3Vycl9jb3VudCAtPSByZXQ7CisJCWN1cnJfb2ZmICs9IHJldDsKKworCQl0b3Rh
bF9yZWFkICs9IHJldDsKKwl9CisJcmV0dXJuIHRvdGFsX3JlYWQ7Cit9CisKIC8qKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCiBBIHdyaXRlIHdyYXBwZXIgdGhhdCB3aWxsIGRlYWwgd2l0aCBFSU5UUgogKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCmRpZmYgLS1naXQgYS9saWIvdXRpbC9zeXNfcncuaCBiL2xpYi91dGls
L3N5c19ydy5oCmluZGV4IDcwODY0Y2IyYjc0YS4uMWUwZGQzNzMwYTYwIDEwMDY0NAotLS0g
YS9saWIvdXRpbC9zeXNfcncuaAorKysgYi9saWIvdXRpbC9zeXNfcncuaApAQCAtMzQsNiAr
MzQsNyBAQCBzc2l6ZV90IHN5c193cml0ZShpbnQgZmQsIGNvbnN0IHZvaWQgKmJ1Ziwgc2l6
ZV90IGNvdW50KTsKIHZvaWQgc3lzX3dyaXRlX3YoaW50IGZkLCBjb25zdCB2b2lkICpidWYs
IHNpemVfdCBjb3VudCk7CiBzc2l6ZV90IHN5c193cml0ZXYoaW50IGZkLCBjb25zdCBzdHJ1
Y3QgaW92ZWMgKmlvdiwgaW50IGlvdmNudCk7CiBzc2l6ZV90IHN5c19wcmVhZChpbnQgZmQs
IHZvaWQgKmJ1Ziwgc2l6ZV90IGNvdW50LCBvZmZfdCBvZmYpOworc3NpemVfdCBzeXNfcHJl
YWRfZnVsbChpbnQgZmQsIHZvaWQgKmJ1Ziwgc2l6ZV90IGNvdW50LCBvZmZfdCBvZmYpOwog
c3NpemVfdCBzeXNfcHdyaXRlKGludCBmZCwgY29uc3Qgdm9pZCAqYnVmLCBzaXplX3QgY291
bnQsIG9mZl90IG9mZik7CiAKICNlbmRpZgotLSAKMi4xNy4xCgoKRnJvbSA1MjI4N2FlMzAz
MjNlNDRmN2RhNDQxOGVlYzU5OGNmZDkyZmEyYWI3IE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAw
MQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBGcmks
IDggTWF5IDIwMjAgMTM6MDk6NTAgKzAyMDAKU3ViamVjdDogW1BBVENIIDAzLzI5XSBzcSBw
cmVhZF9mdWxsCgpTaWduZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2Ft
YmEub3JnPgotLS0KIGxpYi91dGlsL3N5c19ydy5jIHwgMTMgKysrKysrKysrKysrKwogMSBm
aWxlIGNoYW5nZWQsIDEzIGluc2VydGlvbnMoKykKCmRpZmYgLS1naXQgYS9saWIvdXRpbC9z
eXNfcncuYyBiL2xpYi91dGlsL3N5c19ydy5jCmluZGV4IDg3ZWZiZmQzNjdjYi4uYmZlYjJl
NmI0NjYxIDEwMDY0NAotLS0gYS9saWIvdXRpbC9zeXNfcncuYworKysgYi9saWIvdXRpbC9z
eXNfcncuYwpAQCAtMTU0LDYgKzE1NCwxMyBAQCBzc2l6ZV90IHN5c19wcmVhZF9mdWxsKGlu
dCBmZCwgdm9pZCAqYnVmLCBzaXplX3QgY291bnQsIG9mZl90IG9mZikKIAl1aW50OF90ICpj
dXJyX2J1ZiA9ICh1aW50OF90ICopYnVmOwogCXNpemVfdCBjdXJyX2NvdW50ID0gY291bnQ7
CiAJb2ZmX3QgY3Vycl9vZmYgPSBvZmY7CisJYm9vbCBvazsKKworCW9rID0gc3lzX3ZhbGlk
X2lvX3JhbmdlKG9mZiwgY291bnQpOworCWlmICghb2spIHsKKwkJZXJybm8gPSBFSU5WQUw7
CisJCXJldHVybiAtMTsKKwl9CiAKIAl3aGlsZSAoY3Vycl9jb3VudCAhPSAwKSB7CiAJCXNz
aXplX3QgcmV0ID0gc3lzX3ByZWFkKGZkLApAQCAtMTY5LDEyICsxNzYsMTggQEAgc3NpemVf
dCBzeXNfcHJlYWRfZnVsbChpbnQgZmQsIHZvaWQgKmJ1Ziwgc2l6ZV90IGNvdW50LCBvZmZf
dCBvZmYpCiAJCQlicmVhazsKIAkJfQogCisJCWlmIChyZXQgPiBjdXJyX2NvdW50KSB7CisJ
CQllcnJubyA9IEVJTzsKKwkJCXJldHVybiAtMTsKKwkJfQorCiAJCWN1cnJfYnVmICs9IHJl
dDsKIAkJY3Vycl9jb3VudCAtPSByZXQ7CiAJCWN1cnJfb2ZmICs9IHJldDsKIAogCQl0b3Rh
bF9yZWFkICs9IHJldDsKIAl9CisKIAlyZXR1cm4gdG90YWxfcmVhZDsKIH0KIAotLSAKMi4x
Ny4xCgoKRnJvbSBjNjZjYzEzOTZlYWZhNDc0NzUyNGI2NGIzMWFmN2Y5ZjM2ZTM2MGYwIE1v
biBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBKZXJlbXkgQWxsaXNvbiA8anJhQHNhbWJh
Lm9yZz4KRGF0ZTogVGh1LCA3IE1heSAyMDIwIDEyOjM0OjMyIC0wNzAwClN1YmplY3Q6IFtQ
QVRDSCAwNC8yOV0gbGliOiB1dGlsOiBBZGQgc3lzX3B3cml0ZV9mdWxsKCkuCgpBIHB3cml0
ZSB3cmFwcGVyIHRoYXQgd2lsbCBkZWFsIHdpdGggRUlOVFIgYW5kIG5ldmVyIHJldHVybiBh
IHNob3J0CndyaXRlIHVubGVzcyB0aGUgZmlsZSBzeXN0ZW0gcmV0dXJucyBhbiBlcnJvci4g
Q29wZXMgd2l0aCB0aGUKdW5zcGVjaWZpZWQgZWRnZSBjb25kaXRpb24gb2YgcHdyaXRlIHJl
dHVybmluZyB6ZXJvIGJ5IGNoYW5naW5nCnRoZSByZXR1cm4gdG8gLTEsIGVycm5vID0gRU5P
U1BDLgoKVGhyZWFkLXNhZmUgc28gbWF5IGJlIHVzZWQgYXMgYSByZXBsYWNlbWVudCBmb3Ig
cHdyaXRlCmluc2lkZSBwd3JpdGVfZG8oKSB0aHJlYWQgZnVuY3Rpb25zLgoKQlVHOiBodHRw
czovL2J1Z3ppbGxhLnNhbWJhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQzNjEKClNpZ25lZC1v
ZmYtYnk6IEplcmVteSBBbGxpc29uIDxqcmFAc2FtYmEub3JnPgotLS0KIGxpYi91dGlsL3N5
c19ydy5jIHwgMzUgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysKIGxpYi91
dGlsL3N5c19ydy5oIHwgIDEgKwogMiBmaWxlcyBjaGFuZ2VkLCAzNiBpbnNlcnRpb25zKCsp
CgpkaWZmIC0tZ2l0IGEvbGliL3V0aWwvc3lzX3J3LmMgYi9saWIvdXRpbC9zeXNfcncuYwpp
bmRleCBiZmViMmU2YjQ2NjEuLjZkMzliZDNhZmIwNiAxMDA2NDQKLS0tIGEvbGliL3V0aWwv
c3lzX3J3LmMKKysrIGIvbGliL3V0aWwvc3lzX3J3LmMKQEAgLTIwNCwzICsyMDQsMzggQEAg
c3NpemVfdCBzeXNfcHdyaXRlKGludCBmZCwgY29uc3Qgdm9pZCAqYnVmLCBzaXplX3QgY291
bnQsIG9mZl90IG9mZikKIAl9IHdoaWxlIChyZXQgPT0gLTEgJiYgZXJybm8gPT0gRUlOVFIp
OwogCXJldHVybiByZXQ7CiB9CisKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgQSBwd3JpdGUgd3JhcHBl
ciB0aGF0IHdpbGwgZGVhbCB3aXRoIEVJTlRSIGFuZCBuZXZlciBhbGxvdyBhIHNob3J0Cisg
d3JpdGUgdW5sZXNzIHRoZSBmaWxlIHN5c3RlbSByZXR1cm5zIGFuIGVycm9yLgorKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKiovCisKK3NzaXplX3Qgc3lzX3B3cml0ZV9mdWxsKGludCBmZCwgY29uc3Qgdm9p
ZCAqYnVmLCBzaXplX3QgY291bnQsIG9mZl90IG9mZikKK3sKKwlzc2l6ZV90IHRvdGFsX3dy
aXR0ZW4gPSAwOworCWNvbnN0IHVpbnQ4X3QgKmN1cnJfYnVmID0gKGNvbnN0IHVpbnQ4X3Qg
KilidWY7CisJc2l6ZV90IGN1cnJfY291bnQgPSBjb3VudDsKKwlvZmZfdCBjdXJyX29mZiA9
IG9mZjsKKworCXdoaWxlIChjdXJyX2NvdW50ICE9IDApIHsKKwkJc3NpemVfdCByZXQgPSBz
eXNfcHdyaXRlKGZkLAorCQkJCQkgY3Vycl9idWYsCisJCQkJCSBjdXJyX2NvdW50LAorCQkJ
CQkgY3Vycl9vZmYpOworCisJCWlmIChyZXQgPT0gLTEpIHsKKwkJCXJldHVybiAtMTsKKwkJ
fQorCQlpZiAocmV0ID09IDApIHsKKwkJCS8qIEVuc3VyZSB3ZSBjYW4gbmV2ZXIgc3Bpbi4g
Ki8KKwkJCWVycm5vID0gRU5PU1BDOworCQkJcmV0dXJuIC0xOworCQl9CisJCWN1cnJfYnVm
ICs9IHJldDsKKwkJY3Vycl9jb3VudCAtPSByZXQ7CisJCWN1cnJfb2ZmICs9IHJldDsKKwor
CQl0b3RhbF93cml0dGVuICs9IHJldDsKKwl9CisJcmV0dXJuIHRvdGFsX3dyaXR0ZW47Cit9
CmRpZmYgLS1naXQgYS9saWIvdXRpbC9zeXNfcncuaCBiL2xpYi91dGlsL3N5c19ydy5oCmlu
ZGV4IDFlMGRkMzczMGE2MC4uYjIyNGVjYjMwYWM3IDEwMDY0NAotLS0gYS9saWIvdXRpbC9z
eXNfcncuaAorKysgYi9saWIvdXRpbC9zeXNfcncuaApAQCAtMzYsNSArMzYsNiBAQCBzc2l6
ZV90IHN5c193cml0ZXYoaW50IGZkLCBjb25zdCBzdHJ1Y3QgaW92ZWMgKmlvdiwgaW50IGlv
dmNudCk7CiBzc2l6ZV90IHN5c19wcmVhZChpbnQgZmQsIHZvaWQgKmJ1Ziwgc2l6ZV90IGNv
dW50LCBvZmZfdCBvZmYpOwogc3NpemVfdCBzeXNfcHJlYWRfZnVsbChpbnQgZmQsIHZvaWQg
KmJ1Ziwgc2l6ZV90IGNvdW50LCBvZmZfdCBvZmYpOwogc3NpemVfdCBzeXNfcHdyaXRlKGlu
dCBmZCwgY29uc3Qgdm9pZCAqYnVmLCBzaXplX3QgY291bnQsIG9mZl90IG9mZik7Citzc2l6
ZV90IHN5c19wd3JpdGVfZnVsbChpbnQgZmQsIGNvbnN0IHZvaWQgKmJ1Ziwgc2l6ZV90IGNv
dW50LCBvZmZfdCBvZmYpOwogCiAjZW5kaWYKLS0gCjIuMTcuMQoKCkZyb20gYTlmNDFiNDFm
ZmU0OTQzZGFiNTA1MjEyM2FhNDc2YzFkNTRmMGVhOCBNb24gU2VwIDE3IDAwOjAwOjAwIDIw
MDEKRnJvbTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KRGF0ZTogRnJp
LCA4IE1heSAyMDIwIDEzOjEwOjE0ICswMjAwClN1YmplY3Q6IFtQQVRDSCAwNS8yOV0gc3Eg
cHdyaXRlX2Z1bGwKClNpZ25lZC1vZmYtYnk6IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBz
YW1iYS5vcmc+Ci0tLQogbGliL3V0aWwvc3lzX3J3LmMgfCAxNCArKysrKysrKysrKysrKwog
MSBmaWxlIGNoYW5nZWQsIDE0IGluc2VydGlvbnMoKykKCmRpZmYgLS1naXQgYS9saWIvdXRp
bC9zeXNfcncuYyBiL2xpYi91dGlsL3N5c19ydy5jCmluZGV4IDZkMzliZDNhZmIwNi4uZDc0
Mzk1ZmM0MDkxIDEwMDY0NAotLS0gYS9saWIvdXRpbC9zeXNfcncuYworKysgYi9saWIvdXRp
bC9zeXNfcncuYwpAQCAtMjE2LDYgKzIxNiwxMyBAQCBzc2l6ZV90IHN5c19wd3JpdGVfZnVs
bChpbnQgZmQsIGNvbnN0IHZvaWQgKmJ1Ziwgc2l6ZV90IGNvdW50LCBvZmZfdCBvZmYpCiAJ
Y29uc3QgdWludDhfdCAqY3Vycl9idWYgPSAoY29uc3QgdWludDhfdCAqKWJ1ZjsKIAlzaXpl
X3QgY3Vycl9jb3VudCA9IGNvdW50OwogCW9mZl90IGN1cnJfb2ZmID0gb2ZmOworCWJvb2wg
b2s7CisKKwlvayA9IHN5c192YWxpZF9pb19yYW5nZShvZmYsIGNvdW50KTsKKwlpZiAoIW9r
KSB7CisJCWVycm5vID0gRUlOVkFMOworCQlyZXR1cm4gLTE7CisJfQogCiAJd2hpbGUgKGN1
cnJfY291bnQgIT0gMCkgewogCQlzc2l6ZV90IHJldCA9IHN5c19wd3JpdGUoZmQsCkBAIC0y
MzEsMTEgKzIzOCwxOCBAQCBzc2l6ZV90IHN5c19wd3JpdGVfZnVsbChpbnQgZmQsIGNvbnN0
IHZvaWQgKmJ1Ziwgc2l6ZV90IGNvdW50LCBvZmZfdCBvZmYpCiAJCQllcnJubyA9IEVOT1NQ
QzsKIAkJCXJldHVybiAtMTsKIAkJfQorCisJCWlmIChyZXQgPiBjdXJyX2NvdW50KSB7CisJ
CQllcnJubyA9IEVJTzsKKwkJCXJldHVybiAtMTsKKwkJfQorCiAJCWN1cnJfYnVmICs9IHJl
dDsKIAkJY3Vycl9jb3VudCAtPSByZXQ7CiAJCWN1cnJfb2ZmICs9IHJldDsKIAogCQl0b3Rh
bF93cml0dGVuICs9IHJldDsKIAl9CisKIAlyZXR1cm4gdG90YWxfd3JpdHRlbjsKIH0KLS0g
CjIuMTcuMQoKCkZyb20gMWVkYzUxMTJlNjFmNmIwNzllNDNmMzljZDU0ZjlhMTdlZTkxZDFj
NSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogSmVyZW15IEFsbGlzb24gPGpyYUBz
YW1iYS5vcmc+CkRhdGU6IFRodSwgNyBNYXkgMjAyMCAxMjo0MjoxMCAtMDcwMApTdWJqZWN0
OiBbUEFUQ0ggMDYvMjldIHMzOiBWRlM6IGFpb19mb3JrOiBDaGFuZ2Ugc3lzX3ByZWFkKCkg
LT4KIHN5c19wcmVhZF9mdWxsKCkgdG8gcHJvdGVjdCBhZ2FpbnN0IHNob3J0IHJlYWRzLgoK
QlVHOiBodHRwczovL2J1Z3ppbGxhLnNhbWJhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQzNjEK
ClNpZ25lZC1vZmYtYnk6IEplcmVteSBBbGxpc29uIDxqcmFAc2FtYmEub3JnPgotLS0KIHNv
dXJjZTMvbW9kdWxlcy92ZnNfYWlvX2ZvcmsuYyB8IDIgKy0KIDEgZmlsZSBjaGFuZ2VkLCAx
IGluc2VydGlvbigrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9k
dWxlcy92ZnNfYWlvX2ZvcmsuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfYWlvX2ZvcmsuYwpp
bmRleCBhMWZlZDVjMDY1NTcuLjI4NWIzMzFmZjljYSAxMDA2NDQKLS0tIGEvc291cmNlMy9t
b2R1bGVzL3Zmc19haW9fZm9yay5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfYWlvX2Zv
cmsuYwpAQCAtMzQyLDcgKzM0Miw3IEBAIHN0YXRpYyB2b2lkIGFpb19jaGlsZF9sb29wKGlu
dCBzb2NrZmQsIHN0cnVjdCBtbWFwX2FyZWEgKm1hcCkKIAogCQlzd2l0Y2ggKGNtZF9zdHJ1
Y3QuY21kKSB7CiAJCWNhc2UgUkVBRF9DTUQ6Ci0JCQlyZXRfc3RydWN0LnNpemUgPSBzeXNf
cHJlYWQoCisJCQlyZXRfc3RydWN0LnNpemUgPSBzeXNfcHJlYWRfZnVsbCgKIAkJCQlmZCwg
ZGlzY2FyZF9jb25zdChtYXAtPnB0ciksIGNtZF9zdHJ1Y3QubiwKIAkJCQljbWRfc3RydWN0
Lm9mZnNldCk7CiAjaWYgMAotLSAKMi4xNy4xCgoKRnJvbSA0ZWVjMmM2NjZjMzA0ZWJlMTIz
NmVlMzdmNWNhNGNmZWUzOWZiYTlkIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBK
ZXJlbXkgQWxsaXNvbiA8anJhQHNhbWJhLm9yZz4KRGF0ZTogVGh1LCA3IE1heSAyMDIwIDEy
OjQyOjUzIC0wNzAwClN1YmplY3Q6IFtQQVRDSCAwNy8yOV0gVE9ETyBzMzogVkZTOiBhaW9f
Zm9yazogQ2hhbmdlIHN5c19wd3JpdGUoKSAtPgogc3lzX3B3cml0ZV9mdWxsKCkgdG8gcHJv
dGVjdCBhZ2FpbnN0IHNob3J0IHdyaXRlcy4KCkJVRzogaHR0cHM6Ly9idWd6aWxsYS5zYW1i
YS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzYxCgpTaWduZWQtb2ZmLWJ5OiBKZXJlbXkgQWxs
aXNvbiA8anJhQHNhbWJhLm9yZz4KClRPRE86IGNoZWNrIGhvdyBjbGllbnRzIGJlaGF2ZS4u
LgpUT0RPOiB3aGVyZSBkbyB3ZSBoYW5kbGUgb2Zmc2V0IDwgMCA/Pz8sIHNlZSBNUy1GU0Eg
Mi4xLjUuMyBTZXJ2ZXIgUmVxdWVzdHMgYSBXcml0ZQotLS0KIHNvdXJjZTMvbW9kdWxlcy92
ZnNfYWlvX2ZvcmsuYyB8IDIgKy0KIDEgZmlsZSBjaGFuZ2VkLCAxIGluc2VydGlvbigrKSwg
MSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfYWlvX2Zv
cmsuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfYWlvX2ZvcmsuYwppbmRleCAyODViMzMxZmY5
Y2EuLjdjNmY0YjAwZmQwNCAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19haW9f
Zm9yay5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfYWlvX2ZvcmsuYwpAQCAtMzUzLDcg
KzM1Myw3IEBAIHN0YXRpYyB2b2lkIGFpb19jaGlsZF9sb29wKGludCBzb2NrZmQsIHN0cnVj
dCBtbWFwX2FyZWEgKm1hcCkKICNlbmRpZgogCQkJYnJlYWs7CiAJCWNhc2UgV1JJVEVfQ01E
OgotCQkJcmV0X3N0cnVjdC5zaXplID0gc3lzX3B3cml0ZSgKKwkJCXJldF9zdHJ1Y3Quc2l6
ZSA9IHN5c19wd3JpdGVfZnVsbCgKIAkJCQlmZCwgZGlzY2FyZF9jb25zdChtYXAtPnB0ciks
IGNtZF9zdHJ1Y3QubiwKIAkJCQljbWRfc3RydWN0Lm9mZnNldCk7CiAJCQlicmVhazsKLS0g
CjIuMTcuMQoKCkZyb20gNDg1ZWQ5MjU4ODQ0YmY0Y2IxMTYwOTZkYjI2NjA3ZDRlYzk2MDFh
OSBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogSmVyZW15IEFsbGlzb24gPGpyYUBz
YW1iYS5vcmc+CkRhdGU6IFRodSwgNyBNYXkgMjAyMCAxMjo0MzozNCAtMDcwMApTdWJqZWN0
OiBbUEFUQ0ggMDgvMjldIHMzOiBWRlM6IGRlZmF1bHQuIENoYW5nZSBzeXNfcHJlYWQoKSAt
Pgogc3lzX3ByZWFkX2Z1bGwoKSBpbiBTTUJfVkZTX1BSRUFEKCkgdG8gcHJvdGVjdCBhZ2Fp
bnN0IHNob3J0IHJlYWRzLgoKQlVHOiBodHRwczovL2J1Z3ppbGxhLnNhbWJhLm9yZy9zaG93
X2J1Zy5jZ2k/aWQ9MTQzNjEKClNpZ25lZC1vZmYtYnk6IEplcmVteSBBbGxpc29uIDxqcmFA
c2FtYmEub3JnPgotLS0KIHNvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVsdC5jIHwgMiArLQog
MSBmaWxlIGNoYW5nZWQsIDEgaW5zZXJ0aW9uKCspLCAxIGRlbGV0aW9uKC0pCgpkaWZmIC0t
Z2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMgYi9zb3VyY2UzL21vZHVsZXMv
dmZzX2RlZmF1bHQuYwppbmRleCBjN2YyMDIwYTllYWQuLjI2ZGI0NWRjY2QwNSAxMDA2NDQK
LS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMKKysrIGIvc291cmNlMy9tb2R1
bGVzL3Zmc19kZWZhdWx0LmMKQEAgLTczNCw3ICs3MzQsNyBAQCBzdGF0aWMgc3NpemVfdCB2
ZnN3cmFwX3ByZWFkKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIGZpbGVzX3N0cnVjdCAq
ZnNwLCB2b2lkCiAKICNpZiBkZWZpbmVkKEhBVkVfUFJFQUQpIHx8IGRlZmluZWQoSEFWRV9Q
UkVBRDY0KQogCVNUQVJUX1BST0ZJTEVfQllURVMoc3lzY2FsbF9wcmVhZCwgbik7Ci0JcmVz
dWx0ID0gc3lzX3ByZWFkKGZzcC0+ZmgtPmZkLCBkYXRhLCBuLCBvZmZzZXQpOworCXJlc3Vs
dCA9IHN5c19wcmVhZF9mdWxsKGZzcC0+ZmgtPmZkLCBkYXRhLCBuLCBvZmZzZXQpOwogCUVO
RF9QUk9GSUxFX0JZVEVTKHN5c2NhbGxfcHJlYWQpOwogCiAJaWYgKHJlc3VsdCA9PSAtMSAm
JiBlcnJubyA9PSBFU1BJUEUpIHsKLS0gCjIuMTcuMQoKCkZyb20gODZhMWQzMmQ0OTQ0OGIz
YzYzMjFkNTUzNjVmMzYxNWQ4MTgwOTJhYiBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJv
bTogSmVyZW15IEFsbGlzb24gPGpyYUBzYW1iYS5vcmc+CkRhdGU6IFRodSwgNyBNYXkgMjAy
MCAxMjo0NDoyNiAtMDcwMApTdWJqZWN0OiBbUEFUQ0ggMDkvMjldIFRPRE86IHMzOiBWRlM6
IGRlZmF1bHQuIENoYW5nZSBzeXNfcHdyaXRlKCkgLT4KIHN5c19wd3JpdGVfZnVsbCgpIGlu
IFNNQl9WRlNfUFdSSVRFKCkgdG8gcHJvdGVjdCBhZ2FpbnN0IHNob3J0IHdyaXRlcy4KCkJV
RzogaHR0cHM6Ly9idWd6aWxsYS5zYW1iYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzYxCgpT
aWduZWQtb2ZmLWJ5OiBKZXJlbXkgQWxsaXNvbiA8anJhQHNhbWJhLm9yZz4KClRPRE86IGNo
ZWNrIGhvdyBjbGllbnRzIGJlaGF2ZS4uLgpUT0RPOiB3aGVyZSBkbyB3ZSBoYW5kbGUgb2Zm
c2V0IDwgMCA/Pz8sIHNlZSBNUy1GU0EgMi4xLjUuMyBTZXJ2ZXIgUmVxdWVzdHMgYSBXcml0
ZQotLS0KIHNvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVsdC5jIHwgMiArLQogMSBmaWxlIGNo
YW5nZWQsIDEgaW5zZXJ0aW9uKCspLCAxIGRlbGV0aW9uKC0pCgpkaWZmIC0tZ2l0IGEvc291
cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1
bHQuYwppbmRleCAyNmRiNDVkY2NkMDUuLjdmNDllNGYyNmMzYiAxMDA2NDQKLS0tIGEvc291
cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMKKysrIGIvc291cmNlMy9tb2R1bGVzL3Zmc19k
ZWZhdWx0LmMKQEAgLTc1OCw3ICs3NTgsNyBAQCBzdGF0aWMgc3NpemVfdCB2ZnN3cmFwX3B3
cml0ZSh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLCBmaWxlc19zdHJ1Y3QgKmZzcCwgY29u
cwogCiAjaWYgZGVmaW5lZChIQVZFX1BXUklURSkgfHwgZGVmaW5lZChIQVZFX1BSV0lURTY0
KQogCVNUQVJUX1BST0ZJTEVfQllURVMoc3lzY2FsbF9wd3JpdGUsIG4pOwotCXJlc3VsdCA9
IHN5c19wd3JpdGUoZnNwLT5maC0+ZmQsIGRhdGEsIG4sIG9mZnNldCk7CisJcmVzdWx0ID0g
c3lzX3B3cml0ZV9mdWxsKGZzcC0+ZmgtPmZkLCBkYXRhLCBuLCBvZmZzZXQpOwogCUVORF9Q
Uk9GSUxFX0JZVEVTKHN5c2NhbGxfcHdyaXRlKTsKIAogCWlmIChyZXN1bHQgPT0gLTEgJiYg
ZXJybm8gPT0gRVNQSVBFKSB7Ci0tIAoyLjE3LjEKCgpGcm9tIDY4NzJmYjU5ODZiYjZhZTk5
ZjgxZTFmYjgzMGUzYzZjYjY3YTU2OTYgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206
IEplcmVteSBBbGxpc29uIDxqcmFAc2FtYmEub3JnPgpEYXRlOiBUaHUsIDcgTWF5IDIwMjAg
MTI6NDU6MTAgLTA3MDAKU3ViamVjdDogW1BBVENIIDEwLzI5XSBzMzogVkZTOiBkZWZhdWx0
LiBDaGFuZ2UgcHJlYWQoKSAtPiBzeXNfcHJlYWRfZnVsbCgpIGluCiBTTUJfVkZTX1BSRUFE
X1NFTkQoKSB0byBwcm90ZWN0IGFnYWluc3Qgc2hvcnQgcmVhZHMuCgpOb3RlIHRoYXQgYXMg
c3lzX3ByZWFkX2Z1bGwoKSBkZWFscyB3aXRoIHRoZSBFSU5UUiBjYXNlCndlIGNhbiByZW1v
dmUgdGhlIGRvIHt9IHdoaWxlIGxvb3AgaGVyZS4KCkJVRzogaHR0cHM6Ly9idWd6aWxsYS5z
YW1iYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzYxCgpTaWduZWQtb2ZmLWJ5OiBKZXJlbXkg
QWxsaXNvbiA8anJhQHNhbWJhLm9yZz4KLS0tCiBzb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1
bHQuYyB8IDggKysrKy0tLS0KIDEgZmlsZSBjaGFuZ2VkLCA0IGluc2VydGlvbnMoKyksIDQg
ZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0
LmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2RlZmF1bHQuYwppbmRleCA3ZjQ5ZTRmMjZjM2Iu
LmExN2ViMGNlNzVjMiAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0
LmMKKysrIGIvc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMKQEAgLTgzOCwxMCArODM4
LDEwIEBAIHN0YXRpYyB2b2lkIHZmc19wcmVhZF9kbyh2b2lkICpwcml2YXRlX2RhdGEpCiAK
IAlQUk9GSUxFX1RJTUVTVEFNUCgmc3RhcnRfdGltZSk7CiAKLQlkbyB7Ci0JCXN0YXRlLT5y
ZXQgPSBwcmVhZChzdGF0ZS0+ZmQsIHN0YXRlLT5idWYsIHN0YXRlLT5jb3VudCwKLQkJCQkg
ICBzdGF0ZS0+b2Zmc2V0KTsKLQl9IHdoaWxlICgoc3RhdGUtPnJldCA9PSAtMSkgJiYgKGVy
cm5vID09IEVJTlRSKSk7CisJc3RhdGUtPnJldCA9IHN5c19wcmVhZF9mdWxsKHN0YXRlLT5m
ZCwKKwkJCQkgICAgc3RhdGUtPmJ1ZiwKKwkJCQkgICAgc3RhdGUtPmNvdW50LAorCQkJCSAg
ICBzdGF0ZS0+b2Zmc2V0KTsKIAogCWlmIChzdGF0ZS0+cmV0ID09IC0xKSB7CiAJCXN0YXRl
LT52ZnNfYWlvX3N0YXRlLmVycm9yID0gZXJybm87Ci0tIAoyLjE3LjEKCgpGcm9tIGMzNTYw
MDcyNjM1OGYyYzcwNTc4Mzk1NjFhNjlhMGYwMjE0ZjU0MmIgTW9uIFNlcCAxNyAwMDowMDow
MCAyMDAxCkZyb206IEplcmVteSBBbGxpc29uIDxqcmFAc2FtYmEub3JnPgpEYXRlOiBUaHUs
IDcgTWF5IDIwMjAgMTI6NDg6NDkgLTA3MDAKU3ViamVjdDogW1BBVENIIDExLzI5XSBUT0RP
OiBzMzogVkZTOiBkZWZhdWx0LiBDaGFuZ2UgcHdyaXRlKCkgLT4KIHN5c19wd3JpdGVfZnVs
bCgpIGluIFNNQl9WRlNfUFdSSVRFX1NFTkQoKSB0byBwcm90ZWN0IGFnYWluc3Qgc2hvcnQg
d3JpdGVzLgoKTm90ZSB0aGF0IGFzIHN5c19wd3JpdGVfZnVsbCgpIGRlYWxzIHdpdGggdGhl
IEVJTlRSIGNhc2UKd2UgY2FuIHJlbW92ZSB0aGUgZG8ge30gd2hpbGUgbG9vcCBoZXJlLgoK
QlVHOiBodHRwczovL2J1Z3ppbGxhLnNhbWJhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQzNjEK
ClNpZ25lZC1vZmYtYnk6IEplcmVteSBBbGxpc29uIDxqcmFAc2FtYmEub3JnPgoKVE9ETzog
Y2hlY2sgaG93IGNsaWVudHMgYmVoYXZlLi4uClRPRE86IHdoZXJlIGRvIHdlIGhhbmRsZSBv
ZmZzZXQgPCAwID8/Pywgc2VlIE1TLUZTQSAyLjEuNS4zIFNlcnZlciBSZXF1ZXN0cyBhIFdy
aXRlCi0tLQogc291cmNlMy9tb2R1bGVzL3Zmc19kZWZhdWx0LmMgfCA4ICsrKystLS0tCiAx
IGZpbGUgY2hhbmdlZCwgNCBpbnNlcnRpb25zKCspLCA0IGRlbGV0aW9ucygtKQoKZGlmZiAt
LWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVsdC5jIGIvc291cmNlMy9tb2R1bGVz
L3Zmc19kZWZhdWx0LmMKaW5kZXggYTE3ZWIwY2U3NWMyLi41MjJlYTAzMjYwYzEgMTAwNjQ0
Ci0tLSBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfZGVmYXVsdC5jCisrKyBiL3NvdXJjZTMvbW9k
dWxlcy92ZnNfZGVmYXVsdC5jCkBAIC05NjYsMTAgKzk2NiwxMCBAQCBzdGF0aWMgdm9pZCB2
ZnNfcHdyaXRlX2RvKHZvaWQgKnByaXZhdGVfZGF0YSkKIAogCVBST0ZJTEVfVElNRVNUQU1Q
KCZzdGFydF90aW1lKTsKIAotCWRvIHsKLQkJc3RhdGUtPnJldCA9IHB3cml0ZShzdGF0ZS0+
ZmQsIHN0YXRlLT5idWYsIHN0YXRlLT5jb3VudCwKLQkJCQkgICBzdGF0ZS0+b2Zmc2V0KTsK
LQl9IHdoaWxlICgoc3RhdGUtPnJldCA9PSAtMSkgJiYgKGVycm5vID09IEVJTlRSKSk7CisJ
c3RhdGUtPnJldCA9IHN5c19wd3JpdGVfZnVsbChzdGF0ZS0+ZmQsCisJCQkJICAgICBzdGF0
ZS0+YnVmLAorCQkJCSAgICAgc3RhdGUtPmNvdW50LAorCQkJCSAgICAgc3RhdGUtPm9mZnNl
dCk7CiAKIAlpZiAoc3RhdGUtPnJldCA9PSAtMSkgewogCQlzdGF0ZS0+dmZzX2Fpb19zdGF0
ZS5lcnJvciA9IGVycm5vOwotLSAKMi4xNy4xCgoKRnJvbSAyYTk5MzJhNDhhNWM3ZmYxYTFh
MjIzYzlmMThhNDBmYzhiOGYwZGQ3IE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBT
dGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBXZWQsIDYgTWF5IDIw
MjAgMDM6MDU6NDcgLTA3MDAKU3ViamVjdDogW1BBVENIIDEyLzI5XSB2ZnNfaW9fdXJpbmc6
IGZpeCB0aGUgcHJlZml4IGZvciBwYXJhbWV0cmljIG9wdGlvbnMKIGZyb20gJ3Zmc19pb191
cmluZycgdG8gJ2lvX3VyaW5nJwoKVGhpcyBpcyB3aGF0IHRoZSBtYW5wYWdlIGRlc2NyaWJl
cy4KCkJVRzogaHR0cHM6Ly9idWd6aWxsYS5zYW1iYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0
MzYxCgpTaWduZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3Jn
PgotLS0KIHNvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYyB8IDQgKystLQogMSBmaWxl
IGNoYW5nZWQsIDIgaW5zZXJ0aW9ucygrKSwgMiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQg
YS9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMgYi9zb3VyY2UzL21vZHVsZXMvdmZz
X2lvX3VyaW5nLmMKaW5kZXggMzc4ZTQ4ZDExMmY2Li5iNDA5ZDA3NTMzNzkgMTAwNjQ0Ci0t
LSBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYworKysgYi9zb3VyY2UzL21vZHVs
ZXMvdmZzX2lvX3VyaW5nLmMKQEAgLTE3MiwxMyArMTcyLDEzIEBAIHN0YXRpYyBpbnQgdmZz
X2lvX3VyaW5nX2Nvbm5lY3QodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwgY29uc3QgY2hh
ciAqc2VydmljZSwKIAl9CiAKIAludW1fZW50cmllcyA9IGxwX3Bhcm1fdWxvbmcoU05VTSho
YW5kbGUtPmNvbm4pLAotCQkJCSAgICAidmZzX2lvX3VyaW5nIiwKKwkJCQkgICAgImlvX3Vy
aW5nIiwKIAkJCQkgICAgIm51bV9lbnRyaWVzIiwKIAkJCQkgICAgMTI4KTsKIAludW1fZW50
cmllcyA9IE1BWChudW1fZW50cmllcywgMSk7CiAKIAlzcXBvbGwgPSBscF9wYXJtX2Jvb2wo
U05VTShoYW5kbGUtPmNvbm4pLAotCQkJICAgICAidmZzX2lvX3VyaW5nIiwKKwkJCSAgICAg
ImlvX3VyaW5nIiwKIAkJCSAgICAgInNxcG9sbCIsCiAJCQkgICAgIGZhbHNlKTsKIAlpZiAo
c3Fwb2xsKSB7Ci0tIAoyLjE3LjEKCgpGcm9tIDZiY2ZkYjhhZmY0MmE0NjVkMDkzNzQ2MjVj
YTEzNGQ3NmMwMzA2MGIgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBN
ZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+CkRhdGU6IEZyaSwgOCBNYXkgMjAyMCAxMDoz
OTo1MiArMDIwMApTdWJqZWN0OiBbUEFUQ0ggMTMvMjldIHZmc19pb191cmluZzogcmVwbGFj
ZSB2ZnNfaW9fdXJpbmdfcmVxdWVzdC0+c3RhdGUgd2l0aAogX3RldmVudF9yZXFfZGF0YSgp
CgpXZSBkb24ndCBuZWVkIGEgZGlyZWN0IHBvaW50ZXIgdG8gdGhlIHN0YXRlLi4uCgpCVUc6
IGh0dHBzOi8vYnVnemlsbGEuc2FtYmEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2MQoKU2ln
bmVkLW9mZi1ieTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBz
b3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMgfCAxMCArKysrLS0tLS0tCiAxIGZpbGUg
Y2hhbmdlZCwgNCBpbnNlcnRpb25zKCspLCA2IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBh
L3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNf
aW9fdXJpbmcuYwppbmRleCBiNDA5ZDA3NTMzNzkuLjk4OGIzMDlkYTUyNSAxMDA2NDQKLS0t
IGEvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCisrKyBiL3NvdXJjZTMvbW9kdWxl
cy92ZnNfaW9fdXJpbmcuYwpAQCAtNDIsNyArNDIsNiBAQCBzdHJ1Y3QgdmZzX2lvX3VyaW5n
X3JlcXVlc3QgewogCXN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqKmxpc3RfaGVhZDsK
IAlzdHJ1Y3QgdmZzX2lvX3VyaW5nX2NvbmZpZyAqY29uZmlnOwogCXN0cnVjdCB0ZXZlbnRf
cmVxICpyZXE7Ci0Jdm9pZCAqc3RhdGU7CiAJc3RydWN0IGlvX3VyaW5nX3NxZSBzcWU7CiAJ
c3RydWN0IGlvX3VyaW5nX2NxZSBjcWU7CiAJc3RydWN0IHRpbWVzcGVjIHN0YXJ0X3RpbWU7
CkBAIC01OCw4ICs1Nyw5IEBAIHN0YXRpYyB2b2lkIHZmc19pb191cmluZ19maW5pc2hfcmVx
KHN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAogCXN0cnVjdCB0ZXZlbnRfcmVx
ICpyZXEgPQogCQl0YWxsb2NfZ2V0X3R5cGVfYWJvcnQoY3VyLT5yZXEsCiAJCXN0cnVjdCB0
ZXZlbnRfcmVxKTsKKwl2b2lkICpzdGF0ZSA9IF90ZXZlbnRfcmVxX2RhdGEocmVxKTsKIAot
CXRhbGxvY19zZXRfZGVzdHJ1Y3RvcihjdXItPnN0YXRlLCBOVUxMKTsKKwl0YWxsb2Nfc2V0
X2Rlc3RydWN0b3Ioc3RhdGUsIE5VTEwpOwogCWlmIChjdXItPmxpc3RfaGVhZCAhPSBOVUxM
KSB7CiAJCURMSVNUX1JFTU9WRSgoKmN1ci0+bGlzdF9oZWFkKSwgY3VyKTsKIAkJY3VyLT5s
aXN0X2hlYWQgPSBOVUxMOwpAQCAtMjM4LDYgKzIzOCw3IEBAIHN0YXRpYyB2b2lkIHZmc19p
b191cmluZ19xdWV1ZV9ydW4oc3RydWN0IHZmc19pb191cmluZ19jb25maWcgKmNvbmZpZykK
IAogCWZvciAoY3VyID0gY29uZmlnLT5xdWV1ZTsgY3VyICE9IE5VTEw7IGN1ciA9IG5leHQp
IHsKIAkJc3RydWN0IGlvX3VyaW5nX3NxZSAqc3FlID0gTlVMTDsKKwkJdm9pZCAqc3RhdGUg
PSBfdGV2ZW50X3JlcV9kYXRhKGN1ci0+cmVxKTsKIAogCQluZXh0ID0gY3VyLT5uZXh0Owog
CkBAIC0yNDYsNyArMjQ3LDcgQEAgc3RhdGljIHZvaWQgdmZzX2lvX3VyaW5nX3F1ZXVlX3J1
bihzdHJ1Y3QgdmZzX2lvX3VyaW5nX2NvbmZpZyAqY29uZmlnKQogCQkJYnJlYWs7CiAJCX0K
IAotCQl0YWxsb2Nfc2V0X2Rlc3RydWN0b3IoY3VyLT5zdGF0ZSwKKwkJdGFsbG9jX3NldF9k
ZXN0cnVjdG9yKHN0YXRlLAogCQkJdmZzX2lvX3VyaW5nX3JlcXVlc3Rfc3RhdGVfZGVueV9k
ZXN0cnVjdG9yKTsKIAkJRExJU1RfUkVNT1ZFKGNvbmZpZy0+cXVldWUsIGN1cik7CiAJCSpz
cWUgPSBjdXItPnNxZTsKQEAgLTMxOCw3ICszMTksNiBAQCBzdGF0aWMgc3RydWN0IHRldmVu
dF9yZXEgKnZmc19pb191cmluZ19wcmVhZF9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZAogCX0KIAlzdGF0ZS0+dXIuY29uZmlnID0gY29uZmlnOwogCXN0YXRlLT51ci5y
ZXEgPSByZXE7Ci0Jc3RhdGUtPnVyLnN0YXRlID0gc3RhdGU7CiAKIAlTTUJQUk9GSUxFX0JZ
VEVTX0FTWU5DX1NUQVJUKHN5c2NhbGxfYXN5c19wcmVhZCwgcHJvZmlsZV9wLAogCQkJCSAg
ICAgc3RhdGUtPnVyLnByb2ZpbGVfYnl0ZXMsIG4pOwpAQCAtMzk4LDcgKzM5OCw2IEBAIHN0
YXRpYyBzdHJ1Y3QgdGV2ZW50X3JlcSAqdmZzX2lvX3VyaW5nX3B3cml0ZV9zZW5kKHN0cnVj
dCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuCiAJfQogCXN0YXRlLT51ci5jb25maWcgPSBjb25m
aWc7CiAJc3RhdGUtPnVyLnJlcSA9IHJlcTsKLQlzdGF0ZS0+dXIuc3RhdGUgPSBzdGF0ZTsK
IAogCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfU1RBUlQoc3lzY2FsbF9hc3lzX3B3cml0ZSwg
cHJvZmlsZV9wLAogCQkJCSAgICAgc3RhdGUtPnVyLnByb2ZpbGVfYnl0ZXMsIG4pOwpAQCAt
NDc1LDcgKzQ3NCw2IEBAIHN0YXRpYyBzdHJ1Y3QgdGV2ZW50X3JlcSAqdmZzX2lvX3VyaW5n
X2ZzeW5jX3NlbmQoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kCiAJfQogCXN0YXRl
LT51ci5jb25maWcgPSBjb25maWc7CiAJc3RhdGUtPnVyLnJlcSA9IHJlcTsKLQlzdGF0ZS0+
dXIuc3RhdGUgPSBzdGF0ZTsKIAogCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfU1RBUlQoc3lz
Y2FsbF9hc3lzX2ZzeW5jLCBwcm9maWxlX3AsCiAJCQkJICAgICBzdGF0ZS0+dXIucHJvZmls
ZV9ieXRlcywgMCk7Ci0tIAoyLjE3LjEKCgpGcm9tIGYwNDk2YWEzMjQ3MGM1Mjg2OWQ3ZjI5
ZTVjZDQxMTY5NGQzMzM5YjQgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZh
biBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+CkRhdGU6IEZyaSwgOCBNYXkgMjAyMCAx
MDo0Mjo1OSArMDIwMApTdWJqZWN0OiBbUEFUQ0ggMTQvMjldIHZmc19pb191cmluZzogaW50
cm9kdWNlCiB2ZnNfaW9fdXJpbmdfcmVxdWVzdC0+Y29tcGxldGlvbl9mbigpCgpXZSdsbCBu
ZWVkIHRvIGFkZCBtb3JlIGxvZ2ljIHRoYW4gYSBzaW1wbGUgX3RldmVudF9yZXFfZG9uZSgp
CgpCVUc6IGh0dHBzOi8vYnVnemlsbGEuc2FtYmEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2
MQoKU2lnbmVkLW9mZi1ieTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4K
LS0tCiBzb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMgfCA0OSArKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysrKystCiAxIGZpbGUgY2hhbmdlZCwgNDggaW5zZXJ0aW9ucygr
KSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9f
dXJpbmcuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwppbmRleCA5ODhiMzA5
ZGE1MjUuLmFiZGQ0ZDE2ZTlmOCAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19p
b191cmluZy5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwpAQCAtNDQs
NiArNDQsOCBAQCBzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3QgewogCXN0cnVjdCB0ZXZl
bnRfcmVxICpyZXE7CiAJc3RydWN0IGlvX3VyaW5nX3NxZSBzcWU7CiAJc3RydWN0IGlvX3Vy
aW5nX2NxZSBjcWU7CisJdm9pZCAoKmNvbXBsZXRpb25fZm4pKHN0cnVjdCB2ZnNfaW9fdXJp
bmdfcmVxdWVzdCAqY3VyLAorCQkJICAgICAgY29uc3QgY2hhciAqbG9jYXRpb24pOwogCXN0
cnVjdCB0aW1lc3BlYyBzdGFydF90aW1lOwogCXN0cnVjdCB0aW1lc3BlYyBlbmRfdGltZTsK
IAlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NUQVRFKHByb2ZpbGVfYnl0ZXMpOwpAQCAtNzQs
NyArNzYsNyBAQCBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdfZmluaXNoX3JlcShzdHJ1Y3Qg
dmZzX2lvX3VyaW5nX3JlcXVlc3QgKmN1ciwKIAkgKiBvciB0ZXZlbnRfcmVxX2RlZmVyX2Nh
bGxiYWNrKCkgYmVpbmcgY2FsbGVkCiAJICogYWxyZWFkeS4KIAkgKi8KLQlfdGV2ZW50X3Jl
cV9kb25lKHJlcSwgbG9jYXRpb24pOworCWN1ci0+Y29tcGxldGlvbl9mbihjdXIsIGxvY2F0
aW9uKTsKIH0KIAogc3RhdGljIHZvaWQgdmZzX2lvX3VyaW5nX2NvbmZpZ19kZXN0cm95KHN0
cnVjdCB2ZnNfaW9fdXJpbmdfY29uZmlnICpjb25maWcsCkBAIC0yOTcsNiArMjk5LDkgQEAg
c3RydWN0IHZmc19pb191cmluZ19wcmVhZF9zdGF0ZSB7CiAJc3RydWN0IGlvdmVjIGlvdjsK
IH07CiAKK3N0YXRpYyB2b2lkIHZmc19pb191cmluZ19wcmVhZF9jb21wbGV0aW9uKHN0cnVj
dCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAorCQkJCQkgIGNvbnN0IGNoYXIgKmxvY2F0
aW9uKTsKKwogc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfaW9fdXJpbmdfcHJlYWRf
c2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkJICAgICBUQUxM
T0NfQ1RYICptZW1fY3R4LAogCQkJCQkgICAgIHN0cnVjdCB0ZXZlbnRfY29udGV4dCAqZXYs
CkBAIC0zMTksNiArMzI0LDcgQEAgc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfaW9f
dXJpbmdfcHJlYWRfc2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmQKIAl9CiAJ
c3RhdGUtPnVyLmNvbmZpZyA9IGNvbmZpZzsKIAlzdGF0ZS0+dXIucmVxID0gcmVxOworCXN0
YXRlLT51ci5jb21wbGV0aW9uX2ZuID0gdmZzX2lvX3VyaW5nX3ByZWFkX2NvbXBsZXRpb247
CiAKIAlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NUQVJUKHN5c2NhbGxfYXN5c19wcmVhZCwg
cHJvZmlsZV9wLAogCQkJCSAgICAgc3RhdGUtPnVyLnByb2ZpbGVfYnl0ZXMsIG4pOwpAQCAt
MzQ0LDYgKzM1MCwxNyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmlu
Z19wcmVhZF9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZAogCXJldHVybiBy
ZXE7CiB9CiAKK3N0YXRpYyB2b2lkIHZmc19pb191cmluZ19wcmVhZF9jb21wbGV0aW9uKHN0
cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAorCQkJCQkgIGNvbnN0IGNoYXIgKmxv
Y2F0aW9uKQoreworCS8qCisJICogV2UgcmVseSBvbiBiZWluZyBpbnNpZGUgdGhlIF9zZW5k
KCkgZnVuY3Rpb24KKwkgKiBvciB0ZXZlbnRfcmVxX2RlZmVyX2NhbGxiYWNrKCkgYmVpbmcg
Y2FsbGVkCisJICogYWxyZWFkeS4KKwkgKi8KKwlfdGV2ZW50X3JlcV9kb25lKGN1ci0+cmVx
LCBsb2NhdGlvbik7Cit9CisKIHN0YXRpYyBzc2l6ZV90IHZmc19pb191cmluZ19wcmVhZF9y
ZWN2KHN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsCiAJCQkJICBzdHJ1Y3QgdmZzX2Fpb19zdGF0
ZSAqdmZzX2Fpb19zdGF0ZSkKIHsKQEAgLTM3Niw2ICszOTMsOSBAQCBzdHJ1Y3QgdmZzX2lv
X3VyaW5nX3B3cml0ZV9zdGF0ZSB7CiAJc3RydWN0IGlvdmVjIGlvdjsKIH07CiAKK3N0YXRp
YyB2b2lkIHZmc19pb191cmluZ19wd3JpdGVfY29tcGxldGlvbihzdHJ1Y3QgdmZzX2lvX3Vy
aW5nX3JlcXVlc3QgKmN1ciwKKwkJCQkJICAgY29uc3QgY2hhciAqbG9jYXRpb24pOworCiBz
dGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmluZ19wd3JpdGVfc2VuZChzdHJ1
Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkJICAgICAgVEFMTE9DX0NUWCAq
bWVtX2N0eCwKIAkJCQkJICAgICAgc3RydWN0IHRldmVudF9jb250ZXh0ICpldiwKQEAgLTM5
OCw2ICs0MTgsNyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmluZ19w
d3JpdGVfc2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbgogCX0KIAlzdGF0ZS0+
dXIuY29uZmlnID0gY29uZmlnOwogCXN0YXRlLT51ci5yZXEgPSByZXE7CisJc3RhdGUtPnVy
LmNvbXBsZXRpb25fZm4gPSB2ZnNfaW9fdXJpbmdfcHdyaXRlX2NvbXBsZXRpb247CiAKIAlT
TUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NUQVJUKHN5c2NhbGxfYXN5c19wd3JpdGUsIHByb2Zp
bGVfcCwKIAkJCQkgICAgIHN0YXRlLT51ci5wcm9maWxlX2J5dGVzLCBuKTsKQEAgLTQyMyw2
ICs0NDQsMTcgQEAgc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfaW9fdXJpbmdfcHdy
aXRlX3NlbmQoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW4KIAlyZXR1cm4gcmVxOwog
fQogCitzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdfcHdyaXRlX2NvbXBsZXRpb24oc3RydWN0
IHZmc19pb191cmluZ19yZXF1ZXN0ICpjdXIsCisJCQkJCSAgIGNvbnN0IGNoYXIgKmxvY2F0
aW9uKQoreworCS8qCisJICogV2UgcmVseSBvbiBiZWluZyBpbnNpZGUgdGhlIF9zZW5kKCkg
ZnVuY3Rpb24KKwkgKiBvciB0ZXZlbnRfcmVxX2RlZmVyX2NhbGxiYWNrKCkgYmVpbmcgY2Fs
bGVkCisJICogYWxyZWFkeS4KKwkgKi8KKwlfdGV2ZW50X3JlcV9kb25lKGN1ci0+cmVxLCBs
b2NhdGlvbik7Cit9CisKIHN0YXRpYyBzc2l6ZV90IHZmc19pb191cmluZ19wd3JpdGVfcmVj
dihzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxLAogCQkJCSAgIHN0cnVjdCB2ZnNfYWlvX3N0YXRl
ICp2ZnNfYWlvX3N0YXRlKQogewpAQCAtNDU0LDYgKzQ4Niw5IEBAIHN0cnVjdCB2ZnNfaW9f
dXJpbmdfZnN5bmNfc3RhdGUgewogCXN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCB1cjsK
IH07CiAKK3N0YXRpYyB2b2lkIHZmc19pb191cmluZ19mc3luY19jb21wbGV0aW9uKHN0cnVj
dCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAorCQkJCQkgIGNvbnN0IGNoYXIgKmxvY2F0
aW9uKTsKKwogc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfaW9fdXJpbmdfZnN5bmNf
c2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwKIAkJCQkJICAgICBUQUxM
T0NfQ1RYICptZW1fY3R4LAogCQkJCQkgICAgIHN0cnVjdCB0ZXZlbnRfY29udGV4dCAqZXYs
CkBAIC00NzQsNiArNTA5LDcgQEAgc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfaW9f
dXJpbmdfZnN5bmNfc2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmQKIAl9CiAJ
c3RhdGUtPnVyLmNvbmZpZyA9IGNvbmZpZzsKIAlzdGF0ZS0+dXIucmVxID0gcmVxOworCXN0
YXRlLT51ci5jb21wbGV0aW9uX2ZuID0gdmZzX2lvX3VyaW5nX2ZzeW5jX2NvbXBsZXRpb247
CiAKIAlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX1NUQVJUKHN5c2NhbGxfYXN5c19mc3luYywg
cHJvZmlsZV9wLAogCQkJCSAgICAgc3RhdGUtPnVyLnByb2ZpbGVfYnl0ZXMsIDApOwpAQCAt
NDk2LDYgKzUzMiwxNyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmlu
Z19mc3luY19zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZAogCXJldHVybiBy
ZXE7CiB9CiAKK3N0YXRpYyB2b2lkIHZmc19pb191cmluZ19mc3luY19jb21wbGV0aW9uKHN0
cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAorCQkJCQkgIGNvbnN0IGNoYXIgKmxv
Y2F0aW9uKQoreworCS8qCisJICogV2UgcmVseSBvbiBiZWluZyBpbnNpZGUgdGhlIF9zZW5k
KCkgZnVuY3Rpb24KKwkgKiBvciB0ZXZlbnRfcmVxX2RlZmVyX2NhbGxiYWNrKCkgYmVpbmcg
Y2FsbGVkCisJICogYWxyZWFkeS4KKwkgKi8KKwlfdGV2ZW50X3JlcV9kb25lKGN1ci0+cmVx
LCBsb2NhdGlvbik7Cit9CisKIHN0YXRpYyBpbnQgdmZzX2lvX3VyaW5nX2ZzeW5jX3JlY3Yo
c3RydWN0IHRldmVudF9yZXEgKnJlcSwKIAkJCSAgICAgIHN0cnVjdCB2ZnNfYWlvX3N0YXRl
ICp2ZnNfYWlvX3N0YXRlKQogewotLSAKMi4xNy4xCgoKRnJvbSAwMDFjMDMzZWEzOTk4N2Ez
Yzc1NGY5OTYwZTg5ZDE1NTY2MWU2Yzg5IE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9t
OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBGcmksIDggTWF5
IDIwMjAgMTA6NTI6NTIgKzAyMDAKU3ViamVjdDogW1BBVENIIDE1LzI5XSB2ZnNfaW9fdXJp
bmc6IG1vdmUgZXJyb3IgaGFuZGxpbmcgb3V0IG9mCiB2ZnNfaW9fdXJpbmdfcHJlYWRfcmVj
digpCgpXZSBzaG91bGQgZG8gdGhhdCBhcyBlYXJseSBhcyBwb3NzaWJsZSBhbmQgdGhhdCdz
IGluCnZmc19pb191cmluZ19wcmVhZF9jb21wbGV0aW9uKCkuCgpCVUc6IGh0dHBzOi8vYnVn
emlsbGEuc2FtYmEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2MQoKU2lnbmVkLW9mZi1ieTog
U3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBzb3VyY2UzL21vZHVs
ZXMvdmZzX2lvX3VyaW5nLmMgfCAyNiArKysrKysrKysrKysrKysrKy0tLS0tLS0tLQogMSBm
aWxlIGNoYW5nZWQsIDE3IGluc2VydGlvbnMoKyksIDkgZGVsZXRpb25zKC0pCgpkaWZmIC0t
Z2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jIGIvc291cmNlMy9tb2R1bGVz
L3Zmc19pb191cmluZy5jCmluZGV4IGFiZGQ0ZDE2ZTlmOC4uMGQ4ZTE4MzMwMDkyIDEwMDY0
NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKKysrIGIvc291cmNlMy9t
b2R1bGVzL3Zmc19pb191cmluZy5jCkBAIC0yOTcsNiArMjk3LDcgQEAgc3RhdGljIHZvaWQg
dmZzX2lvX3VyaW5nX2ZkX2hhbmRsZXIoc3RydWN0IHRldmVudF9jb250ZXh0ICpldiwKIHN0
cnVjdCB2ZnNfaW9fdXJpbmdfcHJlYWRfc3RhdGUgewogCXN0cnVjdCB2ZnNfaW9fdXJpbmdf
cmVxdWVzdCB1cjsKIAlzdHJ1Y3QgaW92ZWMgaW92OworCXNpemVfdCBucmVhZDsKIH07CiAK
IHN0YXRpYyB2b2lkIHZmc19pb191cmluZ19wcmVhZF9jb21wbGV0aW9uKHN0cnVjdCB2ZnNf
aW9fdXJpbmdfcmVxdWVzdCAqY3VyLApAQCAtMzUzLDEyICszNTQsMjMgQEAgc3RhdGljIHN0
cnVjdCB0ZXZlbnRfcmVxICp2ZnNfaW9fdXJpbmdfcHJlYWRfc2VuZChzdHJ1Y3QgdmZzX2hh
bmRsZV9zdHJ1Y3QgKmhhbmQKIHN0YXRpYyB2b2lkIHZmc19pb191cmluZ19wcmVhZF9jb21w
bGV0aW9uKHN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAogCQkJCQkgIGNvbnN0
IGNoYXIgKmxvY2F0aW9uKQogeworCXN0cnVjdCB2ZnNfaW9fdXJpbmdfcHJlYWRfc3RhdGUg
KnN0YXRlID0gdGV2ZW50X3JlcV9kYXRhKAorCQljdXItPnJlcSwgc3RydWN0IHZmc19pb191
cmluZ19wcmVhZF9zdGF0ZSk7CisKIAkvKgogCSAqIFdlIHJlbHkgb24gYmVpbmcgaW5zaWRl
IHRoZSBfc2VuZCgpIGZ1bmN0aW9uCiAJICogb3IgdGV2ZW50X3JlcV9kZWZlcl9jYWxsYmFj
aygpIGJlaW5nIGNhbGxlZAogCSAqIGFscmVhZHkuCiAJICovCi0JX3RldmVudF9yZXFfZG9u
ZShjdXItPnJlcSwgbG9jYXRpb24pOworCisJaWYgKGN1ci0+Y3FlLnJlcyA8IDApIHsKKwkJ
aW50IGVyciA9IC1jdXItPmNxZS5yZXM7CisJCV90ZXZlbnRfcmVxX2Vycm9yKGN1ci0+cmVx
LCBlcnIsIGxvY2F0aW9uKTsKKwkJcmV0dXJuOworCX0KKworCXN0YXRlLT5ucmVhZCA9IHN0
YXRlLT51ci5jcWUucmVzOworCXRldmVudF9yZXFfZG9uZShjdXItPnJlcSk7CiB9CiAKIHN0
YXRpYyBzc2l6ZV90IHZmc19pb191cmluZ19wcmVhZF9yZWN2KHN0cnVjdCB0ZXZlbnRfcmVx
ICpyZXEsCkBAIC0zNjYsMjMgKzM3OCwxOSBAQCBzdGF0aWMgc3NpemVfdCB2ZnNfaW9fdXJp
bmdfcHJlYWRfcmVjdihzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxLAogewogCXN0cnVjdCB2ZnNf
aW9fdXJpbmdfcHJlYWRfc3RhdGUgKnN0YXRlID0gdGV2ZW50X3JlcV9kYXRhKAogCQlyZXEs
IHN0cnVjdCB2ZnNfaW9fdXJpbmdfcHJlYWRfc3RhdGUpOwotCWludCByZXQ7CisJc3NpemVf
dCByZXQ7CiAKIAlTTUJQUk9GSUxFX0JZVEVTX0FTWU5DX0VORChzdGF0ZS0+dXIucHJvZmls
ZV9ieXRlcyk7CiAJdmZzX2Fpb19zdGF0ZS0+ZHVyYXRpb24gPSBuc2VjX3RpbWVfZGlmZigm
c3RhdGUtPnVyLmVuZF90aW1lLAogCQkJCQkJICZzdGF0ZS0+dXIuc3RhcnRfdGltZSk7CiAK
IAlpZiAodGV2ZW50X3JlcV9pc191bml4X2Vycm9yKHJlcSwgJnZmc19haW9fc3RhdGUtPmVy
cm9yKSkgeworCQl0ZXZlbnRfcmVxX3JlY2VpdmVkKHJlcSk7CiAJCXJldHVybiAtMTsKIAl9
CiAKLQlpZiAoc3RhdGUtPnVyLmNxZS5yZXMgPCAwKSB7Ci0JCXZmc19haW9fc3RhdGUtPmVy
cm9yID0gLXN0YXRlLT51ci5jcWUucmVzOwotCQlyZXQgPSAtMTsKLQl9IGVsc2UgewotCQl2
ZnNfYWlvX3N0YXRlLT5lcnJvciA9IDA7Ci0JCXJldCA9IHN0YXRlLT51ci5jcWUucmVzOwot
CX0KKwl2ZnNfYWlvX3N0YXRlLT5lcnJvciA9IDA7CisJcmV0ID0gc3RhdGUtPm5yZWFkOwog
CiAJdGV2ZW50X3JlcV9yZWNlaXZlZChyZXEpOwogCXJldHVybiByZXQ7Ci0tIAoyLjE3LjEK
CgpGcm9tIGVhYjhmMTdlZmI2N2U0YjY3MmM1ZjUxMDM0NGZjNTRjM2MxNzVlNDMgTW9uIFNl
cCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1i
YS5vcmc+CkRhdGU6IEZyaSwgOCBNYXkgMjAyMCAxMDo1Mjo1MiArMDIwMApTdWJqZWN0OiBb
UEFUQ0ggMTYvMjldIHZmc19pb191cmluZzogbW92ZSBlcnJvciBoYW5kbGluZyBvdXQgb2YK
IHZmc19pb191cmluZ19wd3JpdGVfcmVjdigpCgpXZSBzaG91bGQgZG8gdGhhdCBhcyBlYXJs
eSBhcyBwb3NzaWJsZSBhbmQgdGhhdCdzIGluCnZmc19pb191cmluZ19wd3JpdGVfY29tcGxl
dGlvbigpLgoKQlVHOiBodHRwczovL2J1Z3ppbGxhLnNhbWJhLm9yZy9zaG93X2J1Zy5jZ2k/
aWQ9MTQzNjEKClNpZ25lZC1vZmYtYnk6IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1i
YS5vcmc+Ci0tLQogc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jIHwgMjYgKysrKysr
KysrKysrKysrKystLS0tLS0tLS0KIDEgZmlsZSBjaGFuZ2VkLCAxNyBpbnNlcnRpb25zKCsp
LCA5IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9f
dXJpbmcuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwppbmRleCAwZDhlMTgz
MzAwOTIuLmE4ZGEzNDFlN2I3YyAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19p
b191cmluZy5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwpAQCAtMzk5
LDYgKzM5OSw3IEBAIHN0YXRpYyBzc2l6ZV90IHZmc19pb191cmluZ19wcmVhZF9yZWN2KHN0
cnVjdCB0ZXZlbnRfcmVxICpyZXEsCiBzdHJ1Y3QgdmZzX2lvX3VyaW5nX3B3cml0ZV9zdGF0
ZSB7CiAJc3RydWN0IHZmc19pb191cmluZ19yZXF1ZXN0IHVyOwogCXN0cnVjdCBpb3ZlYyBp
b3Y7CisJc2l6ZV90IG53cml0dGVuOwogfTsKIAogc3RhdGljIHZvaWQgdmZzX2lvX3VyaW5n
X3B3cml0ZV9jb21wbGV0aW9uKHN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLApA
QCAtNDU1LDEyICs0NTYsMjMgQEAgc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2ZnNfaW9f
dXJpbmdfcHdyaXRlX3NlbmQoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW4KIHN0YXRp
YyB2b2lkIHZmc19pb191cmluZ19wd3JpdGVfY29tcGxldGlvbihzdHJ1Y3QgdmZzX2lvX3Vy
aW5nX3JlcXVlc3QgKmN1ciwKIAkJCQkJICAgY29uc3QgY2hhciAqbG9jYXRpb24pCiB7CisJ
c3RydWN0IHZmc19pb191cmluZ19wd3JpdGVfc3RhdGUgKnN0YXRlID0gdGV2ZW50X3JlcV9k
YXRhKAorCQljdXItPnJlcSwgc3RydWN0IHZmc19pb191cmluZ19wd3JpdGVfc3RhdGUpOwor
CiAJLyoKIAkgKiBXZSByZWx5IG9uIGJlaW5nIGluc2lkZSB0aGUgX3NlbmQoKSBmdW5jdGlv
bgogCSAqIG9yIHRldmVudF9yZXFfZGVmZXJfY2FsbGJhY2soKSBiZWluZyBjYWxsZWQKIAkg
KiBhbHJlYWR5LgogCSAqLwotCV90ZXZlbnRfcmVxX2RvbmUoY3VyLT5yZXEsIGxvY2F0aW9u
KTsKKworCWlmIChjdXItPmNxZS5yZXMgPCAwKSB7CisJCWludCBlcnIgPSAtY3VyLT5jcWUu
cmVzOworCQlfdGV2ZW50X3JlcV9lcnJvcihjdXItPnJlcSwgZXJyLCBsb2NhdGlvbik7CisJ
CXJldHVybjsKKwl9CisKKwlzdGF0ZS0+bndyaXR0ZW4gPSBzdGF0ZS0+dXIuY3FlLnJlczsK
Kwl0ZXZlbnRfcmVxX2RvbmUoY3VyLT5yZXEpOwogfQogCiBzdGF0aWMgc3NpemVfdCB2ZnNf
aW9fdXJpbmdfcHdyaXRlX3JlY3Yoc3RydWN0IHRldmVudF9yZXEgKnJlcSwKQEAgLTQ2OCwy
MyArNDgwLDE5IEBAIHN0YXRpYyBzc2l6ZV90IHZmc19pb191cmluZ19wd3JpdGVfcmVjdihz
dHJ1Y3QgdGV2ZW50X3JlcSAqcmVxLAogewogCXN0cnVjdCB2ZnNfaW9fdXJpbmdfcHdyaXRl
X3N0YXRlICpzdGF0ZSA9IHRldmVudF9yZXFfZGF0YSgKIAkJcmVxLCBzdHJ1Y3QgdmZzX2lv
X3VyaW5nX3B3cml0ZV9zdGF0ZSk7Ci0JaW50IHJldDsKKwlzc2l6ZV90IHJldDsKIAogCVNN
QlBST0ZJTEVfQllURVNfQVNZTkNfRU5EKHN0YXRlLT51ci5wcm9maWxlX2J5dGVzKTsKIAl2
ZnNfYWlvX3N0YXRlLT5kdXJhdGlvbiA9IG5zZWNfdGltZV9kaWZmKCZzdGF0ZS0+dXIuZW5k
X3RpbWUsCiAJCQkJCQkgJnN0YXRlLT51ci5zdGFydF90aW1lKTsKIAogCWlmICh0ZXZlbnRf
cmVxX2lzX3VuaXhfZXJyb3IocmVxLCAmdmZzX2Fpb19zdGF0ZS0+ZXJyb3IpKSB7CisJCXRl
dmVudF9yZXFfcmVjZWl2ZWQocmVxKTsKIAkJcmV0dXJuIC0xOwogCX0KIAotCWlmIChzdGF0
ZS0+dXIuY3FlLnJlcyA8IDApIHsKLQkJdmZzX2Fpb19zdGF0ZS0+ZXJyb3IgPSAtc3RhdGUt
PnVyLmNxZS5yZXM7Ci0JCXJldCA9IC0xOwotCX0gZWxzZSB7Ci0JCXZmc19haW9fc3RhdGUt
PmVycm9yID0gMDsKLQkJcmV0ID0gc3RhdGUtPnVyLmNxZS5yZXM7Ci0JfQorCXZmc19haW9f
c3RhdGUtPmVycm9yID0gMDsKKwlyZXQgPSBzdGF0ZS0+bndyaXR0ZW47CiAKIAl0ZXZlbnRf
cmVxX3JlY2VpdmVkKHJlcSk7CiAJcmV0dXJuIHJldDsKLS0gCjIuMTcuMQoKCkZyb20gNTI2
ODAyNjA3NmViYTQ4ZGY4YzhiZGU3ZjUzMjY4NDIwNWM2NTg3NCBNb24gU2VwIDE3IDAwOjAw
OjAwIDIwMDEKRnJvbTogU3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KRGF0
ZTogRnJpLCA4IE1heSAyMDIwIDEwOjUyOjUyICswMjAwClN1YmplY3Q6IFtQQVRDSCAxNy8y
OV0gdmZzX2lvX3VyaW5nOiBtb3ZlIGVycm9yIGhhbmRsaW5nIG91dCBvZgogdmZzX2lvX3Vy
aW5nX2ZzeW5jX3JlY3YoKQoKV2Ugc2hvdWxkIGRvIHRoYXQgYXMgZWFybHkgYXMgcG9zc2li
bGUgYW5kIHRoYXQncyBpbgp2ZnNfaW9fdXJpbmdfZnN5bmNfY29tcGxldGlvbigpLgoKQlVH
OiBodHRwczovL2J1Z3ppbGxhLnNhbWJhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQzNjEKClNp
Z25lZC1vZmYtYnk6IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+Ci0tLQog
c291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jIHwgMjEgKysrKysrKysrKystLS0tLS0t
LS0tCiAxIGZpbGUgY2hhbmdlZCwgMTEgaW5zZXJ0aW9ucygrKSwgMTAgZGVsZXRpb25zKC0p
CgpkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jIGIvc291cmNl
My9tb2R1bGVzL3Zmc19pb191cmluZy5jCmluZGV4IGE4ZGEzNDFlN2I3Yy4uMGY1NjBjOTVi
NjdkIDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKKysrIGIv
c291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCkBAIC01NTYsNyArNTU2LDE0IEBAIHN0
YXRpYyB2b2lkIHZmc19pb191cmluZ19mc3luY19jb21wbGV0aW9uKHN0cnVjdCB2ZnNfaW9f
dXJpbmdfcmVxdWVzdCAqY3VyLAogCSAqIG9yIHRldmVudF9yZXFfZGVmZXJfY2FsbGJhY2so
KSBiZWluZyBjYWxsZWQKIAkgKiBhbHJlYWR5LgogCSAqLwotCV90ZXZlbnRfcmVxX2RvbmUo
Y3VyLT5yZXEsIGxvY2F0aW9uKTsKKworCWlmIChjdXItPmNxZS5yZXMgPCAwKSB7CisJCWlu
dCBlcnIgPSAtY3VyLT5jcWUucmVzOworCQlfdGV2ZW50X3JlcV9lcnJvcihjdXItPnJlcSwg
ZXJyLCBsb2NhdGlvbik7CisJCXJldHVybjsKKwl9CisKKwl0ZXZlbnRfcmVxX2RvbmUoY3Vy
LT5yZXEpOwogfQogCiBzdGF0aWMgaW50IHZmc19pb191cmluZ19mc3luY19yZWN2KHN0cnVj
dCB0ZXZlbnRfcmVxICpyZXEsCkBAIC01NjQsMjYgKzU3MSwyMCBAQCBzdGF0aWMgaW50IHZm
c19pb191cmluZ19mc3luY19yZWN2KHN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsCiB7CiAJc3Ry
dWN0IHZmc19pb191cmluZ19mc3luY19zdGF0ZSAqc3RhdGUgPSB0ZXZlbnRfcmVxX2RhdGEo
CiAJCXJlcSwgc3RydWN0IHZmc19pb191cmluZ19mc3luY19zdGF0ZSk7Ci0JaW50IHJldDsK
IAogCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfRU5EKHN0YXRlLT51ci5wcm9maWxlX2J5dGVz
KTsKIAl2ZnNfYWlvX3N0YXRlLT5kdXJhdGlvbiA9IG5zZWNfdGltZV9kaWZmKCZzdGF0ZS0+
dXIuZW5kX3RpbWUsCiAJCQkJCQkgJnN0YXRlLT51ci5zdGFydF90aW1lKTsKIAogCWlmICh0
ZXZlbnRfcmVxX2lzX3VuaXhfZXJyb3IocmVxLCAmdmZzX2Fpb19zdGF0ZS0+ZXJyb3IpKSB7
CisJCXRldmVudF9yZXFfcmVjZWl2ZWQocmVxKTsKIAkJcmV0dXJuIC0xOwogCX0KIAotCWlm
IChzdGF0ZS0+dXIuY3FlLnJlcyA8IDApIHsKLQkJdmZzX2Fpb19zdGF0ZS0+ZXJyb3IgPSAt
c3RhdGUtPnVyLmNxZS5yZXM7Ci0JCXJldCA9IC0xOwotCX0gZWxzZSB7Ci0JCXZmc19haW9f
c3RhdGUtPmVycm9yID0gMDsKLQkJcmV0ID0gc3RhdGUtPnVyLmNxZS5yZXM7Ci0JfQorCXZm
c19haW9fc3RhdGUtPmVycm9yID0gMDsKIAogCXRldmVudF9yZXFfcmVjZWl2ZWQocmVxKTsK
LQlyZXR1cm4gcmV0OworCXJldHVybiAwOwogfQogCiBzdGF0aWMgc3RydWN0IHZmc19mbl9w
b2ludGVycyB2ZnNfaW9fdXJpbmdfZm5zID0gewotLSAKMi4xNy4xCgoKRnJvbSAzMTA2YTUy
NDA2MTA4NDA4NDkyYjA2M2JhNTcxNGFmNWZlOGE0OWZlIE1vbiBTZXAgMTcgMDA6MDA6MDAg
MjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBG
cmksIDggTWF5IDIwMjAgMTM6MTc6MDUgKzAyMDAKU3ViamVjdDogW1BBVENIIDE4LzI5XSB2
ZnNfaW9fdXJpbmc6IG1ha2UgdXNlIG9mIHN5c192YWxpZF9pb19yYW5nZSgpIGluCiB2ZnNf
aW9fdXJpbmdfcHJlYWRfc2VuZCgpCgpUaGlzIG1ha2VzIHRoZSBmb2xsb3cgdXAgY29tbWl0
cyBlYXNpZXIgYXMgd2UgZG9uJ3QgaGF2ZSB0byBjYXJlCmFib3V0IG92ZXJmbG93cy4KCkJV
RzogaHR0cHM6Ly9idWd6aWxsYS5zYW1iYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzYxCgpT
aWduZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0K
IHNvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYyB8IDggKysrKysrKysKIDEgZmlsZSBj
aGFuZ2VkLCA4IGluc2VydGlvbnMoKykKCmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMv
dmZzX2lvX3VyaW5nLmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKaW5kZXgg
MGY1NjBjOTViNjdkLi5jNzU2NWI4YzM5ZGUgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9kdWxl
cy92ZnNfaW9fdXJpbmcuYworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMK
QEAgLTI1LDYgKzI1LDcgQEAKICNpbmNsdWRlICJzbWJkL3NtYmQuaCIKICNpbmNsdWRlICJz
bWJkL2dsb2JhbHMuaCIKICNpbmNsdWRlICJsaWIvdXRpbC90ZXZlbnRfdW5peC5oIgorI2lu
Y2x1ZGUgImxpYi91dGlsL3N5c19ydy5oIgogI2luY2x1ZGUgInNtYnByb2ZpbGUuaCIKICNp
bmNsdWRlIDxsaWJ1cmluZy5oPgogCkBAIC0zMTMsNiArMzE0LDcgQEAgc3RhdGljIHN0cnVj
dCB0ZXZlbnRfcmVxICp2ZnNfaW9fdXJpbmdfcHJlYWRfc2VuZChzdHJ1Y3QgdmZzX2hhbmRs
ZV9zdHJ1Y3QgKmhhbmQKIAlzdHJ1Y3QgdGV2ZW50X3JlcSAqcmVxID0gTlVMTDsKIAlzdHJ1
Y3QgdmZzX2lvX3VyaW5nX3ByZWFkX3N0YXRlICpzdGF0ZSA9IE5VTEw7CiAJc3RydWN0IHZm
c19pb191cmluZ19jb25maWcgKmNvbmZpZyA9IE5VTEw7CisJYm9vbCBvazsKIAogCVNNQl9W
RlNfSEFORExFX0dFVF9EQVRBKGhhbmRsZSwgY29uZmlnLAogCQkJCXN0cnVjdCB2ZnNfaW9f
dXJpbmdfY29uZmlnLApAQCAtMzMxLDYgKzMzMywxMiBAQCBzdGF0aWMgc3RydWN0IHRldmVu
dF9yZXEgKnZmc19pb191cmluZ19wcmVhZF9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZAogCQkJCSAgICAgc3RhdGUtPnVyLnByb2ZpbGVfYnl0ZXMsIG4pOwogCVNNQlBS
T0ZJTEVfQllURVNfQVNZTkNfU0VUX0lETEUoc3RhdGUtPnVyLnByb2ZpbGVfYnl0ZXMpOwog
CisJb2sgPSBzeXNfdmFsaWRfaW9fcmFuZ2Uob2Zmc2V0LCBuKTsKKwlpZiAoIW9rKSB7CisJ
CXRldmVudF9yZXFfZXJyb3IocmVxLCBFSU5WQUwpOworCQlyZXR1cm4gdGV2ZW50X3JlcV9w
b3N0KHJlcSwgZXYpOworCX0KKwogCXN0YXRlLT5pb3YuaW92X2Jhc2UgPSAodm9pZCAqKWRh
dGE7CiAJc3RhdGUtPmlvdi5pb3ZfbGVuID0gbjsKIAlpb191cmluZ19wcmVwX3JlYWR2KCZz
dGF0ZS0+dXIuc3FlLAotLSAKMi4xNy4xCgoKRnJvbSBmMjYxYWMwY2QyY2JmOWZkZjA3OTE5
YmU3OTJmODU4YWQ1OTNhZTMxIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVm
YW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBGcmksIDggTWF5IDIwMjAg
MTM6MTc6MDUgKzAyMDAKU3ViamVjdDogW1BBVENIIDE5LzI5XSB2ZnNfaW9fdXJpbmc6IG1h
a2UgdXNlIG9mIHN5c192YWxpZF9pb19yYW5nZSgpIGluCiB2ZnNfaW9fdXJpbmdfcHdyaXRl
X3NlbmQoKQoKVGhpcyBtYWtlcyB0aGUgZm9sbG93IHVwIGNvbW1pdHMgZWFzaWVyIGFzIHdl
IGRvbid0IGhhdmUgdG8gY2FyZQphYm91dCBvdmVyZmxvd3MuCgpCVUc6IGh0dHBzOi8vYnVn
emlsbGEuc2FtYmEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2MQoKU2lnbmVkLW9mZi1ieTog
U3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBzb3VyY2UzL21vZHVs
ZXMvdmZzX2lvX3VyaW5nLmMgfCA3ICsrKysrKysKIDEgZmlsZSBjaGFuZ2VkLCA3IGluc2Vy
dGlvbnMoKykKCmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMg
Yi9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKaW5kZXggYzc1NjViOGMzOWRlLi5l
ZTIzNDQ5YzYzYzYgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcu
YworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKQEAgLTQyMyw2ICs0MjMs
NyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmluZ19wd3JpdGVfc2Vu
ZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbgogCXN0cnVjdCB0ZXZlbnRfcmVxICpy
ZXEgPSBOVUxMOwogCXN0cnVjdCB2ZnNfaW9fdXJpbmdfcHdyaXRlX3N0YXRlICpzdGF0ZSA9
IE5VTEw7CiAJc3RydWN0IHZmc19pb191cmluZ19jb25maWcgKmNvbmZpZyA9IE5VTEw7CisJ
Ym9vbCBvazsKIAogCVNNQl9WRlNfSEFORExFX0dFVF9EQVRBKGhhbmRsZSwgY29uZmlnLAog
CQkJCXN0cnVjdCB2ZnNfaW9fdXJpbmdfY29uZmlnLApAQCAtNDQxLDYgKzQ0MiwxMiBAQCBz
dGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmluZ19wd3JpdGVfc2VuZChzdHJ1
Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbgogCQkJCSAgICAgc3RhdGUtPnVyLnByb2ZpbGVf
Ynl0ZXMsIG4pOwogCVNNQlBST0ZJTEVfQllURVNfQVNZTkNfU0VUX0lETEUoc3RhdGUtPnVy
LnByb2ZpbGVfYnl0ZXMpOwogCisJb2sgPSBzeXNfdmFsaWRfaW9fcmFuZ2Uob2Zmc2V0LCBu
KTsKKwlpZiAoIW9rKSB7CisJCXRldmVudF9yZXFfZXJyb3IocmVxLCBFSU5WQUwpOworCQly
ZXR1cm4gdGV2ZW50X3JlcV9wb3N0KHJlcSwgZXYpOworCX0KKwogCXN0YXRlLT5pb3YuaW92
X2Jhc2UgPSBkaXNjYXJkX2NvbnN0KGRhdGEpOwogCXN0YXRlLT5pb3YuaW92X2xlbiA9IG47
CiAJaW9fdXJpbmdfcHJlcF93cml0ZXYoJnN0YXRlLT51ci5zcWUsCi0tIAoyLjE3LjEKCgpG
cm9tIGNlNDY3NDAwZjQwOThkMGVkYmVlOTUzNGE1NjY3YzBiOTI0MjJlOGYgTW9uIFNlcCAx
NyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5v
cmc+CkRhdGU6IEZyaSwgOCBNYXkgMjAyMCAyMToyOTo1MyArMDIwMApTdWJqZWN0OiBbUEFU
Q0ggMjAvMjldIHZmc19pb191cmluZzogYXZvaWQgc3RhY2sgcmVjdXJzaW9uIG9mCiB2ZnNf
aW9fdXJpbmdfcXVldWVfcnVuKCkKCkluc3RlYWQgd2UgcmVtZW1iZXIgaWYgcmVjdXJzaW9u
IHdhcyB0cmlnZ2VyZWQgYW5kIGp1bXAgdG8KdGhlIHN0YXJ0IG9mIHRoZSBmdW5jdGlvbiBh
Z2FpbiBmcm9tIHRoZSBlbmQuCgpUaGlzIHNob3VsZCBtYWtlIGl0IHNhZmUgdG8gYmUgY2Fs
bGVkIGZyb20gdGhlIGNvbXBsZXRpb25fZm4oKS4KCkJVRzogaHR0cHM6Ly9idWd6aWxsYS5z
YW1iYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzYxCgpTaWduZWQtb2ZmLWJ5OiBTdGVmYW4g
TWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0KIHNvdXJjZTMvbW9kdWxlcy92ZnNf
aW9fdXJpbmcuYyB8IDIwICsrKysrKysrKysrKysrKysrKystCiAxIGZpbGUgY2hhbmdlZCwg
MTkgaW5zZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMv
bW9kdWxlcy92ZnNfaW9fdXJpbmcuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcu
YwppbmRleCBlZTIzNDQ5YzYzYzYuLmRmNDFjNzRhNzk1MyAxMDA2NDQKLS0tIGEvc291cmNl
My9tb2R1bGVzL3Zmc19pb191cmluZy5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9f
dXJpbmcuYwpAQCAtMzQsNiArMzQsOCBAQCBzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3Q7
CiBzdHJ1Y3QgdmZzX2lvX3VyaW5nX2NvbmZpZyB7CiAJc3RydWN0IGlvX3VyaW5nIHVyaW5n
OwogCXN0cnVjdCB0ZXZlbnRfZmQgKmZkZTsKKwlib29sIGJ1c3k7CisJYm9vbCBuZWVkX3Jl
dHJ5OwogCXN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqcXVldWU7CiAJc3RydWN0IHZm
c19pb191cmluZ19yZXF1ZXN0ICpwZW5kaW5nOwogfTsKQEAgLTIyMiw3ICsyMjQsNyBAQCBz
dGF0aWMgaW50IHZmc19pb191cmluZ19jb25uZWN0KHZmc19oYW5kbGVfc3RydWN0ICpoYW5k
bGUsIGNvbnN0IGNoYXIgKnNlcnZpY2UsCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyB2b2lk
IHZmc19pb191cmluZ19xdWV1ZV9ydW4oc3RydWN0IHZmc19pb191cmluZ19jb25maWcgKmNv
bmZpZykKK3N0YXRpYyB2b2lkIF92ZnNfaW9fdXJpbmdfcXVldWVfcnVuKHN0cnVjdCB2ZnNf
aW9fdXJpbmdfY29uZmlnICpjb25maWcpCiB7CiAJc3RydWN0IHZmc19pb191cmluZ19yZXF1
ZXN0ICpjdXIgPSBOVUxMLCAqbmV4dCA9IE5VTEw7CiAJc3RydWN0IGlvX3VyaW5nX2NxZSAq
Y3FlID0gTlVMTDsKQEAgLTI4MCw2ICsyODIsMjIgQEAgc3RhdGljIHZvaWQgdmZzX2lvX3Vy
aW5nX3F1ZXVlX3J1bihzdHJ1Y3QgdmZzX2lvX3VyaW5nX2NvbmZpZyAqY29uZmlnKQogCWlv
X3VyaW5nX2NxX2FkdmFuY2UoJmNvbmZpZy0+dXJpbmcsIG5yKTsKIH0KIAorc3RhdGljIHZv
aWQgdmZzX2lvX3VyaW5nX3F1ZXVlX3J1bihzdHJ1Y3QgdmZzX2lvX3VyaW5nX2NvbmZpZyAq
Y29uZmlnKQoreworCWlmIChjb25maWctPmJ1c3kpIHsKKwkJY29uZmlnLT5uZWVkX3JldHJ5
ID0gdHJ1ZTsKKwkJcmV0dXJuOworCX0KKwljb25maWctPmJ1c3kgPSB0cnVlOworCisJZG8g
eworCQljb25maWctPm5lZWRfcmV0cnkgPSBmYWxzZTsKKwkJX3Zmc19pb191cmluZ19xdWV1
ZV9ydW4oY29uZmlnKTsKKwl9IHdoaWxlIChjb25maWctPm5lZWRfcmV0cnkpOworCisJY29u
ZmlnLT5idXN5ID0gZmFsc2U7Cit9CisKIHN0YXRpYyB2b2lkIHZmc19pb191cmluZ19mZF9o
YW5kbGVyKHN0cnVjdCB0ZXZlbnRfY29udGV4dCAqZXYsCiAJCQkJICAgIHN0cnVjdCB0ZXZl
bnRfZmQgKmZkZSwKIAkJCQkgICAgdWludDE2X3QgZmxhZ3MsCi0tIAoyLjE3LjEKCgpGcm9t
IGFiZmI2YTViMGU5YTllODdmMDMyOGRlNzk3OGMxMTY2Mzc0NDQwMGEgTW9uIFNlcCAxNyAw
MDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+
CkRhdGU6IEZyaSwgOCBNYXkgMjAyMCAxMToxNzo1MSArMDIwMApTdWJqZWN0OiBbUEFUQ0gg
MjEvMjldIHZmc19pb191cmluZzogc3BsaXQgb3V0IGEgdmZzX2lvX3VyaW5nX3JlcXVlc3Rf
c3VibWl0KCkKIGZ1bmN0aW9uCgpCVUc6IGh0dHBzOi8vYnVnemlsbGEuc2FtYmEub3JnL3No
b3dfYnVnLmNnaT9pZD0xNDM2MQoKU2lnbmVkLW9mZi1ieTogU3RlZmFuIE1ldHptYWNoZXIg
PG1ldHplQHNhbWJhLm9yZz4KLS0tCiBzb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMg
fCAyOSArKysrKysrKysrKysrKy0tLS0tLS0tLS0tLS0tLQogMSBmaWxlIGNoYW5nZWQsIDE0
IGluc2VydGlvbnMoKyksIDE1IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMv
bW9kdWxlcy92ZnNfaW9fdXJpbmcuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcu
YwppbmRleCBkZjQxYzc0YTc5NTMuLjdkYjMyNzYwZDk3NiAxMDA2NDQKLS0tIGEvc291cmNl
My9tb2R1bGVzL3Zmc19pb191cmluZy5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9f
dXJpbmcuYwpAQCAtMjk4LDYgKzI5OCwxNyBAQCBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdf
cXVldWVfcnVuKHN0cnVjdCB2ZnNfaW9fdXJpbmdfY29uZmlnICpjb25maWcpCiAJY29uZmln
LT5idXN5ID0gZmFsc2U7CiB9CiAKK3N0YXRpYyB2b2lkIHZmc19pb191cmluZ19yZXF1ZXN0
X3N1Ym1pdChzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3QgKmN1cikKK3sKKwlzdHJ1Y3Qg
dmZzX2lvX3VyaW5nX2NvbmZpZyAqY29uZmlnID0gY3VyLT5jb25maWc7CisKKwlpb191cmlu
Z19zcWVfc2V0X2RhdGEoJmN1ci0+c3FlLCBjdXIpOworCURMSVNUX0FERF9FTkQoY29uZmln
LT5xdWV1ZSwgY3VyKTsKKwljdXItPmxpc3RfaGVhZCA9ICZjb25maWctPnF1ZXVlOworCisJ
dmZzX2lvX3VyaW5nX3F1ZXVlX3J1bihjb25maWcpOworfQorCiBzdGF0aWMgdm9pZCB2ZnNf
aW9fdXJpbmdfZmRfaGFuZGxlcihzdHJ1Y3QgdGV2ZW50X2NvbnRleHQgKmV2LAogCQkJCSAg
ICBzdHJ1Y3QgdGV2ZW50X2ZkICpmZGUsCiAJCQkJICAgIHVpbnQxNl90IGZsYWdzLApAQCAt
MzYzLDExICszNzQsNyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmlu
Z19wcmVhZF9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZAogCQkJICAgIGZz
cC0+ZmgtPmZkLAogCQkJICAgICZzdGF0ZS0+aW92LCAxLAogCQkJICAgIG9mZnNldCk7Ci0J
aW9fdXJpbmdfc3FlX3NldF9kYXRhKCZzdGF0ZS0+dXIuc3FlLCAmc3RhdGUtPnVyKTsKLQlE
TElTVF9BRERfRU5EKGNvbmZpZy0+cXVldWUsICZzdGF0ZS0+dXIpOwotCXN0YXRlLT51ci5s
aXN0X2hlYWQgPSAmY29uZmlnLT5xdWV1ZTsKLQotCXZmc19pb191cmluZ19xdWV1ZV9ydW4o
Y29uZmlnKTsKKwl2ZnNfaW9fdXJpbmdfcmVxdWVzdF9zdWJtaXQoJnN0YXRlLT51cik7CiAK
IAlpZiAoIXRldmVudF9yZXFfaXNfaW5fcHJvZ3Jlc3MocmVxKSkgewogCQlyZXR1cm4gdGV2
ZW50X3JlcV9wb3N0KHJlcSwgZXYpOwpAQCAtNDcyLDExICs0NzksNyBAQCBzdGF0aWMgc3Ry
dWN0IHRldmVudF9yZXEgKnZmc19pb191cmluZ19wd3JpdGVfc2VuZChzdHJ1Y3QgdmZzX2hh
bmRsZV9zdHJ1Y3QgKmhhbgogCQkJICAgICBmc3AtPmZoLT5mZCwKIAkJCSAgICAgJnN0YXRl
LT5pb3YsIDEsCiAJCQkgICAgIG9mZnNldCk7Ci0JaW9fdXJpbmdfc3FlX3NldF9kYXRhKCZz
dGF0ZS0+dXIuc3FlLCAmc3RhdGUtPnVyKTsKLQlETElTVF9BRERfRU5EKGNvbmZpZy0+cXVl
dWUsICZzdGF0ZS0+dXIpOwotCXN0YXRlLT51ci5saXN0X2hlYWQgPSAmY29uZmlnLT5xdWV1
ZTsKLQotCXZmc19pb191cmluZ19xdWV1ZV9ydW4oY29uZmlnKTsKKwl2ZnNfaW9fdXJpbmdf
cmVxdWVzdF9zdWJtaXQoJnN0YXRlLT51cik7CiAKIAlpZiAoIXRldmVudF9yZXFfaXNfaW5f
cHJvZ3Jlc3MocmVxKSkgewogCQlyZXR1cm4gdGV2ZW50X3JlcV9wb3N0KHJlcSwgZXYpOwpA
QCAtNTY3LDExICs1NzAsNyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191
cmluZ19mc3luY19zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZAogCWlvX3Vy
aW5nX3ByZXBfZnN5bmMoJnN0YXRlLT51ci5zcWUsCiAJCQkgICAgZnNwLT5maC0+ZmQsCiAJ
CQkgICAgMCk7IC8qIGZzeW5jX2ZsYWdzICovCi0JaW9fdXJpbmdfc3FlX3NldF9kYXRhKCZz
dGF0ZS0+dXIuc3FlLCAmc3RhdGUtPnVyKTsKLQlETElTVF9BRERfRU5EKGNvbmZpZy0+cXVl
dWUsICZzdGF0ZS0+dXIpOwotCXN0YXRlLT51ci5saXN0X2hlYWQgPSAmY29uZmlnLT5xdWV1
ZTsKLQotCXZmc19pb191cmluZ19xdWV1ZV9ydW4oY29uZmlnKTsKKwl2ZnNfaW9fdXJpbmdf
cmVxdWVzdF9zdWJtaXQoJnN0YXRlLT51cik7CiAKIAlpZiAoIXRldmVudF9yZXFfaXNfaW5f
cHJvZ3Jlc3MocmVxKSkgewogCQlyZXR1cm4gdGV2ZW50X3JlcV9wb3N0KHJlcSwgZXYpOwot
LSAKMi4xNy4xCgoKRnJvbSA0MjdiMDJiY2Q3NzY5YjZkMDg4YjA0M2M0ZjkxN2JkZGIzNWMx
YmEyIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8
bWV0emVAc2FtYmEub3JnPgpEYXRlOiBGcmksIDggTWF5IDIwMjAgMTE6MTc6NTEgKzAyMDAK
U3ViamVjdDogW1BBVENIIDIyLzI5XSB2ZnNfaW9fdXJpbmc6IHNwbGl0IG91dCBhIHZmc19p
b191cmluZ19wcmVhZF9zdWJtaXQoKQogZnVuY3Rpb24KClRoaXMgY2FuIGJlIHJldXNlZCB3
aGVuIHdlIGFkZCBoYW5kbGluZyBmb3Igc2hvcnQgcmVhZHMuCgpCVUc6IGh0dHBzOi8vYnVn
emlsbGEuc2FtYmEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2MQoKU2lnbmVkLW9mZi1ieTog
U3RlZmFuIE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBzb3VyY2UzL21vZHVs
ZXMvdmZzX2lvX3VyaW5nLmMgfCAyMCArKysrKysrKysrKysrKystLS0tLQogMSBmaWxlIGNo
YW5nZWQsIDE1IGluc2VydGlvbnMoKyksIDUgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEv
c291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jIGIvc291cmNlMy9tb2R1bGVzL3Zmc19p
b191cmluZy5jCmluZGV4IDdkYjMyNzYwZDk3Ni4uMWY3MjRmYmM1ODhlIDEwMDY0NAotLS0g
YS9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKKysrIGIvc291cmNlMy9tb2R1bGVz
L3Zmc19pb191cmluZy5jCkBAIC0zMjYsMTAgKzMyNiwxMyBAQCBzdGF0aWMgdm9pZCB2ZnNf
aW9fdXJpbmdfZmRfaGFuZGxlcihzdHJ1Y3QgdGV2ZW50X2NvbnRleHQgKmV2LAogCiBzdHJ1
Y3QgdmZzX2lvX3VyaW5nX3ByZWFkX3N0YXRlIHsKIAlzdHJ1Y3QgdmZzX2lvX3VyaW5nX3Jl
cXVlc3QgdXI7CisJc3RydWN0IGZpbGVzX3N0cnVjdCAqZnNwOworCW9mZl90IG9mZnNldDsK
IAlzdHJ1Y3QgaW92ZWMgaW92OwogCXNpemVfdCBucmVhZDsKIH07CiAKK3N0YXRpYyB2b2lk
IHZmc19pb191cmluZ19wcmVhZF9zdWJtaXQoc3RydWN0IHZmc19pb191cmluZ19wcmVhZF9z
dGF0ZSAqc3RhdGUpOwogc3RhdGljIHZvaWQgdmZzX2lvX3VyaW5nX3ByZWFkX2NvbXBsZXRp
b24oc3RydWN0IHZmc19pb191cmluZ19yZXF1ZXN0ICpjdXIsCiAJCQkJCSAgY29uc3QgY2hh
ciAqbG9jYXRpb24pOwogCkBAIC0zNjgsMTMgKzM3MSwxMSBAQCBzdGF0aWMgc3RydWN0IHRl
dmVudF9yZXEgKnZmc19pb191cmluZ19wcmVhZF9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0
cnVjdCAqaGFuZAogCQlyZXR1cm4gdGV2ZW50X3JlcV9wb3N0KHJlcSwgZXYpOwogCX0KIAor
CXN0YXRlLT5mc3AgPSBmc3A7CisJc3RhdGUtPm9mZnNldCA9IG9mZnNldDsKIAlzdGF0ZS0+
aW92Lmlvdl9iYXNlID0gKHZvaWQgKilkYXRhOwogCXN0YXRlLT5pb3YuaW92X2xlbiA9IG47
Ci0JaW9fdXJpbmdfcHJlcF9yZWFkdigmc3RhdGUtPnVyLnNxZSwKLQkJCSAgICBmc3AtPmZo
LT5mZCwKLQkJCSAgICAmc3RhdGUtPmlvdiwgMSwKLQkJCSAgICBvZmZzZXQpOwotCXZmc19p
b191cmluZ19yZXF1ZXN0X3N1Ym1pdCgmc3RhdGUtPnVyKTsKKwl2ZnNfaW9fdXJpbmdfcHJl
YWRfc3VibWl0KHN0YXRlKTsKIAogCWlmICghdGV2ZW50X3JlcV9pc19pbl9wcm9ncmVzcyhy
ZXEpKSB7CiAJCXJldHVybiB0ZXZlbnRfcmVxX3Bvc3QocmVxLCBldik7CkBAIC0zODQsNiAr
Mzg1LDE1IEBAIHN0YXRpYyBzdHJ1Y3QgdGV2ZW50X3JlcSAqdmZzX2lvX3VyaW5nX3ByZWFk
X3NlbmQoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kCiAJcmV0dXJuIHJlcTsKIH0K
IAorc3RhdGljIHZvaWQgdmZzX2lvX3VyaW5nX3ByZWFkX3N1Ym1pdChzdHJ1Y3QgdmZzX2lv
X3VyaW5nX3ByZWFkX3N0YXRlICpzdGF0ZSkKK3sKKwlpb191cmluZ19wcmVwX3JlYWR2KCZz
dGF0ZS0+dXIuc3FlLAorCQkJICAgIHN0YXRlLT5mc3AtPmZoLT5mZCwKKwkJCSAgICAmc3Rh
dGUtPmlvdiwgMSwKKwkJCSAgICBzdGF0ZS0+b2Zmc2V0KTsKKwl2ZnNfaW9fdXJpbmdfcmVx
dWVzdF9zdWJtaXQoJnN0YXRlLT51cik7Cit9CisKIHN0YXRpYyB2b2lkIHZmc19pb191cmlu
Z19wcmVhZF9jb21wbGV0aW9uKHN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAog
CQkJCQkgIGNvbnN0IGNoYXIgKmxvY2F0aW9uKQogewotLSAKMi4xNy4xCgoKRnJvbSBjMDFk
YWNiZGM5NTNkOTU2NWYzNDY0NTI3Mjk5YjYzMjM2YmM3YWYyIE1vbiBTZXAgMTcgMDA6MDA6
MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRl
OiBGcmksIDggTWF5IDIwMjAgMTE6MTc6NTEgKzAyMDAKU3ViamVjdDogW1BBVENIIDIzLzI5
XSB2ZnNfaW9fdXJpbmc6IHNwbGl0IG91dCBhIHZmc19pb191cmluZ19wd3JpdGVfc3VibWl0
KCkKIGZ1bmN0aW9uCgpUaGlzIGNhbiBiZSByZXVzZWQgd2hlbiB3ZSBhZGQgaGFuZGxpbmcg
Zm9yIHNob3J0IHdyaXRlcy4KCkJVRzogaHR0cHM6Ly9idWd6aWxsYS5zYW1iYS5vcmcvc2hv
d19idWcuY2dpP2lkPTE0MzYxCgpTaWduZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8
bWV0emVAc2FtYmEub3JnPgotLS0KIHNvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYyB8
IDIwICsrKysrKysrKysrKysrKy0tLS0tCiAxIGZpbGUgY2hhbmdlZCwgMTUgaW5zZXJ0aW9u
cygrKSwgNSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZz
X2lvX3VyaW5nLmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKaW5kZXggMWY3
MjRmYmM1ODhlLi40MTY2ODEzMzM2MzQgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9kdWxlcy92
ZnNfaW9fdXJpbmcuYworKysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKQEAg
LTQ0MSwxMCArNDQxLDEzIEBAIHN0YXRpYyBzc2l6ZV90IHZmc19pb191cmluZ19wcmVhZF9y
ZWN2KHN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsCiAKIHN0cnVjdCB2ZnNfaW9fdXJpbmdfcHdy
aXRlX3N0YXRlIHsKIAlzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3QgdXI7CisJc3RydWN0
IGZpbGVzX3N0cnVjdCAqZnNwOworCW9mZl90IG9mZnNldDsKIAlzdHJ1Y3QgaW92ZWMgaW92
OwogCXNpemVfdCBud3JpdHRlbjsKIH07CiAKK3N0YXRpYyB2b2lkIHZmc19pb191cmluZ19w
d3JpdGVfc3VibWl0KHN0cnVjdCB2ZnNfaW9fdXJpbmdfcHdyaXRlX3N0YXRlICpzdGF0ZSk7
CiBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdfcHdyaXRlX2NvbXBsZXRpb24oc3RydWN0IHZm
c19pb191cmluZ19yZXF1ZXN0ICpjdXIsCiAJCQkJCSAgIGNvbnN0IGNoYXIgKmxvY2F0aW9u
KTsKIApAQCAtNDgzLDEzICs0ODYsMTEgQEAgc3RhdGljIHN0cnVjdCB0ZXZlbnRfcmVxICp2
ZnNfaW9fdXJpbmdfcHdyaXRlX3NlbmQoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW4K
IAkJcmV0dXJuIHRldmVudF9yZXFfcG9zdChyZXEsIGV2KTsKIAl9CiAKKwlzdGF0ZS0+ZnNw
ID0gZnNwOworCXN0YXRlLT5vZmZzZXQgPSBvZmZzZXQ7CiAJc3RhdGUtPmlvdi5pb3ZfYmFz
ZSA9IGRpc2NhcmRfY29uc3QoZGF0YSk7CiAJc3RhdGUtPmlvdi5pb3ZfbGVuID0gbjsKLQlp
b191cmluZ19wcmVwX3dyaXRldigmc3RhdGUtPnVyLnNxZSwKLQkJCSAgICAgZnNwLT5maC0+
ZmQsCi0JCQkgICAgICZzdGF0ZS0+aW92LCAxLAotCQkJICAgICBvZmZzZXQpOwotCXZmc19p
b191cmluZ19yZXF1ZXN0X3N1Ym1pdCgmc3RhdGUtPnVyKTsKKwl2ZnNfaW9fdXJpbmdfcHdy
aXRlX3N1Ym1pdChzdGF0ZSk7CiAKIAlpZiAoIXRldmVudF9yZXFfaXNfaW5fcHJvZ3Jlc3Mo
cmVxKSkgewogCQlyZXR1cm4gdGV2ZW50X3JlcV9wb3N0KHJlcSwgZXYpOwpAQCAtNDk5LDYg
KzUwMCwxNSBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZmc19pb191cmluZ19wd3Jp
dGVfc2VuZChzdHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbgogCXJldHVybiByZXE7CiB9
CiAKK3N0YXRpYyB2b2lkIHZmc19pb191cmluZ19wd3JpdGVfc3VibWl0KHN0cnVjdCB2ZnNf
aW9fdXJpbmdfcHdyaXRlX3N0YXRlICpzdGF0ZSkKK3sKKwlpb191cmluZ19wcmVwX3dyaXRl
digmc3RhdGUtPnVyLnNxZSwKKwkJCSAgICAgc3RhdGUtPmZzcC0+ZmgtPmZkLAorCQkJICAg
ICAmc3RhdGUtPmlvdiwgMSwKKwkJCSAgICAgc3RhdGUtPm9mZnNldCk7CisJdmZzX2lvX3Vy
aW5nX3JlcXVlc3Rfc3VibWl0KCZzdGF0ZS0+dXIpOworfQorCiBzdGF0aWMgdm9pZCB2ZnNf
aW9fdXJpbmdfcHdyaXRlX2NvbXBsZXRpb24oc3RydWN0IHZmc19pb191cmluZ19yZXF1ZXN0
ICpjdXIsCiAJCQkJCSAgIGNvbnN0IGNoYXIgKmxvY2F0aW9uKQogewotLSAKMi4xNy4xCgoK
RnJvbSBmMTA2ODljMzUwODhjYTBkNmNiYzBkMDZhMDMyMTkyMWIxYzRlZmU5IE1vbiBTZXAg
MTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEu
b3JnPgpEYXRlOiBGcmksIDggTWF5IDIwMjAgMTE6Mzg6NTYgKzAyMDAKU3ViamVjdDogW1BB
VENIIDI0LzI5XSB2ZnNfaW9fdXJpbmc6IHByb3RlY3QgdmZzX2lvX3VyaW5nX3ByZWFkX2Nv
bXBsZXRpb24oKQogYWdhaW5zdCBpbnZhbGlkIHJlc3VsdHMKCldlIHNob3VsZCBuZXZlciBn
ZXQgYmFjayBtb3JlIHRoYW4gd2UgYXNrZWQgZm9yLgoKQlVHOiBodHRwczovL2J1Z3ppbGxh
LnNhbWJhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQzNjEKClNpZ25lZC1vZmYtYnk6IFN0ZWZh
biBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+Ci0tLQogc291cmNlMy9tb2R1bGVzL3Zm
c19pb191cmluZy5jIHwgMTQgKysrKysrKysrKysrKysKIDEgZmlsZSBjaGFuZ2VkLCAxNCBp
bnNlcnRpb25zKCspCgpkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmlu
Zy5jIGIvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCmluZGV4IDQxNjY4MTMzMzYz
NC4uYTliMmRiOGQzY2QzIDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3Vy
aW5nLmMKKysrIGIvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCkBAIC0yNiw2ICsy
Niw3IEBACiAjaW5jbHVkZSAic21iZC9nbG9iYWxzLmgiCiAjaW5jbHVkZSAibGliL3V0aWwv
dGV2ZW50X3VuaXguaCIKICNpbmNsdWRlICJsaWIvdXRpbC9zeXNfcncuaCIKKyNpbmNsdWRl
ICJsaWIvdXRpbC9pb3ZfYnVmLmgiCiAjaW5jbHVkZSAic21icHJvZmlsZS5oIgogI2luY2x1
ZGUgPGxpYnVyaW5nLmg+CiAKQEAgLTM5OSw2ICs0MDAsOSBAQCBzdGF0aWMgdm9pZCB2ZnNf
aW9fdXJpbmdfcHJlYWRfY29tcGxldGlvbihzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3Qg
KmN1ciwKIHsKIAlzdHJ1Y3QgdmZzX2lvX3VyaW5nX3ByZWFkX3N0YXRlICpzdGF0ZSA9IHRl
dmVudF9yZXFfZGF0YSgKIAkJY3VyLT5yZXEsIHN0cnVjdCB2ZnNfaW9fdXJpbmdfcHJlYWRf
c3RhdGUpOworCXN0cnVjdCBpb3ZlYyAqaW92ID0gJnN0YXRlLT5pb3Y7CisJaW50IG51bV9p
b3YgPSAxOworCWJvb2wgb2s7CiAKIAkvKgogCSAqIFdlIHJlbHkgb24gYmVpbmcgaW5zaWRl
IHRoZSBfc2VuZCgpIGZ1bmN0aW9uCkBAIC00MTIsNiArNDE2LDE2IEBAIHN0YXRpYyB2b2lk
IHZmc19pb191cmluZ19wcmVhZF9jb21wbGV0aW9uKHN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVx
dWVzdCAqY3VyLAogCQlyZXR1cm47CiAJfQogCisJb2sgPSBpb3ZfYWR2YW5jZSgmaW92LCAm
bnVtX2lvdiwgY3VyLT5jcWUucmVzKTsKKwlpZiAoIW9rKSB7CisJCS8qIFRoaXMgaXMgbm90
IGV4cGVjdGVkISAqLworCQlEQkdfRVJSKCJpb3ZfYWR2YW5jZSgpIGZhaWxlZCBjdXItPmNx
ZS5yZXM9JWQgPiBpb3ZfbGVuPSVkXG4iLAorCQkJKGludCljdXItPmNxZS5yZXMsCisJCQko
aW50KXN0YXRlLT5pb3YuaW92X2xlbik7CisJCXRldmVudF9yZXFfZXJyb3IoY3VyLT5yZXEs
IEVJTyk7CisJCXJldHVybjsKKwl9CisKIAlzdGF0ZS0+bnJlYWQgPSBzdGF0ZS0+dXIuY3Fl
LnJlczsKIAl0ZXZlbnRfcmVxX2RvbmUoY3VyLT5yZXEpOwogfQotLSAKMi4xNy4xCgoKRnJv
bSA3OGJiZDRiYzg4NDI1OTI4NGU3MzY4ZDEwMzY3Mjk2NTM0ZjhiMzJkIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3Jn
PgpEYXRlOiBGcmksIDggTWF5IDIwMjAgMTE6Mzg6NTYgKzAyMDAKU3ViamVjdDogW1BBVENI
IDI1LzI5XSB2ZnNfaW9fdXJpbmc6IHByb3RlY3QgdmZzX2lvX3VyaW5nX3B3cml0ZV9jb21w
bGV0aW9uKCkKIGFnYWluc3QgaW52YWxpZCByZXN1bHRzCgpXZSBzaG91bGQgbmV2ZXIgZ2V0
IG1vcmUgYWNrZWQgdGhhbiB3ZSBhc2tlZCBmb3IuCgpCVUc6IGh0dHBzOi8vYnVnemlsbGEu
c2FtYmEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2MQoKU2lnbmVkLW9mZi1ieTogU3RlZmFu
IE1ldHptYWNoZXIgPG1ldHplQHNhbWJhLm9yZz4KLS0tCiBzb3VyY2UzL21vZHVsZXMvdmZz
X2lvX3VyaW5nLmMgfCAxMyArKysrKysrKysrKysrCiAxIGZpbGUgY2hhbmdlZCwgMTMgaW5z
ZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcu
YyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwppbmRleCBhOWIyZGI4ZDNjZDMu
Ljc5OTRlZjE3ZDY3NSAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmlu
Zy5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwpAQCAtNTI4LDYgKzUy
OCw5IEBAIHN0YXRpYyB2b2lkIHZmc19pb191cmluZ19wd3JpdGVfY29tcGxldGlvbihzdHJ1
Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3QgKmN1ciwKIHsKIAlzdHJ1Y3QgdmZzX2lvX3VyaW5n
X3B3cml0ZV9zdGF0ZSAqc3RhdGUgPSB0ZXZlbnRfcmVxX2RhdGEoCiAJCWN1ci0+cmVxLCBz
dHJ1Y3QgdmZzX2lvX3VyaW5nX3B3cml0ZV9zdGF0ZSk7CisJc3RydWN0IGlvdmVjICppb3Yg
PSAmc3RhdGUtPmlvdjsKKwlpbnQgbnVtX2lvdiA9IDE7CisJYm9vbCBvazsKIAogCS8qCiAJ
ICogV2UgcmVseSBvbiBiZWluZyBpbnNpZGUgdGhlIF9zZW5kKCkgZnVuY3Rpb24KQEAgLTU0
MSw2ICs1NDQsMTYgQEAgc3RhdGljIHZvaWQgdmZzX2lvX3VyaW5nX3B3cml0ZV9jb21wbGV0
aW9uKHN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAogCQlyZXR1cm47CiAJfQog
CisJb2sgPSBpb3ZfYWR2YW5jZSgmaW92LCAmbnVtX2lvdiwgY3VyLT5jcWUucmVzKTsKKwlp
ZiAoIW9rKSB7CisJCS8qIFRoaXMgaXMgbm90IGV4cGVjdGVkISAqLworCQlEQkdfRVJSKCJp
b3ZfYWR2YW5jZSgpIGZhaWxlZCBjdXItPmNxZS5yZXM9JWQgPiBpb3ZfbGVuPSVkXG4iLAor
CQkJKGludCljdXItPmNxZS5yZXMsCisJCQkoaW50KXN0YXRlLT5pb3YuaW92X2xlbik7CisJ
CXRldmVudF9yZXFfZXJyb3IoY3VyLT5yZXEsIEVJTyk7CisJCXJldHVybjsKKwl9CisKIAlz
dGF0ZS0+bndyaXR0ZW4gPSBzdGF0ZS0+dXIuY3FlLnJlczsKIAl0ZXZlbnRfcmVxX2RvbmUo
Y3VyLT5yZXEpOwogfQotLSAKMi4xNy4xCgoKRnJvbSA5OTE4ODIwZTJiYzUxMWNlMmQ2OWZm
N2E3YzNlNTU3YjVlZDEwMjQ0IE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBTdGVm
YW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgpEYXRlOiBGcmksIDggTWF5IDIwMjAg
MTE6Mzg6NTYgKzAyMDAKU3ViamVjdDogW1BBVENIIDI2LzI5XSB2ZnNfaW9fdXJpbmc6IHBy
b3RlY3QgdmZzX2lvX3VyaW5nX2ZzeW5jX2NvbXBsZXRpb24oKQogYWdhaW5zdCBpbnZhbGlk
IHJlc3VsdHMKCldlIHNob3VsZCBuZXZlciBnZXQgYmFjayBhIHZhbHVlID4gMC4KCkJVRzog
aHR0cHM6Ly9idWd6aWxsYS5zYW1iYS5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzYxCgpTaWdu
ZWQtb2ZmLWJ5OiBTdGVmYW4gTWV0em1hY2hlciA8bWV0emVAc2FtYmEub3JnPgotLS0KIHNv
dXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYyB8IDcgKysrKysrKwogMSBmaWxlIGNoYW5n
ZWQsIDcgaW5zZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBhL3NvdXJjZTMvbW9kdWxlcy92ZnNf
aW9fdXJpbmcuYyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwppbmRleCA3OTk0
ZWYxN2Q2NzUuLjJiNTcwNjY2NWNmMyAxMDA2NDQKLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zm
c19pb191cmluZy5jCisrKyBiL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwpAQCAt
NjQyLDYgKzY0MiwxMyBAQCBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdfZnN5bmNfY29tcGxl
dGlvbihzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3QgKmN1ciwKIAkJcmV0dXJuOwogCX0K
IAorCWlmIChjdXItPmNxZS5yZXMgPiAwKSB7CisJCS8qIFRoaXMgaXMgbm90IGV4cGVjdGVk
ISAqLworCQlEQkdfRVJSKCJnb3QgY3VyLT5jcWUucmVzPSVkXG4iLCAoaW50KWN1ci0+Y3Fl
LnJlcyk7CisJCXRldmVudF9yZXFfZXJyb3IoY3VyLT5yZXEsIEVJTyk7CisJCXJldHVybjsK
Kwl9CisKIAl0ZXZlbnRfcmVxX2RvbmUoY3VyLT5yZXEpOwogfQogCi0tIAoyLjE3LjEKCgpG
cm9tIGNmYjRmY2FiZjI4NTFmYmNiMDI4MzI4OWQ5ZWY5ZGQwYTI4YmU1ZTEgTW9uIFNlcCAx
NyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5v
cmc+CkRhdGU6IEZyaSwgOCBNYXkgMjAyMCAxMzozMDoxNyArMDIwMApTdWJqZWN0OiBbUEFU
Q0ggMjcvMjldIHZmc19pb191cmluZzogcmV0cnkgYWZ0ZXIgYSBzaG9ydCByZWFkIGluCiB2
ZnNfaW9fdXJpbmdfcHJlYWRfY29tcGxldGlvbigpCgpXZSBuZWVkIHRvIGJlIHByZXBhcmVk
IGZvciBzaG9ydCByZWFkcyBmcm9tIHRoZSBrZXJuZWwgZGVwZW5kaW5nIG9uCnRoZSBzdGF0
ZSBvZiB0aGUgcGFnZSBjYWNoZS4gV2luZG93cyBhbmQgTWFjIGNsaWVudHMgZG9uJ3QKZXhw
ZWN0IHNob3J0IHJlYWRzIGZvciBmaWxlcywgc28gd2UgbmVlZCB0byByZXRyeSBvdXJzZWxm
LgoKRm9yIHRoZSBmdXR1cmUgd2UgbWF5IGJlIGFibGUgdG8gcGxheSB3aXRoIHNvbWUgaW9f
dXJpbmcgZmxhZ3MKaW4gb3JkZXIgdG8gYXZvaWQgdGhlIHJldHJpZXMgaW4gdXNlcnNwYWNl
LCBidXQgZm9yIG5vdyB3ZSBqdXN0IGZpeAp0aGUgZGF0YSBjb3JydXB0aW9uIGJ1Zy4uLgoK
QlVHOiBodHRwczovL2J1Z3ppbGxhLnNhbWJhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQzNjEK
ClNpZ25lZC1vZmYtYnk6IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+Ci0t
LQogc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jIHwgMjQgKysrKysrKysrKysrKysr
KysrKysrKy0tCiAxIGZpbGUgY2hhbmdlZCwgMjIgaW5zZXJ0aW9ucygrKSwgMiBkZWxldGlv
bnMoLSkKCmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMgYi9z
b3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKaW5kZXggMmI1NzA2NjY1Y2YzLi45NjVm
ODc5OGZmMmEgMTAwNjQ0Ci0tLSBhL3NvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYwor
KysgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2lvX3VyaW5nLmMKQEAgLTQxNiw2ICs0MTYsMTQg
QEAgc3RhdGljIHZvaWQgdmZzX2lvX3VyaW5nX3ByZWFkX2NvbXBsZXRpb24oc3RydWN0IHZm
c19pb191cmluZ19yZXF1ZXN0ICpjdXIsCiAJCXJldHVybjsKIAl9CiAKKwlpZiAoY3VyLT5j
cWUucmVzID09IDApIHsKKwkJLyoKKwkJICogV2UgcmVhY2hlZCBFT0YsIHdlJ3JlIGRvbmUK
KwkJICovCisJCXRldmVudF9yZXFfZG9uZShjdXItPnJlcSk7CisJCXJldHVybjsKKwl9CisK
IAlvayA9IGlvdl9hZHZhbmNlKCZpb3YsICZudW1faW92LCBjdXItPmNxZS5yZXMpOwogCWlm
ICghb2spIHsKIAkJLyogVGhpcyBpcyBub3QgZXhwZWN0ZWQhICovCkBAIC00MjYsOCArNDM0
LDIwIEBAIHN0YXRpYyB2b2lkIHZmc19pb191cmluZ19wcmVhZF9jb21wbGV0aW9uKHN0cnVj
dCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqY3VyLAogCQlyZXR1cm47CiAJfQogCi0Jc3RhdGUt
Pm5yZWFkID0gc3RhdGUtPnVyLmNxZS5yZXM7Ci0JdGV2ZW50X3JlcV9kb25lKGN1ci0+cmVx
KTsKKwkvKiBzeXNfdmFsaWRfaW9fcmFuZ2UoKSBhbHJlYWR5IGNoZWNrZWQgdGhlIGJvdW5k
YXJpZXMgKi8KKwlzdGF0ZS0+bnJlYWQgKz0gc3RhdGUtPnVyLmNxZS5yZXM7CisJaWYgKG51
bV9pb3YgPT0gMCkgeworCQkvKiBXZSdyZSBkb25lICovCisJCXRldmVudF9yZXFfZG9uZShj
dXItPnJlcSk7CisJCXJldHVybjsKKwl9CisKKwkvKgorCSAqIHN5c192YWxpZF9pb19yYW5n
ZSgpIGFscmVhZHkgY2hlY2tlZCB0aGUgYm91bmRhcmllcworCSAqIG5vdyB0cnkgdG8gZ2V0
IHRoZSByZXN0LgorCSAqLworCXN0YXRlLT5vZmZzZXQgKz0gc3RhdGUtPnVyLmNxZS5yZXM7
CisJdmZzX2lvX3VyaW5nX3ByZWFkX3N1Ym1pdChzdGF0ZSk7CiB9CiAKIHN0YXRpYyBzc2l6
ZV90IHZmc19pb191cmluZ19wcmVhZF9yZWN2KHN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsCi0t
IAoyLjE3LjEKCgpGcm9tIGFmMTdkMmQyMTFjYTVmMGYxYjJmZmFhYWY0NmQ3NmZlNTA2OTE1
MzMgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxt
ZXR6ZUBzYW1iYS5vcmc+CkRhdGU6IEZyaSwgOCBNYXkgMjAyMCAxMzozMDoxNyArMDIwMApT
dWJqZWN0OiBbUEFUQ0ggMjgvMjldIFRPRE86IHZmc19pb191cmluZzogcmV0cnkgYWZ0ZXIg
YSBzaG9ydCB3cml0ZXMgaW4KIHZmc19pb191cmluZ19wd3JpdGVfY29tcGxldGlvbigpCgpX
ZSBuZWVkIHRvIGJlIHByZXBhcmVkIGZvciBzaG9ydCB3cml0ZXMgZnJvbSB0aGUga2VybmVs
IGRlcGVuZGluZyBvbgp0aGUgc3RhdGUgb2YgdGhlIHBhZ2UgY2FjaGUuCgpCVUc6IGh0dHBz
Oi8vYnVnemlsbGEuc2FtYmEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDM2MQoKVE9ETzogY2hl
Y2sgaG93IGNsaWVudHMgaGFuZGxlIHNob3J0IHdyaXRlcy4uLgpUT0RPOiB3aGVyZSBkbyB3
ZSBoYW5kbGUgb2Zmc2V0IDwgMCA/Pz8sIHNlZSBNUy1GU0EgMi4xLjUuMyBTZXJ2ZXIgUmVx
dWVzdHMgYSBXcml0ZQotLS0KIHNvdXJjZTMvbW9kdWxlcy92ZnNfaW9fdXJpbmcuYyB8IDI0
ICsrKysrKysrKysrKysrKysrKysrKystLQogMSBmaWxlIGNoYW5nZWQsIDIyIGluc2VydGlv
bnMoKyksIDIgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zm
c19pb191cmluZy5jIGIvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCmluZGV4IDk2
NWY4Nzk4ZmYyYS4uMTlmZmJkZThlNDBhIDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMv
dmZzX2lvX3VyaW5nLmMKKysrIGIvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCkBA
IC01NjQsNiArNTY0LDE0IEBAIHN0YXRpYyB2b2lkIHZmc19pb191cmluZ19wd3JpdGVfY29t
cGxldGlvbihzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3QgKmN1ciwKIAkJcmV0dXJuOwog
CX0KIAorCWlmIChjdXItPmNxZS5yZXMgPT0gMCkgeworCQkvKgorCQkgKiBFbnN1cmUgd2Ug
Y2FuIG5ldmVyIHNwaW4uCisJCSAqLworCQl0ZXZlbnRfcmVxX2Vycm9yKGN1ci0+cmVxLCBF
Tk9TUEMpOworCQlyZXR1cm47CisJfQorCiAJb2sgPSBpb3ZfYWR2YW5jZSgmaW92LCAmbnVt
X2lvdiwgY3VyLT5jcWUucmVzKTsKIAlpZiAoIW9rKSB7CiAJCS8qIFRoaXMgaXMgbm90IGV4
cGVjdGVkISAqLwpAQCAtNTc0LDggKzU4MiwyMCBAQCBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJp
bmdfcHdyaXRlX2NvbXBsZXRpb24oc3RydWN0IHZmc19pb191cmluZ19yZXF1ZXN0ICpjdXIs
CiAJCXJldHVybjsKIAl9CiAKLQlzdGF0ZS0+bndyaXR0ZW4gPSBzdGF0ZS0+dXIuY3FlLnJl
czsKLQl0ZXZlbnRfcmVxX2RvbmUoY3VyLT5yZXEpOworCS8qIHN5c192YWxpZF9pb19yYW5n
ZSgpIGFscmVhZHkgY2hlY2tlZCB0aGUgYm91bmRhcmllcyAqLworCXN0YXRlLT5ud3JpdHRl
biArPSBzdGF0ZS0+dXIuY3FlLnJlczsKKwlpZiAobnVtX2lvdiA9PSAwKSB7CisJCS8qIFdl
J3JlIGRvbmUgKi8KKwkJdGV2ZW50X3JlcV9kb25lKGN1ci0+cmVxKTsKKwkJcmV0dXJuOwor
CX0KKworCS8qCisJICogc3lzX3ZhbGlkX2lvX3JhbmdlKCkgYWxyZWFkeSBjaGVja2VkIHRo
ZSBib3VuZGFyaWVzCisJICogbm93IHRyeSB0byB3cml0ZSB0aGUgcmVzdC4KKwkgKi8KKwlz
dGF0ZS0+b2Zmc2V0ICs9IHN0YXRlLT51ci5jcWUucmVzOworCXZmc19pb191cmluZ19wd3Jp
dGVfc3VibWl0KHN0YXRlKTsKIH0KIAogc3RhdGljIHNzaXplX3QgdmZzX2lvX3VyaW5nX3B3
cml0ZV9yZWN2KHN0cnVjdCB0ZXZlbnRfcmVxICpyZXEsCi0tIAoyLjE3LjEKCgpGcm9tIGQ4
YmRmMWY4ZjI4YTIyNWEwNDk1NTZlZjY2NTk2OGVkNjk1MTJkZDEgTW9uIFNlcCAxNyAwMDow
MDowMCAyMDAxCkZyb206IFN0ZWZhbiBNZXR6bWFjaGVyIDxtZXR6ZUBzYW1iYS5vcmc+CkRh
dGU6IFdlZCwgNiBNYXkgMjAyMCAwMzoxMjoyNCAtMDcwMApTdWJqZWN0OiBbUEFUQ0ggMjkv
MjldIEhBQ0sgdmZzX2lvX3VyaW5nOiBhZGQgZGVidWdnaW5nIGZvciBidWcgMTQzNjEKCi0t
LQogc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jIHwgMTA1ICsrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysrLQogMSBmaWxlIGNoYW5nZWQsIDEwNCBpbnNlcnRpb25zKCsp
LCAxIGRlbGV0aW9uKC0pCgpkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19pb191
cmluZy5jIGIvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCmluZGV4IDE5ZmZiZGU4
ZTQwYS4uNTlmMmE1NGQ2MDhlIDEwMDY0NAotLS0gYS9zb3VyY2UzL21vZHVsZXMvdmZzX2lv
X3VyaW5nLmMKKysrIGIvc291cmNlMy9tb2R1bGVzL3Zmc19pb191cmluZy5jCkBAIC0zOSw2
ICszOSwxMCBAQCBzdHJ1Y3QgdmZzX2lvX3VyaW5nX2NvbmZpZyB7CiAJYm9vbCBuZWVkX3Jl
dHJ5OwogCXN0cnVjdCB2ZnNfaW9fdXJpbmdfcmVxdWVzdCAqcXVldWU7CiAJc3RydWN0IHZm
c19pb191cmluZ19yZXF1ZXN0ICpwZW5kaW5nOworCWJvb2wgbm93YWl0X3ByZWFkOworCWJv
b2wgZm9yY2VfYXN5bmNfcHJlYWQ7CisJYm9vbCBmb3JjZV9hc3luY19wcmVhZF9yZXRyeTsK
KwlzaXplX3QgdHJ1bmNhdGVfcHJlYWQ7CiB9OwogCiBzdHJ1Y3QgdmZzX2lvX3VyaW5nX3Jl
cXVlc3QgewpAQCAtOTQsNiArOTgsNyBAQCBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdfY29u
ZmlnX2Rlc3Ryb3koc3RydWN0IHZmc19pb191cmluZ19jb25maWcgKmNvbmZpZywKIAkJLnJl
cyA9IHJldCwKIAl9OwogCitEQkdfRVJSKCJyZXQ9JWQgJXNcbiIsIHJldCwgbG9jYXRpb24p
OwogCVBST0ZJTEVfVElNRVNUQU1QKCZzdGFydF90aW1lKTsKIAogCWlmIChjb25maWctPnVy
aW5nLnJpbmdfZmQgIT0gLTEpIHsKQEAgLTE5NCw2ICsxOTksOCBAQCBzdGF0aWMgaW50IHZm
c19pb191cmluZ19jb25uZWN0KHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsIGNvbnN0IGNo
YXIgKnNlcnZpY2UsCiAJcmV0ID0gaW9fdXJpbmdfcXVldWVfaW5pdChudW1fZW50cmllcywg
JmNvbmZpZy0+dXJpbmcsIGZsYWdzKTsKIAlpZiAocmV0IDwgMCkgewogCQlTTUJfVkZTX05F
WFRfRElTQ09OTkVDVChoYW5kbGUpOworCQlEQkdfRVJSKCJpb191cmluZ19xdWV1ZV9pbml0
KGZsYWdzPTB4JXgpIGZhaWxlZCAtICVkICVzXG4iLAorCQkJZmxhZ3MsIHJldCwgc3RyZXJy
b3IoLXJldCkpOwogCQllcnJubyA9IC1yZXQ7CiAJCXJldHVybiAtMTsKIAl9CkBAIC0yMDQs
NiArMjExLDggQEAgc3RhdGljIGludCB2ZnNfaW9fdXJpbmdfY29ubmVjdCh2ZnNfaGFuZGxl
X3N0cnVjdCAqaGFuZGxlLCBjb25zdCBjaGFyICpzZXJ2aWNlLAogCXJldCA9IGlvX3VyaW5n
X3JpbmdfZG9udGZvcmsoJmNvbmZpZy0+dXJpbmcpOwogCWlmIChyZXQgPCAwKSB7CiAJCVNN
Ql9WRlNfTkVYVF9ESVNDT05ORUNUKGhhbmRsZSk7CisJCURCR19FUlIoImlvX3VyaW5nX3Jp
bmdfZG9udGZvcmsoKSBmYWlsZWQgLSAlZCAlc1xuIiwKKwkJCXJldCwgc3RyZXJyb3IoLXJl
dCkpOwogCQllcnJubyA9IC1yZXQ7CiAJCXJldHVybiAtMTsKIAl9CkBAIC0yMjIsNiArMjMx
LDIyIEBAIHN0YXRpYyBpbnQgdmZzX2lvX3VyaW5nX2Nvbm5lY3QodmZzX2hhbmRsZV9zdHJ1
Y3QgKmhhbmRsZSwgY29uc3QgY2hhciAqc2VydmljZSwKIAkJcmV0dXJuIC0xOwogCX0KIAor
CWNvbmZpZy0+bm93YWl0X3ByZWFkID0gbHBfcGFybV9ib29sKFNOVU0oaGFuZGxlLT5jb25u
KSwKKwkJCSAgICAgImlvX3VyaW5nIiwKKwkJCSAgICAgIm5vd2FpdF9wcmVhZCIsCisJCQkg
ICAgIGZhbHNlKTsKKwljb25maWctPmZvcmNlX2FzeW5jX3ByZWFkID0gbHBfcGFybV9ib29s
KFNOVU0oaGFuZGxlLT5jb25uKSwKKwkJCSAgICAgImlvX3VyaW5nIiwKKwkJCSAgICAgImZv
cmNlX2FzeW5jX3ByZWFkIiwKKwkJCSAgICAgZmFsc2UpOworCWNvbmZpZy0+Zm9yY2VfYXN5
bmNfcHJlYWRfcmV0cnkgPSBscF9wYXJtX2Jvb2woU05VTShoYW5kbGUtPmNvbm4pLAorCQkJ
ICAgICAiaW9fdXJpbmciLAorCQkJICAgICAiZm9yY2VfYXN5bmNfcHJlYWRfcmV0cnkiLAor
CQkJICAgICBmYWxzZSk7CisJY29uZmlnLT50cnVuY2F0ZV9wcmVhZCA9IGxwX3Bhcm1fdWxv
bmdsb25nKFNOVU0oaGFuZGxlLT5jb25uKSwKKwkJCQkgICAgImlvX3VyaW5nIiwKKwkJCQkg
ICAgInRydW5jYXRlX3ByZWFkIiwKKwkJCQkgICAgVUlOVDMyX01BWCk7CiAJcmV0dXJuIDA7
CiB9CiAKQEAgLTI2OCw2ICsyOTMsOCBAQCBzdGF0aWMgdm9pZCBfdmZzX2lvX3VyaW5nX3F1
ZXVlX3J1bihzdHJ1Y3QgdmZzX2lvX3VyaW5nX2NvbmZpZyAqY29uZmlnKQogCWlmIChyZXQg
PT0gLUVBR0FJTiB8fCByZXQgPT0gLUVCVVNZKSB7CiAJCS8qIFdlIGp1c3QgcmV0cnkgbGF0
ZXIgKi8KIAl9IGVsc2UgaWYgKHJldCA8IDApIHsKKwkJREJHX0VSUigiaW9fdXJpbmdfc3Vi
bWl0KCkgZmFpbGVkIC0gJWQgJXNcbiIsCisJCQlyZXQsIHN0cmVycm9yKC1yZXQpKTsKIAkJ
dmZzX2lvX3VyaW5nX2NvbmZpZ19kZXN0cm95KGNvbmZpZywgcmV0LCBfX2xvY2F0aW9uX18p
OwogCQlyZXR1cm47CiAJfQpAQCAtMzMwLDcgKzM1Nyw5IEBAIHN0cnVjdCB2ZnNfaW9fdXJp
bmdfcHJlYWRfc3RhdGUgewogCXN0cnVjdCBmaWxlc19zdHJ1Y3QgKmZzcDsKIAlvZmZfdCBv
ZmZzZXQ7CiAJc3RydWN0IGlvdmVjIGlvdjsKKwlzdHJ1Y3QgaW92ZWMgdG1wX2lvdjsKIAlz
aXplX3QgbnJlYWQ7CisJYm9vbCBub3dhaXRfcHJlYWQ7CiB9OwogCiBzdGF0aWMgdm9pZCB2
ZnNfaW9fdXJpbmdfcHJlYWRfc3VibWl0KHN0cnVjdCB2ZnNfaW9fdXJpbmdfcHJlYWRfc3Rh
dGUgKnN0YXRlKTsKQEAgLTM3Niw2ICs0MDUsNyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9y
ZXEgKnZmc19pb191cmluZ19wcmVhZF9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAq
aGFuZAogCXN0YXRlLT5vZmZzZXQgPSBvZmZzZXQ7CiAJc3RhdGUtPmlvdi5pb3ZfYmFzZSA9
ICh2b2lkICopZGF0YTsKIAlzdGF0ZS0+aW92Lmlvdl9sZW4gPSBuOworCXN0YXRlLT5ub3dh
aXRfcHJlYWQgPSBjb25maWctPm5vd2FpdF9wcmVhZDsKIAl2ZnNfaW9fdXJpbmdfcHJlYWRf
c3VibWl0KHN0YXRlKTsKIAogCWlmICghdGV2ZW50X3JlcV9pc19pbl9wcm9ncmVzcyhyZXEp
KSB7CkBAIC0zODgsMTAgKzQxOCwyNyBAQCBzdGF0aWMgc3RydWN0IHRldmVudF9yZXEgKnZm
c19pb191cmluZ19wcmVhZF9zZW5kKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZAog
CiBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdfcHJlYWRfc3VibWl0KHN0cnVjdCB2ZnNfaW9f
dXJpbmdfcHJlYWRfc3RhdGUgKnN0YXRlKQogeworCXN0cnVjdCB2ZnNfaW9fdXJpbmdfY29u
ZmlnICpjb25maWcgPSBzdGF0ZS0+dXIuY29uZmlnOworCXVuc2lnbmVkIGZsYWdzID0gMDsK
KworCXN0YXRlLT50bXBfaW92ID0gc3RhdGUtPmlvdjsKKwlzdGF0ZS0+dG1wX2lvdi5pb3Zf
bGVuID0gTUlOKHN0YXRlLT50bXBfaW92Lmlvdl9sZW4sCisJCQkJICAgICBjb25maWctPnRy
dW5jYXRlX3ByZWFkKTsKKwogCWlvX3VyaW5nX3ByZXBfcmVhZHYoJnN0YXRlLT51ci5zcWUs
CiAJCQkgICAgc3RhdGUtPmZzcC0+ZmgtPmZkLAotCQkJICAgICZzdGF0ZS0+aW92LCAxLAor
CQkJICAgICZzdGF0ZS0+dG1wX2lvdiwgMSwKIAkJCSAgICBzdGF0ZS0+b2Zmc2V0KTsKKwlp
ZiAoc3RhdGUtPm5vd2FpdF9wcmVhZCkgeworCQlzdGF0ZS0+dXIuc3FlLnJ3X2ZsYWdzIHw9
IFJXRl9OT1dBSVQ7CisJfQorCWlmIChjb25maWctPmZvcmNlX2FzeW5jX3ByZWFkKSB7CisJ
CWZsYWdzIHw9IElPU1FFX0FTWU5DOworCX0KKwlpZiAoc3RhdGUtPm5yZWFkID4gMCAmJiBj
b25maWctPmZvcmNlX2FzeW5jX3ByZWFkX3JldHJ5KSB7CisJCWZsYWdzIHw9IElPU1FFX0FT
WU5DOworCX0KKwlpb191cmluZ19zcWVfc2V0X2ZsYWdzKCZzdGF0ZS0+dXIuc3FlLCBmbGFn
cyk7CiAJdmZzX2lvX3VyaW5nX3JlcXVlc3Rfc3VibWl0KCZzdGF0ZS0+dXIpOwogfQogCkBA
IC00MTIsMTAgKzQ1OSw2NiBAQCBzdGF0aWMgdm9pZCB2ZnNfaW9fdXJpbmdfcHJlYWRfY29t
cGxldGlvbihzdHJ1Y3QgdmZzX2lvX3VyaW5nX3JlcXVlc3QgKmN1ciwKIAogCWlmIChjdXIt
PmNxZS5yZXMgPCAwKSB7CiAJCWludCBlcnIgPSAtY3VyLT5jcWUucmVzOworCQlEQkdfRVJS
KCIlcDogSW52YWxpZCBsYXN0X3JlYWQ9JXp1ICgweCV6eCkgb2ZzPSV6dSAoMHglengpIGxl
bj0lenUgKDB4JXp4KSBlcnI9JWQgJXMgZW9mPSV6dSAoMHglengpIGJsa3M9JXp1IGJsb2Nr
cz0lenUgJXMgJXNcbiIsCisJCQlzdGF0ZSwKKwkJCShzaXplX3Qpc3RhdGUtPm5yZWFkLAor
CQkJKHNpemVfdClzdGF0ZS0+bnJlYWQsCisJCQkoc2l6ZV90KXN0YXRlLT5vZmZzZXQsCisJ
CQkoc2l6ZV90KXN0YXRlLT5vZmZzZXQsCisJCQkoc2l6ZV90KXN0YXRlLT5pb3YuaW92X2xl
biwKKwkJCShzaXplX3Qpc3RhdGUtPmlvdi5pb3ZfbGVuLAorCQkJZXJyLCBzdHJlcnJvcihl
cnIpLAorCQkJKHNpemVfdClzdGF0ZS0+ZnNwLT5mc3BfbmFtZS0+c3Quc3RfZXhfc2l6ZSwK
KwkJCShzaXplX3Qpc3RhdGUtPmZzcC0+ZnNwX25hbWUtPnN0LnN0X2V4X3NpemUsCisJCQko
c2l6ZV90KXN0YXRlLT5mc3AtPmZzcF9uYW1lLT5zdC5zdF9leF9ibGtzaXplLAorCQkJKHNp
emVfdClzdGF0ZS0+ZnNwLT5mc3BfbmFtZS0+c3Quc3RfZXhfYmxvY2tzLAorCQkJZnNwX3N0
cl9kYmcoc3RhdGUtPmZzcCksCisJCQlmc3BfZm51bV9kYmcoc3RhdGUtPmZzcCkpOworCQlp
ZiAoZXJyID09IEVBR0FJTiAmJiBzdGF0ZS0+bm93YWl0X3ByZWFkKSB7CisJCQlzdGF0ZS0+
bm93YWl0X3ByZWFkID0gZmFsc2U7CisJCQl2ZnNfaW9fdXJpbmdfcHJlYWRfc3VibWl0KHN0
YXRlKTsKKwkJCXJldHVybjsKKwkJfQogCQlfdGV2ZW50X3JlcV9lcnJvcihjdXItPnJlcSwg
ZXJyLCBsb2NhdGlvbik7CiAJCXJldHVybjsKIAl9CiAKKwlpZiAoKHNpemVfdCljdXItPmNx
ZS5yZXMgIT0gKHNpemVfdClzdGF0ZS0+aW92Lmlvdl9sZW4pIHsKKwkJREJHX0VSUigiJXA6
IEludmFsaWQgbGFzdF9yZWFkPSV6dSAoMHglengpIG9mcz0lenUgKDB4JXp4KSBsZW49JXp1
ICgweCV6eCkgbnJlYWQ9JXp1ICgweCV6eCkgZW9mPSV6dSAoMHglengpIGJsa3M9JXp1IGJs
b2Nrcz0lenUgJXMgJXNcbiIsCisJCQlzdGF0ZSwKKwkJCShzaXplX3Qpc3RhdGUtPm5yZWFk
LAorCQkJKHNpemVfdClzdGF0ZS0+bnJlYWQsCisJCQkoc2l6ZV90KXN0YXRlLT5vZmZzZXQs
CisJCQkoc2l6ZV90KXN0YXRlLT5vZmZzZXQsCisJCQkoc2l6ZV90KXN0YXRlLT5pb3YuaW92
X2xlbiwKKwkJCShzaXplX3Qpc3RhdGUtPmlvdi5pb3ZfbGVuLAorCQkJKHNpemVfdCljdXIt
PmNxZS5yZXMsCisJCQkoc2l6ZV90KWN1ci0+Y3FlLnJlcywKKwkJCShzaXplX3Qpc3RhdGUt
PmZzcC0+ZnNwX25hbWUtPnN0LnN0X2V4X3NpemUsCisJCQkoc2l6ZV90KXN0YXRlLT5mc3At
PmZzcF9uYW1lLT5zdC5zdF9leF9zaXplLAorCQkJKHNpemVfdClzdGF0ZS0+ZnNwLT5mc3Bf
bmFtZS0+c3Quc3RfZXhfYmxrc2l6ZSwKKwkJCShzaXplX3Qpc3RhdGUtPmZzcC0+ZnNwX25h
bWUtPnN0LnN0X2V4X2Jsb2NrcywKKwkJCWZzcF9zdHJfZGJnKHN0YXRlLT5mc3ApLAorCQkJ
ZnNwX2ZudW1fZGJnKHN0YXRlLT5mc3ApKTsKKwl9IGVsc2UgeworCQlEQkdfV0FSTklORygi
JXA6IGxhc3RfcmVhZD0lenUgKDB4JXp4KSBvZnM9JXp1ICgweCV6eCkgbGVuPSV6dSAoMHgl
engpIG5yZWFkPSV6dSAoMHglengpIGVvZj0lenUgKDB4JXp4KSBibGtzPSV6dSBibG9ja3M9
JXp1ICVzICVzXG4iLAorCQkJc3RhdGUsCisJCQkoc2l6ZV90KXN0YXRlLT5ucmVhZCwKKwkJ
CShzaXplX3Qpc3RhdGUtPm5yZWFkLAorCQkJKHNpemVfdClzdGF0ZS0+b2Zmc2V0LAorCQkJ
KHNpemVfdClzdGF0ZS0+b2Zmc2V0LAorCQkJKHNpemVfdClzdGF0ZS0+aW92Lmlvdl9sZW4s
CisJCQkoc2l6ZV90KXN0YXRlLT5pb3YuaW92X2xlbiwKKwkJCShzaXplX3QpY3VyLT5jcWUu
cmVzLAorCQkJKHNpemVfdCljdXItPmNxZS5yZXMsCisJCQkoc2l6ZV90KXN0YXRlLT5mc3At
PmZzcF9uYW1lLT5zdC5zdF9leF9zaXplLAorCQkJKHNpemVfdClzdGF0ZS0+ZnNwLT5mc3Bf
bmFtZS0+c3Quc3RfZXhfc2l6ZSwKKwkJCShzaXplX3Qpc3RhdGUtPmZzcC0+ZnNwX25hbWUt
PnN0LnN0X2V4X2Jsa3NpemUsCisJCQkoc2l6ZV90KXN0YXRlLT5mc3AtPmZzcF9uYW1lLT5z
dC5zdF9leF9ibG9ja3MsCisJCQlmc3Bfc3RyX2RiZyhzdGF0ZS0+ZnNwKSwKKwkJCWZzcF9m
bnVtX2RiZyhzdGF0ZS0+ZnNwKSk7CisJfQorCiAJaWYgKGN1ci0+Y3FlLnJlcyA9PSAwKSB7
CiAJCS8qCiAJCSAqIFdlIHJlYWNoZWQgRU9GLCB3ZSdyZSBkb25lCi0tIAoyLjE3LjEKCg==
--------------D1151C684579449A919F906B--

--bumUFoeiG9eVocxsxNHHy7EVLi61IrrVN--

--4Io1dyyQp4tLVvQRagVnigHsy2Lbjt4Xi
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: OpenPGP digital signature
Content-Disposition: attachment; filename="signature.asc"

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEfFbGo3YXpfgryIw9DbX1YShpvVYFAl6114cACgkQDbX1YShp
vVZbvhAAqw8ahlW7CxcmlObhPUMRgrXcRVdZz7FarES1eGDw4tQpKHr7kkYKuUYv
Fe5ONtbOPhP7guukmhPWqytCfslmZ5kA2YogYYMIqiveDuRABdUcsrD/eYmB62ve
g5/x8nXqgNIPTdGLlJcPFbY20xpUU11J3ANWxJarw83ymFxVRpZu2cbcTGvCiedv
Dzttl536r8kVfPvptXZsav++Fr+yah5VETV7A4l1chuU8p1kM5sviMMcJbD9W4fW
uNFpYBbcyhSA2XaW2brq176MaB2JAkEMitRwyDNifhtdSRbabiw+tHTF/nIYyHke
WwDKMpIJar7PN6JAg0OL3R6PODVc1HhXVR8BPSqWz7952GAedA56nmGgjIfNfDDS
RQQ7JeGXTZwbfKQ9Ma7vTEfwDv+ar501lCk356wnAhsFI+awwOY0NrHK7yMw8XcI
viMkSAALeMqe+frC4Has5X8+VQIOiZsjql5QgujnYTLAOOczAjW2sY1iLoghfbGj
mY8W2Lksws50AVIovxcK4336WW5UVy1nRKeUiCm488V2UNkth27jMK6o7qBhruji
tUXXRyPFDO0Gh8a6tg6UVFzijmSJXMBDzRMh0+BLLAmRffOKLONuBvUw5t6qo3SD
jeN1FJ1cOk9TbAeCiHEhYsNympfm8q42McOw2TwAlH6mCQtqlXg=
=0Vui
-----END PGP SIGNATURE-----

--4Io1dyyQp4tLVvQRagVnigHsy2Lbjt4Xi--

