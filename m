Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::443:1])
	by mail.lfdr.de (Postfix) with ESMTPS id 965A61B408
	for <lists+samba-technical@lfdr.de>; Mon, 13 May 2019 12:28:24 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=Cc:From:List-Id:Subject:To:Date;
	bh=NyteEtaejUFdkNw6ltIC3vcal30vCHkLexiCTtyjUZY=; b=iWUv7dA2pTsl4hCpYxX11xDff2
	EuL5YcPb0GALtA5/cTXogGnJKN0/RZDWKb+XO8SWEcCqokAoNPKx9OOdDcvbC4Cby0plk/hgbXIfl
	r1EHdlxyi5kYB6+gajUufkjEKdcKeJpyxNGO4m1qEXCP7K72pxwiPmsu+PBhRFgLmv+Wq3j/OmSwc
	6qiKGrFdTQpXccoZW7YHSsfpgLpEPT5hgbHQxSqe5MeLZf1K9R9WQ/Nr0kWyEEVh8XpzTnpywWMUB
	UrH+oOvp5SmwYe7B6ZRw2tHwoJw7vQzwpAiDzEkeU0OW1Q/n8htN3qaryi2K4BIJv2PlarcaKO1F+
	Y0zJR4WA==;
Received: from localhost ([::1]:25058 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1hQ8BX-003Kjl-Ui; Mon, 13 May 2019 10:27:56 +0000
Received: from mx2.suse.de ([195.135.220.15]:53132 helo=mx1.suse.de) 
 by hr1.samba.org with esmtps (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256)
 (Exim) id 1hQ8BR-003Kje-CY
 for samba-technical@lists.samba.org; Mon, 13 May 2019 10:27:53 +0000
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id 1ABFCACAE;
 Mon, 13 May 2019 10:27:41 +0000 (UTC)
Date: Mon, 13 May 2019 12:27:38 +0200
To: Jeremy Allison <jra@samba.org>
Subject: Re: [PATCH] Samba: CephFS Snapshots VFS module
Message-ID: <20190513122738.78b2b566@suse.de>
In-Reply-To: <20190510185841.GA54524@jra4>
References: <20190329184531.0c78e06b@echidna.suse.de>
 <20190508224740.GA21367@jra4> <20190510151601.798bee61@suse.de>
 <20190510185841.GA54524@jra4>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="MP_/ONc0h43l7LTACVLQlPm8iXu"
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: David Disseldorp via samba-technical <samba-technical@lists.samba.org>
Reply-To: David Disseldorp <ddiss@suse.de>
Cc: "ceph-devel@vger.kernel.org" <ceph-devel@vger.kernel.org>,
 Jeremy Allison via samba-technical <samba-technical@lists.samba.org>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>

--MP_/ONc0h43l7LTACVLQlPm8iXu
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On Fri, 10 May 2019 11:58:41 -0700, Jeremy Allison wrote:

> Can you change the comment to be:
> 
> +       /*
> +        * found snapshot via parent. Append the child path component
> +        * that was trimmed... +1 for path separator + 1 for null termination.
> +        */
> +       if (strlen(_converted_buf) + 1 + strlen(trimmed) + 1 > buflen) {
> +               return -EINVAL;
> +       }
> 
> Just to use the expected idion of '>' rather than the rarer
> '>=' when checking string overruns.  
> 
> So the result would be:
> 
> +       /*
> +        * found snapshot via parent. Append the child path component
> +        * that was trimmed... +1 for path separator + 1 for null termination.
> +        */
> +       if (strlen(_converted_buf) + 1 + strlen(trimmed) + 1 > buflen) {
> +               return -EINVAL;
> +       }
> +       strlcat(_converted_buf, "/", buflen);
> +       strlcat(_converted_buf, trimmed, buflen);

Changed.

> Second comment - in ceph_snap_gmt_opendir() you do:
> 
> +       dir = SMB_VFS_NEXT_OPENDIR(handle, conv_smb_fname, mask, attr);
> +       saved_errno = errno;
> +       TALLOC_FREE(conv_smb_fname);
> +       errno = saved_errno;
> +       return dir;
> 
> - NB, you're saving errno and restoring over the TALLOC_FREE(conv_smb_fname);
> I think that's the right thing to do (you never know
> if TALLOC_FREE might do a syscall to overwrite errno).

I really wish we didn't use errno across the VFS interface :-)
New saved_errno version attached...

Cheers, David

--MP_/ONc0h43l7LTACVLQlPm8iXu
Content-Type: text/x-patch
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=vfs_ceph_snapshots_v3.patchset

RnJvbSBkZGQ0NTE0MjkyNDI3MTRmZWFiODg0NGU1NjYwZDM0ZmRiYjU5YTU1IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQ0KRnJvbTogRGF2aWQgRGlzc2VsZG9ycCA8ZGRpc3NAc2FtYmEub3JnPg0K
RGF0ZTogV2VkLCAyNyBNYXIgMjAxOSAxMzoxMDowNCArMDEwMA0KU3ViamVjdDogW1BBVENIIDEv
M10gdmZzX2NlcGg6IGRyb3AgZmRvcGVuZGlyIGhhbmRsZXINCg0KbGliY2VwaGZzIGRvZXNuJ3Qg
Y3VycmVudGx5IG9mZmVyIGFuIGZkb3BlbmRpciBlcXVpdmFsZW50LCBzbyB0aGUNCmV4aXN0aW5n
IGltcGxlbWVudGF0aW9uIHBlZWtzIGF0IGZzcC0+ZnNwX25hbWUtPmJhc2VfbmFtZSwgd2hpY2gg
Y2FuDQpicmVhayBpZiB2ZnNfY2VwaCBpcyB1c2VkIHVuZGVyIGEgc2VwYXJhdGUgcGF0aC1tdW5n
aW5nIFZGUyBtb2R1bGUuDQoNClJldHVybiBFTk9TWVMgaW5zdGVhZCBhbmQgcmVseSBvbiBleGlz
dGluZyBPcGVuRGlyX2ZzcCgpIGZhbGxiYWNrLg0KDQpTaWduZWQtb2ZmLWJ5OiBEYXZpZCBEaXNz
ZWxkb3JwIDxkZGlzc0BzYW1iYS5vcmc+DQotLS0NCiBzb3VyY2UzL21vZHVsZXMvdmZzX2NlcGgu
YyB8IDE1ICsrKy0tLS0tLS0tLS0tLQ0KIDEgZmlsZSBjaGFuZ2VkLCAzIGluc2VydGlvbnMoKyks
IDEyIGRlbGV0aW9ucygtKQ0KDQpkaWZmIC0tZ2l0IGEvc291cmNlMy9tb2R1bGVzL3Zmc19jZXBo
LmMgYi9zb3VyY2UzL21vZHVsZXMvdmZzX2NlcGguYw0KaW5kZXggNmYyOTYyOTU2NmUuLmUxZjNk
NzU3YmYxIDEwMDY0NA0KLS0tIGEvc291cmNlMy9tb2R1bGVzL3Zmc19jZXBoLmMNCisrKyBiL3Nv
dXJjZTMvbW9kdWxlcy92ZnNfY2VwaC5jDQpAQCAtMzI4LDE4ICszMjgsOSBAQCBzdGF0aWMgRElS
ICpjZXBod3JhcF9mZG9wZW5kaXIoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQog
CQkJICAgICAgIGNvbnN0IGNoYXIgKm1hc2ssDQogCQkJICAgICAgIHVpbnQzMl90IGF0dHJpYnV0
ZXMpDQogew0KLQlpbnQgcmV0ID0gMDsNCi0Jc3RydWN0IGNlcGhfZGlyX3Jlc3VsdCAqcmVzdWx0
Ow0KLQlEQkdfREVCVUcoIltDRVBIXSBmZG9wZW5kaXIoJXAsICVwKVxuIiwgaGFuZGxlLCBmc3Ap
Ow0KLQ0KLQlyZXQgPSBjZXBoX29wZW5kaXIoaGFuZGxlLT5kYXRhLCBmc3AtPmZzcF9uYW1lLT5i
YXNlX25hbWUsICZyZXN1bHQpOw0KLQlpZiAocmV0IDwgMCkgew0KLQkJcmVzdWx0ID0gTlVMTDsN
Ci0JCWVycm5vID0gLXJldDsgLyogV2UgcmV0dXJuIHJlc3VsdCB3aGljaCBpcyBOVUxMIGluIHRo
aXMgY2FzZSAqLw0KLQl9DQotDQotCURCR19ERUJVRygiW0NFUEhdIGZkb3BlbmRpciguLi4pID0g
JWRcbiIsIHJldCk7DQotCXJldHVybiAoRElSICopIHJlc3VsdDsNCisJLyogT3BlbkRpcl9mc3Ao
KSBmYWxscyBiYWNrIHRvIHJlZ3VsYXIgb3BlbiAqLw0KKwllcnJubyA9IEVOT1NZUzsNCisJcmV0
dXJuIE5VTEw7DQogfQ0KIA0KIHN0YXRpYyBzdHJ1Y3QgZGlyZW50ICpjZXBod3JhcF9yZWFkZGly
KHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLA0KLS0gDQoyLjE2LjQNCg0KDQpGcm9t
IGQ2ODQ2MDlmZTBkMzIwNDY3ZTliMzQ3NDc0YjBhMGExNjNkNTk3MmEgTW9uIFNlcCAxNyAwMDow
MDowMCAyMDAxDQpGcm9tOiBEYXZpZCBEaXNzZWxkb3JwIDxkZGlzc0BzYW1iYS5vcmc+DQpEYXRl
OiBUdWUsIDI2IE1hciAyMDE5IDE2OjM1OjE4ICswMTAwDQpTdWJqZWN0OiBbUEFUQ0ggMi8zXSB2
ZnM6IGFkZCBjZXBoX3NuYXBzaG90cyBtb2R1bGUNCg0KdmZzX2NlcGhfc25hcHNob3RzIGlzIGEg
bW9kdWxlIGZvciBhY2Nlc3NpbmcgQ2VwaEZTIHNuYXBzaG90cyBhcw0KUHJldmlvdXMgVmVyc2lv
bnMuIFRoZSBtb2R1bGUgaXMgc2VwYXJhdGUgZnJvbSB2ZnNfY2VwaCwgc28gdGhhdCBpdCBjYW4N
CmFsc28gYmUgdXNlZCBhdG9wIGEgQ2VwaEZTIGtlcm5lbCBiYWNrZWQgc2hhcmUgd2l0aCB2ZnNf
ZGVmYXVsdC4NCg0KU2lnbmVkLW9mZi1ieTogRGF2aWQgRGlzc2VsZG9ycCA8ZGRpc3NAc2FtYmEu
b3JnPg0KLS0tDQogc291cmNlMy9tb2R1bGVzL3Zmc19jZXBoX3NuYXBzaG90cy5jIHwgMTg1MyAr
KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrDQogc291cmNlMy9tb2R1bGVzL3dzY3Jp
cHRfYnVpbGQgICAgICAgIHwgICAgOCArDQogc291cmNlMy93c2NyaXB0ICAgICAgICAgICAgICAg
ICAgICAgIHwgICAgNSArDQogMyBmaWxlcyBjaGFuZ2VkLCAxODY2IGluc2VydGlvbnMoKykNCiBj
cmVhdGUgbW9kZSAxMDA2NDQgc291cmNlMy9tb2R1bGVzL3Zmc19jZXBoX3NuYXBzaG90cy5jDQoN
CmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvdmZzX2NlcGhfc25hcHNob3RzLmMgYi9zb3Vy
Y2UzL21vZHVsZXMvdmZzX2NlcGhfc25hcHNob3RzLmMNCm5ldyBmaWxlIG1vZGUgMTAwNjQ0DQpp
bmRleCAwMDAwMDAwMDAwMC4uN2FjYjQ4NzRhMTUNCi0tLSAvZGV2L251bGwNCisrKyBiL3NvdXJj
ZTMvbW9kdWxlcy92ZnNfY2VwaF9zbmFwc2hvdHMuYw0KQEAgLTAsMCArMSwxODUzIEBADQorLyoN
CisgKiBNb2R1bGUgZm9yIGFjY2Vzc2luZyBDZXBoRlMgc25hcHNob3RzIGFzIFByZXZpb3VzIFZl
cnNpb25zLiBUaGlzIG1vZHVsZSBpcw0KKyAqIHNlcGFyYXRlIHRvIHZmc19jZXBoLCBzbyB0aGF0
IGl0IGNhbiBhbHNvIGJlIHVzZWQgYXRvcCBhIENlcGhGUyBrZXJuZWwgYmFja2VkDQorICogc2hh
cmUgd2l0aCB2ZnNfZGVmYXVsdC4NCisgKg0KKyAqIENvcHlyaWdodCAoQykgRGF2aWQgRGlzc2Vs
ZG9ycCAyMDE5DQorICoNCisgKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNh
biByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KKyAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQorICogdGhl
IEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5z
ZSwgb3INCisgKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLg0KKyAqDQorICog
VGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1
c2VmdWwsDQorICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGlt
cGxpZWQgd2FycmFudHkgb2YNCisgKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQ
QVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQorICogR05VIEdlbmVyYWwgUHVibGljIExpY2Vu
c2UgZm9yIG1vcmUgZGV0YWlscy4NCisgKg0KKyAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBh
IGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQorICogYWxvbmcgd2l0aCB0
aGlzIHByb2dyYW07IGlmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4N
CisgKi8NCisNCisjaW5jbHVkZSA8ZGlyZW50Lmg+DQorI2luY2x1ZGUgPGxpYmdlbi5oPg0KKyNp
bmNsdWRlICJpbmNsdWRlcy5oIg0KKyNpbmNsdWRlICJpbmNsdWRlL250aW9jdGwuaCINCisjaW5j
bHVkZSAiaW5jbHVkZS9zbWIuaCINCisjaW5jbHVkZSAic3lzdGVtL2ZpbGVzeXMuaCINCisjaW5j
bHVkZSAic21iZC9zbWJkLmgiDQorI2luY2x1ZGUgImxpYi91dGlsL3RldmVudF9udHN0YXR1cy5o
Ig0KKw0KKyN1bmRlZiBEQkdDX0NMQVNTDQorI2RlZmluZSBEQkdDX0NMQVNTIERCR0NfVkZTDQor
DQorLyoNCisgKiBDZXBoRlMgaGFzIGEgbWFnaWMgc25hcHNob3RzIHN1YmRpcmVjdG9yeSBpbiBh
bGwgcGFydHMgb2YgdGhlIGRpcmVjdG9yeSB0cmVlLg0KKyAqIFRoaXMgbW9kdWxlIGF1dG9tYXRp
Y2FsbHkgbWFrZXMgYWxsIHNuYXBzaG90cyBpbiB0aGlzIHN1YmRpciB2aXNpYmxlIHRvIFNNQg0K
KyAqIGNsaWVudHMgKGlmIHBlcm1pdHRlZCBieSBjb3JyZXNwb25kaW5nIGFjY2VzcyBjb250cm9s
KS4NCisgKi8NCisjZGVmaW5lIENFUEhfU05BUF9TVUJESVJfREVGQVVMVCAiLnNuYXAiDQorLyoN
CisgKiBUaGUgY2VwaC5zbmFwLmJ0aW1lICh2aXJ0dWFsKSBleHRlbmRlZCBhdHRyaWJ1dGUgY2Fy
cmllcyB0aGUgc25hcHNob3QNCisgKiBjcmVhdGlvbiB0aW1lIGluICRzZWNzLiRuc2VjcyBmb3Jt
YXQuIEl0IHdhcyBhZGRlZCBhcyBwYXJ0IG9mDQorICogaHR0cHM6Ly90cmFja2VyLmNlcGguY29t
L2lzc3Vlcy8zODgzOC4gUnVubmluZyBTYW1iYSBhdG9wIG9sZCBDZXBoIHZlcnNpb25zDQorICog
d2hpY2ggZG9uJ3QgcHJvdmlkZSB0aGlzIHhhdHRyIHdpbGwgbm90IGJlIGFibGUgdG8gZW51bWVy
YXRlIG9yIGFjY2Vzcw0KKyAqIHNuYXBzaG90cyB1c2luZyB0aGlzIG1vZHVsZS4gQXMgYW4gYWx0
ZXJuYXRpdmUsIHZmc19zaGFkb3dfY29weTIgY291bGQgYmUNCisgKiB1c2VkIGluc3RlYWQsIGFs
b25nc2lkZSBzcGVjaWFsIHNoYWRvdzpmb3JtYXQgc25hcHNob3QgZGlyZWN0b3J5IG5hbWVzLg0K
KyAqLw0KKyNkZWZpbmUgQ0VQSF9TTkFQX0JUSU1FX1hBVFRSICJjZXBoLnNuYXAuYnRpbWUiDQor
DQorc3RhdGljIGludCBjZXBoX3NuYXBfZ2V0X2J0aW1lKHN0cnVjdCB2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZGxlLA0KKwkJCSAgICAgICBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpzbWJfZm5hbWUsDQor
CQkJICAgICAgIHRpbWVfdCAqX3NuYXBfc2VjcykNCit7DQorCWludCByZXQ7DQorCWNoYXIgc25h
cF9idGltZVszM107DQorCWNoYXIgKnMgPSBOVUxMOw0KKwljaGFyICplbmRwdHIgPSBOVUxMOw0K
KwlzdHJ1Y3QgdGltZXNwZWMgc25hcF90aW1lc3BlYzsNCisJaW50IGVycjsNCisNCisJcmV0ID0g
U01CX1ZGU19ORVhUX0dFVFhBVFRSKGhhbmRsZSwgc21iX2ZuYW1lLCBDRVBIX1NOQVBfQlRJTUVf
WEFUVFIsDQorCQkJCSAgICBzbmFwX2J0aW1lLCBzaXplb2Yoc25hcF9idGltZSkpOw0KKwlpZiAo
cmV0IDwgMCkgew0KKwkJREJHX0VSUigiZmFpbGVkIHRvIGdldCAlcyB4YXR0cjogJXNcbiIsDQor
CQkJQ0VQSF9TTkFQX0JUSU1FX1hBVFRSLCBzdHJlcnJvcihlcnJubykpOw0KKwkJcmV0dXJuIC1l
cnJubzsNCisJfQ0KKw0KKwlpZiAocmV0ID09IDAgfHwgcmV0ID49IHNpemVvZihzbmFwX2J0aW1l
KSAtIDEpIHsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9DQorDQorCS8qIGVuc3VyZSB6ZXJvIHRl
cm1pbmF0aW9uICovDQorCXNuYXBfYnRpbWVbcmV0XSA9ICdcMCc7DQorDQorCS8qIGZvcm1hdCBp
cyBzZWMubnNlYyAqLw0KKwlzID0gc3RyY2hyKHNuYXBfYnRpbWUsICcuJyk7DQorCWlmIChzID09
IE5VTEwpIHsNCisJCURCR19FUlIoImludmFsaWQgJXMgeGF0dHIgdmFsdWU6ICVzXG4iLA0KKwkJ
CUNFUEhfU05BUF9CVElNRV9YQVRUUiwgc25hcF9idGltZSk7DQorCQlyZXR1cm4gLUVJTlZBTDsN
CisJfQ0KKw0KKwkvKiBGaXJzdCBjb21wb25lbnQgaXMgc2Vjb25kcywgZXh0cmFjdCBpdCAqLw0K
KwkqcyA9ICdcMCc7DQorCXNuYXBfdGltZXNwZWMudHZfc2VjID0gc3RydG91bGxfZXJyKHNuYXBf
YnRpbWUsICZlbmRwdHIsIDEwLCAmZXJyKTsNCisJaWYgKGVyciAhPSAwKSB7DQorCQlyZXR1cm4g
LWVycjsNCisJfQ0KKwlpZiAoKGVuZHB0ciA9PSBzbmFwX2J0aW1lKSB8fCAoKmVuZHB0ciAhPSAn
XDAnKSkgew0KKwkJREJHX0VSUigiY291bGRuJ3QgcHJvY2VzcyBzbmFwLnR2X3NlYyBpbiAlc1xu
Iiwgc25hcF9idGltZSk7DQorCQlyZXR1cm4gLUVJTlZBTDsNCisJfQ0KKw0KKwkvKiBzZWNvbmQg
Y29tcG9uZW50IGlzIG5zZWNzICovDQorCXMrKzsNCisJc25hcF90aW1lc3BlYy50dl9uc2VjID0g
c3RydG91bF9lcnIocywgJmVuZHB0ciwgMTAsICZlcnIpOw0KKwlpZiAoZXJyICE9IDApIHsNCisJ
CXJldHVybiAtZXJyOw0KKwl9DQorCWlmICgoZW5kcHRyID09IHMpIHx8ICgqZW5kcHRyICE9ICdc
MCcpKSB7DQorCQlEQkdfRVJSKCJjb3VsZG4ndCBwcm9jZXNzIHNuYXAudHZfbnNlYyBpbiAlc1xu
Iiwgcyk7DQorCQlyZXR1cm4gLUVJTlZBTDsNCisJfQ0KKw0KKwkvKg0KKwkgKiA+PiAzMCBpcyBh
IHJvdWdoIGRpdmlkZSBieSB+MTAqKjkuIE5vIG5lZWQgdG8gYmUgZXhhY3QsIGFzIEBHTVQNCisJ
ICogdG9rZW5zIG9ubHkgb2ZmZXIgMS1zZWNvbmQgcmVzb2x1dGlvbiAod2hpbGUgdHdycCBpcyBu
c2VjKS4NCisJICovDQorCSpfc25hcF9zZWNzID0gc25hcF90aW1lc3BlYy50dl9zZWMgKyAoc25h
cF90aW1lc3BlYy50dl9uc2VjID4+IDMwKTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KKy8qDQor
ICogWFhYIENlcGggc25hcHNob3RzIGNhbiBiZSBjcmVhdGVkIHdpdGggc3ViLXNlY29uZCBncmFu
dWxhcml0eSwgd2hpY2ggbWVhbnMNCisgKiB0aGF0IG11bHRpcGxlIHNuYXBzaG90cyBtYXkgYmUg
bWFwcGVkIHRvIHRoZSBzYW1lIEBHTVQtIGxhYmVsLg0KKyAqDQorICogQHRoaXNfbGFiZWwgaXMg
YSBwcmUtemVyb2VkIGJ1ZmZlciB0byBiZSBmaWxsZWQgd2l0aCBhIEBHTVQgbGFiZWwNCisgKiBA
cmV0dXJuIDAgaWYgbGFiZWwgc3VjY2Vzc2Z1bGx5IGZpbGxlZCBvciAtZXJybm8gb24gZXJyb3Iu
DQorICovDQorc3RhdGljIGludCBjZXBoX3NuYXBfZmlsbF9sYWJlbChzdHJ1Y3QgdmZzX2hhbmRs
ZV9zdHJ1Y3QgKmhhbmRsZSwNCisJCQkJVEFMTE9DX0NUWCAqdG1wX2N0eCwNCisJCQkJY29uc3Qg
Y2hhciAqcGFyZW50X3NuYXBzZGlyLA0KKwkJCQljb25zdCBjaGFyICpzdWJkaXIsDQorCQkJCVNI
QURPV19DT1BZX0xBQkVMIHRoaXNfbGFiZWwpDQorew0KKwlzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpz
bWJfZm5hbWU7DQorCXRpbWVfdCBzbmFwX3NlY3M7DQorCXN0cnVjdCB0bSBnbXRfc25hcF90aW1l
Ow0KKwlzdHJ1Y3QgdG0gKnRtX3JldDsNCisJc2l6ZV90IHN0cl9zejsNCisJY2hhciBzbmFwX3Bh
dGhbUEFUSF9NQVggKyAxXTsNCisJc3RydWN0IHRpbWVzcGVjIHNuYXBfdGltZXNwZWM7DQorCWlu
dCByZXQ7DQorDQorCS8qDQorCSAqIENlcGhGUyBzbmFwc2hvdCBjcmVhdGlvbiB0aW1lcyBhcmUg
YXZhaWxhYmxlIHZpYSBhIHNwZWNpYWwNCisJICogeGF0dHIgLSBzbmFwc2hvdCBiL20vY3RpbWVz
IGFsbCBtYXRjaCB0aGUgc25hcCBzb3VyY2UuDQorCSAqLw0KKwlyZXQgPSBzbnByaW50ZihzbmFw
X3BhdGgsIHNpemVvZihzbmFwX3BhdGgpLCAiJXMvJXMiLA0KKwkJCXBhcmVudF9zbmFwc2Rpciwg
c3ViZGlyKTsNCisJaWYgKHJldCA+PSBzaXplb2Yoc25hcF9wYXRoKSkgew0KKwkJcmV0dXJuIC1F
SU5WQUw7DQorCX0NCisNCisJc21iX2ZuYW1lID0gc3ludGhldGljX3NtYl9mbmFtZSh0bXBfY3R4
LCBzbmFwX3BhdGgsDQorCQkJCQlOVUxMLCBOVUxMLCAwKTsNCisJaWYgKHNtYl9mbmFtZSA9PSBO
VUxMKSB7DQorCQlyZXR1cm4gLUVOT01FTTsNCisJfQ0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ2V0
X2J0aW1lKGhhbmRsZSwgc21iX2ZuYW1lLCAmc25hcF9zZWNzKTsNCisJaWYgKHJldCA8IDApIHsN
CisJCXJldHVybiByZXQ7DQorCX0NCisNCisJdG1fcmV0ID0gZ210aW1lX3IoJnNuYXBfc2Vjcywg
JmdtdF9zbmFwX3RpbWUpOw0KKwlpZiAodG1fcmV0ID09IE5VTEwpIHsNCisJCXJldHVybiAtRUlO
VkFMOw0KKwl9DQorCXN0cl9zeiA9IHN0cmZ0aW1lKHRoaXNfbGFiZWwsIHNpemVvZihTSEFET1df
Q09QWV9MQUJFTCksDQorCQkJICAiQEdNVC0lWS4lbS4lZC0lSC4lTS4lUyIsICZnbXRfc25hcF90
aW1lKTsNCisJaWYgKHN0cl9zeiA9PSAwKSB7DQorCQlEQkdfRVJSKCJmYWlsZWQgdG8gY29udmVy
dCB0bSB0byBAR01UIHRva2VuXG4iKTsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9DQorDQorCURC
R19ERUJVRygibWFwcGVkIHNuYXBzaG90IGF0ICVzIHRvIGVudW0gc25hcHMgbGFiZWwgJXNcbiIs
DQorCQkgIHNuYXBfcGF0aCwgdGhpc19sYWJlbCk7DQorDQorCXJldHVybiAwOw0KK30NCisNCitz
dGF0aWMgaW50IGNlcGhfc25hcF9lbnVtX3NuYXBkaXIoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0
ICpoYW5kbGUsDQorCQkJCSAgc3RydWN0IHNtYl9maWxlbmFtZSAqc25hcHNfZG5hbWUsDQorCQkJ
CSAgYm9vbCBsYWJlbHMsDQorCQkJCSAgc3RydWN0IHNoYWRvd19jb3B5X2RhdGEgKnNjX2RhdGEp
DQorew0KKwlOVFNUQVRVUyBzdGF0dXM7DQorCWludCByZXQ7DQorCURJUiAqZCA9IE5VTEw7DQor
CXN0cnVjdCBkaXJlbnQgKmUgPSBOVUxMOw0KKwl1aW50MzJfdCBzbG90czsNCisNCisJc3RhdHVz
ID0gc21iZF9jaGVja19hY2Nlc3NfcmlnaHRzKGhhbmRsZS0+Y29ubiwNCisJCQkJCXNuYXBzX2Ru
YW1lLA0KKwkJCQkJZmFsc2UsDQorCQkJCQlTRUNfRElSX0xJU1QpOw0KKwlpZiAoIU5UX1NUQVRV
U19JU19PSyhzdGF0dXMpKSB7DQorCQlERUJVRygwLCgidXNlciBkb2VzIG5vdCBoYXZlIGxpc3Qg
cGVybWlzc2lvbiAiDQorCQkJIm9uIHNuYXBkaXIgJXNcbiIsDQorCQkJc25hcHNfZG5hbWUtPmJh
c2VfbmFtZSkpOw0KKwkJcmV0ID0gLW1hcF9lcnJub19mcm9tX250X3N0YXR1cyhzdGF0dXMpOw0K
KwkJZ290byBlcnJfb3V0Ow0KKwl9DQorDQorCURCR19ERUJVRygiZW51bWVyYXRpbmcgc2hhZG93
IGNvcHkgZGlyIGF0ICVzXG4iLA0KKwkJICBzbmFwc19kbmFtZS0+YmFzZV9uYW1lKTsNCisNCisJ
LyoNCisJICogQ2VwaEZTIHN0YXQoZGlyKS5zaXplICpub3JtYWxseSogcmV0dXJucyB0aGUgbnVt
YmVyIG9mIGNoaWxkIGVudHJpZXMNCisJICogZm9yIGEgZ2l2ZW4gZGlyLCBidXQgaXQgdW5mb3J0
dW5hdGVseSB0aGF0J3Mgbm90IHRoZSBjYXNlIGZvciB0aGUgb25lDQorCSAqIHBsYWNlIHdlIG5l
ZWQgaXQgKGRpcj0uc25hcCksIHNvIHdlIG5lZWQgdG8gZHluYW1pY2FsbHkgZGV0ZXJtaW5lIGl0
DQorCSAqIHZpYSByZWFkZGlyLg0KKwkgKi8NCisJZCA9IFNNQl9WRlNfTkVYVF9PUEVORElSKGhh
bmRsZSwgc25hcHNfZG5hbWUsIE5VTEwsIDApOw0KKwlpZiAoZCA9PSBOVUxMKSB7DQorCQlyZXQg
PSAtZXJybm87DQorCQlnb3RvIGVycl9vdXQ7DQorCX0NCisNCisJc2xvdHMgPSAwOw0KKwlzY19k
YXRhLT5udW1fdm9sdW1lcyA9IDA7DQorCXNjX2RhdGEtPmxhYmVscyA9IE5VTEw7DQorDQorCWZv
ciAoZSA9IFNNQl9WRlNfTkVYVF9SRUFERElSKGhhbmRsZSwgZCwgTlVMTCk7DQorCSAgICAgZSAh
PSBOVUxMOw0KKwkgICAgIGUgPSBTTUJfVkZTX05FWFRfUkVBRERJUihoYW5kbGUsIGQsIE5VTEwp
KSB7DQorCQljaGFyICp0aGlzX2xhYmVsOw0KKw0KKwkJaWYgKElTRE9UKGUtPmRfbmFtZSkgfHwg
SVNET1RET1QoZS0+ZF9uYW1lKSkgew0KKwkJCWNvbnRpbnVlOw0KKwkJfQ0KKwkJc2NfZGF0YS0+
bnVtX3ZvbHVtZXMrKzsNCisJCWlmICghbGFiZWxzKSB7DQorCQkJY29udGludWU7DQorCQl9DQor
CQlpZiAoc2NfZGF0YS0+bnVtX3ZvbHVtZXMgPiBzbG90cykgew0KKwkJCXVpbnQzMl90IG5ld19z
bG90X2NvdW50ID0gc2xvdHMgKyAxMDsNCisJCQlTTUJfQVNTRVJUKG5ld19zbG90X2NvdW50ID4g
c2xvdHMpOw0KKwkJCXNjX2RhdGEtPmxhYmVscyA9IHRhbGxvY19yZWFsbG9jKHNjX2RhdGEsDQor
CQkJCQkJCSBzY19kYXRhLT5sYWJlbHMsDQorCQkJCQkJCSBTSEFET1dfQ09QWV9MQUJFTCwNCisJ
CQkJCQkJIG5ld19zbG90X2NvdW50KTsNCisJCQlpZiAoc2NfZGF0YS0+bGFiZWxzID09IE5VTEwp
IHsNCisJCQkJcmV0ID0gLUVOT01FTTsNCisJCQkJZ290byBlcnJfY2xvc2VkaXI7DQorCQkJfQ0K
KwkJCW1lbXNldChzY19kYXRhLT5sYWJlbHNbc2xvdHNdLCAwLA0KKwkJCSAgICAgICBzaXplb2Yo
U0hBRE9XX0NPUFlfTEFCRUwpICogMTApOw0KKw0KKwkJCURCR19ERUJVRygiJWQtPiVkIHNsb3Rz
IGZvciBlbnVtX3NuYXBzIHJlc3BvbnNlXG4iLA0KKwkJCQkgIHNsb3RzLCBuZXdfc2xvdF9jb3Vu
dCk7DQorCQkJc2xvdHMgPSBuZXdfc2xvdF9jb3VudDsNCisJCX0NCisJCURCR19ERUJVRygiZmls
bGluZyBzaGFkb3cgY29weSBsYWJlbCBmb3IgJXMvJXNcbiIsDQorCQkJICBzbmFwc19kbmFtZS0+
YmFzZV9uYW1lLCBlLT5kX25hbWUpOw0KKwkJcmV0ID0gY2VwaF9zbmFwX2ZpbGxfbGFiZWwoaGFu
ZGxlLCBzbmFwc19kbmFtZSwNCisJCQkJc25hcHNfZG5hbWUtPmJhc2VfbmFtZSwgZS0+ZF9uYW1l
LA0KKwkJCQlzY19kYXRhLT5sYWJlbHNbc2NfZGF0YS0+bnVtX3ZvbHVtZXMgLSAxXSk7DQorCQlp
ZiAocmV0IDwgMCkgew0KKwkJCWdvdG8gZXJyX2Nsb3NlZGlyOw0KKwkJfQ0KKwl9DQorDQorCXJl
dCA9IFNNQl9WRlNfTkVYVF9DTE9TRURJUihoYW5kbGUsIGQpOw0KKwlpZiAocmV0ICE9IDApIHsN
CisJCXJldCA9IC1lcnJubzsNCisJCWdvdG8gZXJyX291dDsNCisJfQ0KKw0KKwlEQkdfREVCVUco
IiVzIHNoYWRvdyBjb3B5IGVudW1lcmF0aW9uIGZvdW5kICVkIGxhYmVscyBcbiIsDQorCQkgIHNu
YXBzX2RuYW1lLT5iYXNlX25hbWUsIHNjX2RhdGEtPm51bV92b2x1bWVzKTsNCisNCisJcmV0dXJu
IDA7DQorDQorZXJyX2Nsb3NlZGlyOg0KKwlTTUJfVkZTX05FWFRfQ0xPU0VESVIoaGFuZGxlLCBk
KTsNCitlcnJfb3V0Og0KKwlUQUxMT0NfRlJFRShzY19kYXRhLT5sYWJlbHMpOw0KKwlyZXR1cm4g
cmV0Ow0KK30NCisNCisvKg0KKyAqIFByaW9yIHJlYWRpbmc6IFRoZSBNZWFuaW5nIG9mIFBhdGgg
TmFtZXMNCisgKiAgIGh0dHBzOi8vd2lraS5zYW1iYS5vcmcvaW5kZXgucGhwL1dyaXRpbmdfYV9T
YW1iYV9WRlNfTW9kdWxlDQorICoNCisgKiB0cmFuc2xhdGUgcGF0aHMgc28gdGhhdCB3ZSBjYW4g
dXNlIHRoZSBwYXJlbnQgZGlyIGZvciAuc25hcCBhY2Nlc3M6DQorICogICBteWZpbGUgICAgICAg
IC0+IHBhcmVudD0gICAgICAgIHRyaW1tZWQ9bXlmaWxlDQorICogICAvYSAgICAgICAgICAgIC0+
IHBhcmVudD0vICAgICAgIHRyaW1tZWQ9YQ0KKyAqICAgZGlyL3N1Yi9maWxlICAtPiBwYXJlbnQ9
ZGlyL3N1YiB0cmltbWVkPWZpbGUNCisgKiAgIC9kaXIvc3ViICAgICAgLT4gcGFyZW50PS9kaXIv
ICAgdHJpbW1lZD1zdWINCisgKi8NCitzdGF0aWMgaW50IGNlcGhfc25hcF9nZXRfcGFyZW50X3Bh
dGgoY29uc3QgY2hhciAqY29ubmVjdHBhdGgsDQorCQkJCSAgICAgY29uc3QgY2hhciAqcGF0aCwN
CisJCQkJICAgICBjaGFyICpfcGFyZW50X2J1ZiwNCisJCQkJICAgICBzaXplX3QgYnVmbGVuLA0K
KwkJCQkgICAgIGNvbnN0IGNoYXIgKipfdHJpbW1lZCkNCit7DQorCWNvbnN0IGNoYXIgKnA7DQor
CXNpemVfdCBsZW47DQorCWludCByZXQ7DQorDQorCWlmICghc3RyY21wKHBhdGgsICIvIikpIHsN
CisJCURCR19FUlIoImNhbid0IGdvIHBhc3Qgcm9vdCBmb3IgJXMgLnNuYXAgZGlyXG4iLCBwYXRo
KTsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9DQorDQorCXAgPSBzdHJyY2hyX20ocGF0aCwgJy8n
KTsgLyogRmluZCBmaW5hbCAnLycsIGlmIGFueSAqLw0KKwlpZiAocCA9PSBOVUxMKSB7DQorCQlE
QkdfREVCVUcoInBhcmVudCAuc25hcCBkaXIgZm9yICVzIGlzIGN3ZFxuIiwgcGF0aCk7DQorCQly
ZXQgPSBzdHJsY3B5KF9wYXJlbnRfYnVmLCAiIiwgYnVmbGVuKTsNCisJCWlmIChyZXQgPj0gYnVm
bGVuKSB7DQorCQkJcmV0dXJuIC1FSU5WQUw7DQorCQl9DQorCQlpZiAoX3RyaW1tZWQgIT0gTlVM
TCkgew0KKwkJCSpfdHJpbW1lZCA9IHBhdGg7DQorCQl9DQorCQlyZXR1cm4gMDsNCisJfQ0KKw0K
KwlTTUJfQVNTRVJUKHAgPj0gcGF0aCk7DQorCWxlbiA9IHAgLSBwYXRoOw0KKw0KKwlyZXQgPSBz
bnByaW50ZihfcGFyZW50X2J1ZiwgYnVmbGVuLCAiJS4qcyIsIGxlbiwgcGF0aCk7DQorCWlmIChy
ZXQgPj0gYnVmbGVuKSB7DQorCQlyZXR1cm4gLUVJTlZBTDsNCisJfQ0KKw0KKwkvKiBmb3IgYWJz
b2x1dGUgcGF0aHMsIGNoZWNrIHRoYXQgd2UncmUgbm90IGdvaW5nIG91dHNpZGUgdGhlIHNoYXJl
ICovDQorCWlmICgobGVuID4gMCkgJiYgKF9wYXJlbnRfYnVmWzBdID09ICcvJykpIHsNCisJCXNp
emVfdCBjbGVuID0gc3RybGVuKGNvbm5lY3RwYXRoKTsNCisJCURCR19ERUJVRygiY2hlY2tpbmcg
YWJzb2x1dGUgcGF0aCAlcyBsaWVzIHdpdGhpbiBzaGFyZSBhdCAlc1xuIiwNCisJCQkgIF9wYXJl
bnRfYnVmLCBjb25uZWN0cGF0aCk7DQorCQkvKiBuZWVkIHRvIGNoZWNrIGZvciBzZXBhcmF0b3Is
IHRvIGF2b2lkIC94L2FiY2QgdnMgL3gvYWIgKi8NCisJCWlmIChzdHJuY21wKGNvbm5lY3RwYXRo
LCBfcGFyZW50X2J1ZiwgY2xlbikNCisJCSB8fCAoX3BhcmVudF9idWZbY2xlbl0gIT0gJy8nKSAm
JiAoX3BhcmVudF9idWZbY2xlbl0gIT0gJ1wwJykpIHsNCisJCQlEQkdfRVJSKCIlcyBwYXJlbnQg
cGF0aCBpcyBvdXRzaWRlIG9mIHNoYXJlIGF0ICVzXG4iLA0KKwkJCQlfcGFyZW50X2J1ZiwgY29u
bmVjdHBhdGgpOw0KKwkJCXJldHVybiAtRUlOVkFMOw0KKwkJfQ0KKwl9DQorDQorCWlmIChfdHJp
bW1lZCAhPSBOVUxMKSB7DQorCQkvKg0KKwkJICogcG9pbnQgdG8gcGF0aCBjb21wb25lbnQgd2hp
Y2ggd2FzIHRyaW1tZWQgZnJvbSBfcGFyZW50X2J1Zg0KKwkJICogZXhjbHVkaW5nIHBhdGggc2Vw
YXJhdG9yLg0KKwkJICovDQorCQkqX3RyaW1tZWQgPSBwICsgMTsNCisJfQ0KKw0KKwlEQkdfREVC
VUcoImdlbmVyYXRlZCBwYXJlbnQgLnNuYXAgcGF0aCBmb3IgJXMgYXMgJXMgKHRyaW1tZWQgXCIl
c1wiKVxuIiwNCisJCSAgcGF0aCwgX3BhcmVudF9idWYsIHAgKyAxKTsNCisNCisJcmV0dXJuIDA7
DQorfQ0KKw0KK3N0YXRpYyBpbnQgY2VwaF9zbmFwX2dldF9zaGFkb3dfY29weV9kYXRhKHN0cnVj
dCB2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLA0KKwkJCQkJc3RydWN0IGZpbGVzX3N0cnVjdCAq
ZnNwLA0KKwkJCQkJc3RydWN0IHNoYWRvd19jb3B5X2RhdGEgKnNjX2RhdGEsDQorCQkJCQlib29s
IGxhYmVscykNCit7DQorCWludCByZXQ7DQorCVRBTExPQ19DVFggKnRtcF9jdHg7DQorCWNvbnN0
IGNoYXIgKnBhcmVudF9kaXIgPSBOVUxMOw0KKwljaGFyIHRtcFtQQVRIX01BWCArIDFdOw0KKwlj
aGFyIHNuYXBzX3BhdGhbUEFUSF9NQVggKyAxXTsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqc25h
cHNfZG5hbWUgPSBOVUxMOw0KKwljb25zdCBjaGFyICpzbmFwZGlyID0gbHBfcGFybV9jb25zdF9z
dHJpbmcoU05VTShoYW5kbGUtPmNvbm4pLA0KKwkJCQkJCSAgICJjZXBoIiwgInNuYXBkaXIiLA0K
KwkJCQkJCSAgIENFUEhfU05BUF9TVUJESVJfREVGQVVMVCk7DQorDQorCURCR19ERUJVRygiZ2V0
dGluZyBzaGFkb3cgY29weSBkYXRhIGZvciAlc1xuIiwNCisJCSAgZnNwLT5mc3BfbmFtZS0+YmFz
ZV9uYW1lKTsNCisNCisJdG1wX2N0eCA9IHRhbGxvY19uZXcoZnNwKTsNCisJaWYgKHRtcF9jdHgg
PT0gTlVMTCkgew0KKwkJcmV0ID0gLUVOT01FTTsNCisJCWdvdG8gZXJyX291dDsNCisJfQ0KKw0K
KwlpZiAoc2NfZGF0YSA9PSBOVUxMKSB7DQorCQlyZXQgPSAtRUlOVkFMOw0KKwkJZ290byBlcnJf
b3V0Ow0KKwl9DQorDQorCWlmIChmc3AtPmlzX2RpcmVjdG9yeSkgew0KKwkJcGFyZW50X2RpciA9
IGZzcC0+ZnNwX25hbWUtPmJhc2VfbmFtZTsNCisJfSBlbHNlIHsNCisJCXJldCA9IGNlcGhfc25h
cF9nZXRfcGFyZW50X3BhdGgoaGFuZGxlLT5jb25uLT5jb25uZWN0cGF0aCwNCisJCQkJCQlmc3At
PmZzcF9uYW1lLT5iYXNlX25hbWUsDQorCQkJCQkJdG1wLA0KKwkJCQkJCXNpemVvZih0bXApLA0K
KwkJCQkJCU5VTEwpOwkvKiB0cmltbWVkICovDQorCQlpZiAocmV0IDwgMCkgew0KKwkJCWdvdG8g
ZXJyX291dDsNCisJCX0NCisJCXBhcmVudF9kaXIgPSB0bXA7DQorCX0NCisNCisJcmV0ID0gc25w
cmludGYoc25hcHNfcGF0aCwgc2l6ZW9mKHNuYXBzX3BhdGgpLCAiJXMvJXMiLA0KKwkJICAgICAg
IHBhcmVudF9kaXIsIHNuYXBkaXIpOw0KKwlpZiAocmV0ID49IHNpemVvZihzbmFwc19wYXRoKSkg
ew0KKwkJcmV0ID0gLUVJTlZBTDsNCisJCWdvdG8gZXJyX291dDsNCisJfQ0KKw0KKwlzbmFwc19k
bmFtZSA9IHN5bnRoZXRpY19zbWJfZm5hbWUodG1wX2N0eCwNCisJCQkJc25hcHNfcGF0aCwNCisJ
CQkJTlVMTCwNCisJCQkJTlVMTCwNCisJCQkJZnNwLT5mc3BfbmFtZS0+ZmxhZ3MpOw0KKwlpZiAo
c25hcHNfZG5hbWUgPT0gTlVMTCkgew0KKwkJcmV0ID0gLUVOT01FTTsNCisJCWdvdG8gZXJyX291
dDsNCisJfQ0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZW51bV9zbmFwZGlyKGhhbmRsZSwgc25hcHNf
ZG5hbWUsIGxhYmVscywgc2NfZGF0YSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQlnb3RvIGVycl9v
dXQ7DQorCX0NCisNCisJdGFsbG9jX2ZyZWUodG1wX2N0eCk7DQorCXJldHVybiAwOw0KKw0KK2Vy
cl9vdXQ6DQorCXRhbGxvY19mcmVlKHRtcF9jdHgpOw0KKwllcnJubyA9IC1yZXQ7DQorCXJldHVy
biAtMTsNCit9DQorDQorc3RhdGljIGJvb2wgY2VwaF9zbmFwX2dtdF9zdHJpcF9zbmFwc2hvdChz
dHJ1Y3QgdmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwNCisJCQkJCSBjb25zdCBjaGFyICpuYW1l
LA0KKwkJCQkJIHRpbWVfdCAqX3RpbWVzdGFtcCwNCisJCQkJCSBjaGFyICpfc3RyaXBwZWRfYnVm
LA0KKwkJCQkJIHNpemVfdCBidWZsZW4pDQorew0KKwlzdHJ1Y3QgdG0gdG07DQorCXRpbWVfdCB0
aW1lc3RhbXA7DQorCWNvbnN0IGNoYXIgKnA7DQorCWNoYXIgKnE7DQorCWNoYXIgKnN0cmlwcGVk
Ow0KKwlzaXplX3QgcmVzdF9sZW4sIGRzdF9sZW47DQorCXB0cmRpZmZfdCBsZW5fYmVmb3JlX2dt
dDsNCisNCisJcCA9IHN0cnN0cl9tKG5hbWUsICJAR01ULSIpOw0KKwlpZiAocCA9PSBOVUxMKSB7
DQorCQlnb3RvIG5vX3NuYXBzaG90Ow0KKwl9DQorCWlmICgocCA+IG5hbWUpICYmIChwWy0xXSAh
PSAnLycpKSB7DQorCQlnb3RvIG5vX3NuYXBzaG90Ow0KKwl9DQorCWxlbl9iZWZvcmVfZ210ID0g
cCAtIG5hbWU7DQorCXEgPSBzdHJwdGltZShwLCBHTVRfRk9STUFULCAmdG0pOw0KKwlpZiAocSA9
PSBOVUxMKSB7DQorCQlnb3RvIG5vX3NuYXBzaG90Ow0KKwl9DQorCXRtLnRtX2lzZHN0ID0gLTE7
DQorCXRpbWVzdGFtcCA9IHRpbWVnbSgmdG0pOw0KKwlpZiAodGltZXN0YW1wID09ICh0aW1lX3Qp
LTEpIHsNCisJCWdvdG8gbm9fc25hcHNob3Q7DQorCX0NCisJaWYgKHFbMF0gPT0gJ1wwJykgew0K
KwkJLyoNCisJCSAqIFRoZSBuYW1lIGNvbnNpc3RzIG9mIG9ubHkgdGhlIEdNVCB0b2tlbiBvciB0
aGUgR01UDQorCQkgKiB0b2tlbiBpcyBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoLg0KKwkJICovDQor
CQlpZiAoX3N0cmlwcGVkX2J1ZiAhPSBOVUxMKSB7DQorCQkJaWYgKGxlbl9iZWZvcmVfZ210ID49
IGJ1Zmxlbikgew0KKwkJCQlyZXR1cm4gLUVJTlZBTDsNCisJCQl9DQorCQkJaWYgKGxlbl9iZWZv
cmVfZ210ID4gMCkgew0KKwkJCQkvKg0KKwkJCQkgKiBUaGVyZSBpcyBhIHNsYXNoIGJlZm9yZSB0
aGUgQEdNVC0uIFJlbW92ZSBpdA0KKwkJCQkgKiBhbmQgY29weSB0aGUgcmVzdWx0Lg0KKwkJCQkg
Ki8NCisJCQkJbGVuX2JlZm9yZV9nbXQgLT0gMTsNCisJCQkJc3RybGNweShfc3RyaXBwZWRfYnVm
LCBuYW1lLCBsZW5fYmVmb3JlX2dtdCk7DQorCQkJfSBlbHNlIHsNCisJCQkJX3N0cmlwcGVkX2J1
ZlswXSA9ICdcMCc7CS8qIHRva2VuIG9ubHkgKi8NCisJCQl9DQorCQkJREJHX0RFQlVHKCJHTVQg
dG9rZW4gaW4gJXMgc3RyaXBwZWQgdG8gJXNcbiIsDQorCQkJCSAgbmFtZSwgX3N0cmlwcGVkX2J1
Zik7DQorCQl9DQorCQkqX3RpbWVzdGFtcCA9IHRpbWVzdGFtcDsNCisJCXJldHVybiAwOw0KKwl9
DQorCWlmIChxWzBdICE9ICcvJykgew0KKwkJLyoNCisJCSAqIEl0IGlzIG5vdCBhIGNvbXBsZXRl
IHBhdGggY29tcG9uZW50LCBpLmUuIHRoZSBwYXRoDQorCQkgKiBjb21wb25lbnQgY29udGludWVz
IGFmdGVyIHRoZSBnbXQtdG9rZW4uDQorCQkgKi8NCisJCWdvdG8gbm9fc25hcHNob3Q7DQorCX0N
CisJcSArPSAxOw0KKw0KKwlyZXN0X2xlbiA9IHN0cmxlbihxKTsNCisJZHN0X2xlbiA9IGxlbl9i
ZWZvcmVfZ210ICsgcmVzdF9sZW47DQorCVNNQl9BU1NFUlQoZHN0X2xlbiA+PSByZXN0X2xlbik7
DQorDQorCWlmIChfc3RyaXBwZWRfYnVmICE9IE5VTEwpIHsNCisJCWlmIChkc3RfbGVuID49IGJ1
Zmxlbikgew0KKwkJCXJldHVybiAtRUlOVkFMOw0KKwkJfQ0KKwkJaWYgKHAgPiBuYW1lKSB7DQor
CQkJbWVtY3B5KF9zdHJpcHBlZF9idWYsIG5hbWUsIGxlbl9iZWZvcmVfZ210KTsNCisJCX0NCisJ
CWlmIChyZXN0X2xlbiA+IDApIHsNCisJCQltZW1jcHkoX3N0cmlwcGVkX2J1ZiArIGxlbl9iZWZv
cmVfZ210LCBxLCByZXN0X2xlbik7DQorCQl9DQorCQlfc3RyaXBwZWRfYnVmW2RzdF9sZW5dID0g
J1wwJzsNCisJfQ0KKwkqX3RpbWVzdGFtcCA9IHRpbWVzdGFtcDsNCisJREJHX0RFQlVHKCJHTVQg
dG9rZW4gaW4gJXMgc3RyaXBwZWQgdG8gJXNcbiIsIG5hbWUsIF9zdHJpcHBlZF9idWYpOw0KKwly
ZXR1cm4gMDsNCitub19zbmFwc2hvdDoNCisJKl90aW1lc3RhbXAgPSAwOw0KKwlyZXR1cm4gMDsN
Cit9DQorDQorc3RhdGljIGludCBjZXBoX3NuYXBfZ210X2NvbnZlcnRfZGlyKHN0cnVjdCB2ZnNf
aGFuZGxlX3N0cnVjdCAqaGFuZGxlLA0KKwkJCQkgICAgIGNvbnN0IGNoYXIgKm5hbWUsDQorCQkJ
CSAgICAgdGltZV90IHRpbWVzdGFtcCwNCisJCQkJICAgICBjaGFyICpfY29udmVydGVkX2J1ZiwN
CisJCQkJICAgICBzaXplX3QgYnVmbGVuKQ0KK3sNCisJaW50IHJldDsNCisJTlRTVEFUVVMgc3Rh
dHVzOw0KKwlESVIgKmQgPSBOVUxMOw0KKwlzdHJ1Y3QgZGlyZW50ICplID0gTlVMTDsNCisJc3Ry
dWN0IHNtYl9maWxlbmFtZSAqc25hcHNfZG5hbWUgPSBOVUxMOw0KKwljb25zdCBjaGFyICpzbmFw
ZGlyID0gbHBfcGFybV9jb25zdF9zdHJpbmcoU05VTShoYW5kbGUtPmNvbm4pLA0KKwkJCQkJCSAg
ICJjZXBoIiwgInNuYXBkaXIiLA0KKwkJCQkJCSAgIENFUEhfU05BUF9TVUJESVJfREVGQVVMVCk7
DQorCVRBTExPQ19DVFggKnRtcF9jdHggPSB0YWxsb2NfbmV3KE5VTEwpOw0KKw0KKwlpZiAodG1w
X2N0eCA9PSBOVUxMKSB7DQorCQlyZXQgPSAtRU5PTUVNOw0KKwkJZ290byBlcnJfb3V0Ow0KKwl9
DQorDQorCS8qDQorCSAqIFRlbXBvcmFsbHkgdXNlIHRoZSBjYWxsZXIncyByZXR1cm4gYnVmZmVy
IGZvciB0aGlzLg0KKwkgKi8NCisJcmV0ID0gc25wcmludGYoX2NvbnZlcnRlZF9idWYsIGJ1Zmxl
biwgIiVzLyVzIiwgbmFtZSwgc25hcGRpcik7DQorCWlmIChyZXQgPj0gYnVmbGVuKSB7DQorCQly
ZXQgPSAtRUlOVkFMOw0KKwkJZ290byBlcnJfb3V0Ow0KKwl9DQorDQorCXNuYXBzX2RuYW1lID0g
c3ludGhldGljX3NtYl9mbmFtZSh0bXBfY3R4LA0KKwkJCQlfY29udmVydGVkX2J1ZiwNCisJCQkJ
TlVMTCwNCisJCQkJTlVMTCwNCisJCQkJMCk7CS8qIFhYWCBjaGVjaz8gKi8NCisJaWYgKHNuYXBz
X2RuYW1lID09IE5VTEwpIHsNCisJCXJldCA9IC1FTk9NRU07DQorCQlnb3RvIGVycl9vdXQ7DQor
CX0NCisNCisJLyogc3RhdCBmaXJzdCB0byB0cmlnZ2VyIGVycm9yIGZhbGxiYWNrIGluIGNlcGhf
c25hcF9nbXRfY29udmVydCgpICovDQorCXJldCA9IFNNQl9WRlNfTkVYVF9TVEFUKGhhbmRsZSwg
c25hcHNfZG5hbWUpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJcmV0ID0gLWVycm5vOw0KKwkJZ290
byBlcnJfb3V0Ow0KKwl9DQorDQorCXN0YXR1cyA9IHNtYmRfY2hlY2tfYWNjZXNzX3JpZ2h0cyho
YW5kbGUtPmNvbm4sDQorCQkJCQlzbmFwc19kbmFtZSwNCisJCQkJCWZhbHNlLA0KKwkJCQkJU0VD
X0RJUl9MSVNUKTsNCisJaWYgKCFOVF9TVEFUVVNfSVNfT0soc3RhdHVzKSkgew0KKwkJREVCVUco
MCwoInVzZXIgZG9lcyBub3QgaGF2ZSBsaXN0IHBlcm1pc3Npb24gIg0KKwkJCSJvbiBzbmFwZGly
ICVzXG4iLA0KKwkJCXNuYXBzX2RuYW1lLT5iYXNlX25hbWUpKTsNCisJCXJldCA9IC1tYXBfZXJy
bm9fZnJvbV9udF9zdGF0dXMoc3RhdHVzKTsNCisJCWdvdG8gZXJyX291dDsNCisJfQ0KKw0KKwlE
QkdfREVCVUcoImVudW1lcmF0aW5nIHNoYWRvdyBjb3B5IGRpciBhdCAlc1xuIiwNCisJCSAgc25h
cHNfZG5hbWUtPmJhc2VfbmFtZSk7DQorDQorCWQgPSBTTUJfVkZTX05FWFRfT1BFTkRJUihoYW5k
bGUsIHNuYXBzX2RuYW1lLCBOVUxMLCAwKTsNCisJaWYgKGQgPT0gTlVMTCkgew0KKwkJcmV0ID0g
LWVycm5vOw0KKwkJZ290byBlcnJfb3V0Ow0KKwl9DQorDQorCWZvciAoZSA9IFNNQl9WRlNfTkVY
VF9SRUFERElSKGhhbmRsZSwgZCwgTlVMTCk7DQorCSAgICAgZSAhPSBOVUxMOw0KKwkgICAgIGUg
PSBTTUJfVkZTX05FWFRfUkVBRERJUihoYW5kbGUsIGQsIE5VTEwpKSB7DQorCQlzdHJ1Y3Qgc21i
X2ZpbGVuYW1lICpzbWJfZm5hbWU7DQorCQl0aW1lX3Qgc25hcF9zZWNzOw0KKw0KKwkJaWYgKElT
RE9UKGUtPmRfbmFtZSkgfHwgSVNET1RET1QoZS0+ZF9uYW1lKSkgew0KKwkJCWNvbnRpbnVlOw0K
KwkJfQ0KKw0KKwkJcmV0ID0gc25wcmludGYoX2NvbnZlcnRlZF9idWYsIGJ1ZmxlbiwgIiVzLyVz
IiwNCisJCQkgICAgICAgc25hcHNfZG5hbWUtPmJhc2VfbmFtZSwgZS0+ZF9uYW1lKTsNCisJCWlm
IChyZXQgPj0gYnVmbGVuKSB7DQorCQkJcmV0ID0gLUVJTlZBTDsNCisJCQlnb3RvIGVycl9jbG9z
ZWRpcjsNCisJCX0NCisNCisJCXNtYl9mbmFtZSA9IHN5bnRoZXRpY19zbWJfZm5hbWUodG1wX2N0
eCwgX2NvbnZlcnRlZF9idWYsDQorCQkJCQkJTlVMTCwgTlVMTCwgMCk7DQorCQlpZiAoc21iX2Zu
YW1lID09IE5VTEwpIHsNCisJCQlyZXQgPSAtRU5PTUVNOw0KKwkJCWdvdG8gZXJyX2Nsb3NlZGly
Ow0KKwkJfQ0KKw0KKwkJcmV0ID0gY2VwaF9zbmFwX2dldF9idGltZShoYW5kbGUsIHNtYl9mbmFt
ZSwgJnNuYXBfc2Vjcyk7DQorCQlpZiAocmV0IDwgMCkgew0KKwkJCWdvdG8gZXJyX2Nsb3NlZGly
Ow0KKwkJfQ0KKw0KKwkJLyoNCisJCSAqIGNoZWNrIGdtdF9zbmFwX3RpbWUgbWF0Y2hlcyBAdGlt
ZXN0YW1wDQorCQkgKi8NCisJCWlmICh0aW1lc3RhbXAgPT0gc25hcF9zZWNzKSB7DQorCQkJYnJl
YWs7DQorCQl9DQorCQlEQkdfREVCVUcoIltjb25uZWN0cGF0aCAlc10gJXNAJWQgbm8gbWF0Y2gg
Zm9yIHNuYXAgJXNAJWRcbiIsDQorCQkJICBoYW5kbGUtPmNvbm4tPmNvbm5lY3RwYXRoLCBuYW1l
LCB0aW1lc3RhbXAsDQorCQkJICBlLT5kX25hbWUsIHNuYXBfc2Vjcyk7DQorCX0NCisNCisJaWYg
KGUgPT0gTlVMTCkgew0KKwkJREJHX0lORk8oIltjb25uZWN0cGF0aCAlc10gZmFpbGVkIHRvIGZp
bmQgJXMgQCB0aW1lICVkXG4iLA0KKwkJCSBoYW5kbGUtPmNvbm4tPmNvbm5lY3RwYXRoLCBuYW1l
LCB0aW1lc3RhbXApOw0KKwkJcmV0ID0gLUVOT0VOVDsNCisJCWdvdG8gZXJyX2Nsb3NlZGlyOw0K
Kwl9DQorDQorCS8qIGZvdW5kLCBfY29udmVydGVkX2J1ZiBhbHJlYWR5IGNvbnRhaW5zIHBhdGgg
b2YgaW50ZXJlc3QgKi8NCisJREJHX0RFQlVHKCJbY29ubmVjdHBhdGggJXNdIGNvbnZlcnRlZCAl
cyBAIHRpbWUgJWQgdG8gJXNcbiIsDQorCQkgIGhhbmRsZS0+Y29ubi0+Y29ubmVjdHBhdGgsIG5h
bWUsIHRpbWVzdGFtcCwgX2NvbnZlcnRlZF9idWYpOw0KKw0KKwlyZXQgPSBTTUJfVkZTX05FWFRf
Q0xPU0VESVIoaGFuZGxlLCBkKTsNCisJaWYgKHJldCAhPSAwKSB7DQorCQlyZXQgPSAtZXJybm87
DQorCQlnb3RvIGVycl9vdXQ7DQorCX0NCisJdGFsbG9jX2ZyZWUodG1wX2N0eCk7DQorCXJldHVy
biAwOw0KKw0KK2Vycl9jbG9zZWRpcjoNCisJU01CX1ZGU19ORVhUX0NMT1NFRElSKGhhbmRsZSwg
ZCk7DQorZXJyX291dDoNCisJdGFsbG9jX2ZyZWUodG1wX2N0eCk7DQorCXJldHVybiByZXQ7DQor
fQ0KKw0KK3N0YXRpYyBpbnQgY2VwaF9zbmFwX2dtdF9jb252ZXJ0KHN0cnVjdCB2ZnNfaGFuZGxl
X3N0cnVjdCAqaGFuZGxlLA0KKwkJCQkgICAgIGNvbnN0IGNoYXIgKm5hbWUsDQorCQkJCSAgICAg
dGltZV90IHRpbWVzdGFtcCwNCisJCQkJICAgICBjaGFyICpfY29udmVydGVkX2J1ZiwNCisJCQkJ
ICAgICBzaXplX3QgYnVmbGVuKQ0KK3sNCisJaW50IHJldDsNCisJY2hhciBwYXJlbnRbUEFUSF9N
QVggKyAxXTsNCisJY29uc3QgY2hhciAqdHJpbW1lZCA9IE5VTEw7DQorCS8qDQorCSAqIENlcGhG
UyBTbmFwc2hvdHMgZm9yIGEgZ2l2ZW4gZGlyIGFyZSBuZXN0ZWQgdW5kZXIgdGhlIC4vLnNuYXAg
c3ViZGlyDQorCSAqICpvciogdW5kZXIgLi4vLnNuYXAvZGlyIChhbmQgc3Vic2VxdWVudCBwYXJl
bnQgZGlycykuDQorCSAqIENoaWxkIGRpcnMgaW5oZXJpdCBzbmFwc2hvdHMgY3JlYXRlZCBpbiBw
YXJlbnQgZGlycyBpZiB0aGUgY2hpbGQNCisJICogZXhpc3RzIGF0IHRoZSB0aW1lIG9mIHNuYXBz
aG90IGNyZWF0aW9uLg0KKwkgKg0KKwkgKiBBdCB0aGlzIHBvaW50IHdlIGRvbid0IGtub3cgd2hl
dGhlciBAbmFtZSByZWZlcnMgdG8gYSBmaWxlIG9yIGRpciwgc28NCisJICogZmlyc3QgYXNzdW1l
IGl0J3MgYSBkaXIgKHdpdGggYSBjb3JyZXNwb25kaW5nIC5zbmFwcyBzdWJkaXIpDQorCSAqLw0K
KwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnRfZGlyKGhhbmRsZSwNCisJCQkJCW5hbWUsDQor
CQkJCQl0aW1lc3RhbXAsDQorCQkJCQlfY29udmVydGVkX2J1ZiwNCisJCQkJCWJ1Zmxlbik7DQor
CWlmIChyZXQgPj0gMCkgew0KKwkJLyogYWxsIGRvbmU6IC5zbmFwIHN1YmRpciBleGlzdHMgLSBA
bmFtZSBpcyBhIGRpciAqLw0KKwkJREJHX0RFQlVHKCIlcyBpcyBhIGRpciwgYWNjZXNzaW5nIHNu
YXBzIHZpYSAuc25hcFxuIiwgbmFtZSk7DQorCQlyZXR1cm4gcmV0Ow0KKwl9DQorDQorCS8qIEBu
YW1lLy5zbmFwIGFjY2VzcyBmYWlsZWQsIGF0dGVtcHQgc25hcHNob3QgYWNjZXNzIHZpYSBwYXJl
bnQgKi8NCisJREJHX0RFQlVHKCIlcy8uc25hcCBhY2Nlc3MgZmFpbGVkLCBhdHRlbXB0aW5nIHBh
cmVudCBhY2Nlc3NcbiIsDQorCQkgIG5hbWUpOw0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ2V0X3Bh
cmVudF9wYXRoKGhhbmRsZS0+Y29ubi0+Y29ubmVjdHBhdGgsDQorCQkJCQluYW1lLA0KKwkJCQkJ
cGFyZW50LA0KKwkJCQkJc2l6ZW9mKHBhcmVudCksDQorCQkJCQkmdHJpbW1lZCk7DQorCWlmIChy
ZXQgPCAwKSB7DQorCQlyZXR1cm4gcmV0Ow0KKwl9DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRf
Y29udmVydF9kaXIoaGFuZGxlLA0KKwkJCQkJcGFyZW50LA0KKwkJCQkJdGltZXN0YW1wLA0KKwkJ
CQkJX2NvbnZlcnRlZF9idWYsDQorCQkJCQlidWZsZW4pOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJ
cmV0dXJuIHJldDsNCisJfQ0KKw0KKwkvKg0KKwkgKiBmb3VuZCBzbmFwc2hvdCB2aWEgcGFyZW50
LiBBcHBlbmQgdGhlIGNoaWxkIHBhdGggY29tcG9uZW50DQorCSAqIHRoYXQgd2FzIHRyaW1tZWQu
Li4gKzEgZm9yIHBhdGggc2VwYXJhdG9yICsgMSBmb3IgbnVsbCB0ZXJtaW5hdGlvbi4NCisJICov
DQorCWlmIChzdHJsZW4oX2NvbnZlcnRlZF9idWYpICsgMSArIHN0cmxlbih0cmltbWVkKSArIDEg
PiBidWZsZW4pIHsNCisJCXJldHVybiAtRUlOVkFMOw0KKwl9DQorCXN0cmxjYXQoX2NvbnZlcnRl
ZF9idWYsICIvIiwgYnVmbGVuKTsNCisJc3RybGNhdChfY29udmVydGVkX2J1ZiwgdHJpbW1lZCwg
YnVmbGVuKTsNCisNCisJcmV0dXJuIDA7DQorfQ0KKw0KK3N0YXRpYyBESVIgKmNlcGhfc25hcF9n
bXRfb3BlbmRpcih2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLA0KKwkJCQljb25zdCBzdHJ1Y3Qg
c21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCQljb25zdCBjaGFyICptYXNrLA0KKwkJCQl1
aW50MzJfdCBhdHRyKQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3RyaXBw
ZWRbUEFUSF9NQVggKyAxXTsNCisJaW50IHJldDsNCisJRElSICpkaXI7DQorCWludCBzYXZlZF9l
cnJubzsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqY29udl9zbWJfZm5hbWUgPSBOVUxMOw0KKwlj
aGFyIGNvbnZbUEFUSF9NQVggKyAxXTsNCisNCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9zdHJpcF9z
bmFwc2hvdChoYW5kbGUsDQorCQkJY3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCSZ0aW1lc3Rh
bXAsDQorCQkJc3RyaXBwZWQsIHNpemVvZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0K
KwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0dXJuIE5VTEw7DQorCX0NCisJaWYgKHRpbWVzdGFtcCA9
PSAwKSB7DQorCQlyZXR1cm4gU01CX1ZGU19ORVhUX09QRU5ESVIoaGFuZGxlLCBjc21iX2ZuYW1l
LCBtYXNrLCBhdHRyKTsNCisJfQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnRfZGlyKGhh
bmRsZSwgc3RyaXBwZWQsDQorCQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihjb252KSk7DQor
CWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gTlVMTDsNCisJfQ0K
Kwljb252X3NtYl9mbmFtZSA9IHN5bnRoZXRpY19zbWJfZm5hbWUodGFsbG9jX3RvcygpLA0KKwkJ
CQkJY29udiwNCisJCQkJCU5VTEwsDQorCQkJCQlOVUxMLA0KKwkJCQkJY3NtYl9mbmFtZS0+Zmxh
Z3MpOw0KKwlpZiAoY29udl9zbWJfZm5hbWUgPT0gTlVMTCkgew0KKwkJZXJybm8gPSBFTk9NRU07
DQorCQlyZXR1cm4gTlVMTDsNCisJfQ0KKw0KKwlkaXIgPSBTTUJfVkZTX05FWFRfT1BFTkRJUiho
YW5kbGUsIGNvbnZfc21iX2ZuYW1lLCBtYXNrLCBhdHRyKTsNCisJc2F2ZWRfZXJybm8gPSBlcnJu
bzsNCisJVEFMTE9DX0ZSRUUoY29udl9zbWJfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5v
Ow0KKwlyZXR1cm4gZGlyOw0KK30NCisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfcmVuYW1l
KHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQorCQkJICAgICAgY29uc3Qgc3RydWN0IHNtYl9m
aWxlbmFtZSAqc21iX2ZuYW1lX3NyYywNCisJCQkgICAgICBjb25zdCBzdHJ1Y3Qgc21iX2ZpbGVu
YW1lICpzbWJfZm5hbWVfZHN0KQ0KK3sNCisJaW50IHJldDsNCisJdGltZV90IHRpbWVzdGFtcF9z
cmMsIHRpbWVzdGFtcF9kc3Q7DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNo
b3QoaGFuZGxlLA0KKwkJCQkJc21iX2ZuYW1lX3NyYy0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVz
dGFtcF9zcmMsIE5VTEwsIDApOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0K
KwkJcmV0dXJuIC0xOw0KKwl9DQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3Qo
aGFuZGxlLA0KKwkJCQkJc21iX2ZuYW1lX2RzdC0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFt
cF9kc3QsIE5VTEwsIDApOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJ
cmV0dXJuIC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXBfc3JjICE9IDApIHsNCisJCWVycm5vID0g
RVhERVY7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJaWYgKHRpbWVzdGFtcF9kc3QgIT0gMCkgew0K
KwkJZXJybm8gPSBFUk9GUzsNCisJCXJldHVybiAtMTsNCisJfQ0KKwlyZXR1cm4gU01CX1ZGU19O
RVhUX1JFTkFNRShoYW5kbGUsIHNtYl9mbmFtZV9zcmMsIHNtYl9mbmFtZV9kc3QpOw0KK30NCisN
CisvKiBibG9jayBsaW5rcyBmcm9tIHdyaXRlYWJsZSBzaGFyZXMgdG8gc25hcHNob3RzIGZvciBu
b3csIGxpa2Ugb3RoZXIgbW9kdWxlcyAqLw0KK3N0YXRpYyBpbnQgY2VwaF9zbmFwX2dtdF9zeW1s
aW5rKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQorCQkJCWNvbnN0IGNoYXIgKmxpbmtfY29u
dGVudHMsDQorCQkJCWNvbnN0IHN0cnVjdCBzbWJfZmlsZW5hbWUgKm5ld19zbWJfZm5hbWUpDQor
ew0KKwlpbnQgcmV0Ow0KKwl0aW1lX3QgdGltZXN0YW1wX29sZCA9IDA7DQorCXRpbWVfdCB0aW1l
c3RhbXBfbmV3ID0gMDsNCisNCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9zdHJpcF9zbmFwc2hvdCho
YW5kbGUsDQorCQkJCWxpbmtfY29udGVudHMsDQorCQkJCSZ0aW1lc3RhbXBfb2xkLA0KKwkJCQlO
VUxMLCAwKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVybiAt
MTsNCisJfQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X3N0cmlwX3NuYXBzaG90KGhhbmRsZSwNCisJ
CQkJbmV3X3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkmdGltZXN0YW1wX25ldywNCisJCQkJ
TlVMTCwgMCk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4g
LTE7DQorCX0NCisJaWYgKCh0aW1lc3RhbXBfb2xkICE9IDApIHx8ICh0aW1lc3RhbXBfbmV3ICE9
IDApKSB7DQorCQllcnJubyA9IEVST0ZTOw0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCXJldHVybiBT
TUJfVkZTX05FWFRfU1lNTElOSyhoYW5kbGUsIGxpbmtfY29udGVudHMsIG5ld19zbWJfZm5hbWUp
Ow0KK30NCisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfbGluayh2ZnNfaGFuZGxlX3N0cnVj
dCAqaGFuZGxlLA0KKwkJCQljb25zdCBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpvbGRfc21iX2ZuYW1l
LA0KKwkJCQljb25zdCBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpuZXdfc21iX2ZuYW1lKQ0KK3sNCisJ
aW50IHJldDsNCisJdGltZV90IHRpbWVzdGFtcF9vbGQgPSAwOw0KKwl0aW1lX3QgdGltZXN0YW1w
X25ldyA9IDA7DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxl
LA0KKwkJCQlvbGRfc21iX2ZuYW1lLT5iYXNlX25hbWUsDQorCQkJCSZ0aW1lc3RhbXBfb2xkLA0K
KwkJCQlOVUxMLCAwKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJl
dHVybiAtMTsNCisJfQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X3N0cmlwX3NuYXBzaG90KGhhbmRs
ZSwNCisJCQkJbmV3X3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkmdGltZXN0YW1wX25ldywN
CisJCQkJTlVMTCwgMCk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQly
ZXR1cm4gLTE7DQorCX0NCisJaWYgKCh0aW1lc3RhbXBfb2xkICE9IDApIHx8ICh0aW1lc3RhbXBf
bmV3ICE9IDApKSB7DQorCQllcnJubyA9IEVST0ZTOw0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCXJl
dHVybiBTTUJfVkZTX05FWFRfTElOSyhoYW5kbGUsIG9sZF9zbWJfZm5hbWUsIG5ld19zbWJfZm5h
bWUpOw0KK30NCisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfc3RhdCh2ZnNfaGFuZGxlX3N0
cnVjdCAqaGFuZGxlLA0KKwkJCSAgICBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpzbWJfZm5hbWUpDQor
ew0KKwl0aW1lX3QgdGltZXN0YW1wID0gMDsNCisJY2hhciBzdHJpcHBlZFtQQVRIX01BWCArIDFd
Ow0KKwljaGFyIGNvbnZbUEFUSF9NQVggKyAxXTsNCisJY2hhciAqdG1wOw0KKwlpbnQgcmV0Ow0K
Kw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X3N0cmlwX3NuYXBzaG90KGhhbmRsZSwNCisJCQkJCXNt
Yl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBwZWQsIHNpemVvZihz
dHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0dXJu
IC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJcmV0dXJuIFNNQl9WRlNfTkVY
VF9TVEFUKGhhbmRsZSwgc21iX2ZuYW1lKTsNCisJfQ0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210
X2NvbnZlcnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFtcCwgY29udiwgc2l6ZW9m
KGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVybiAt
MTsNCisJfQ0KKwl0bXAgPSBzbWJfZm5hbWUtPmJhc2VfbmFtZTsNCisJc21iX2ZuYW1lLT5iYXNl
X25hbWUgPSBjb252Ow0KKw0KKwlyZXQgPSBTTUJfVkZTX05FWFRfU1RBVChoYW5kbGUsIHNtYl9m
bmFtZSk7DQorCXNtYl9mbmFtZS0+YmFzZV9uYW1lID0gdG1wOw0KKwlyZXR1cm4gcmV0Ow0KK30N
CisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfbHN0YXQodmZzX2hhbmRsZV9zdHJ1Y3QgKmhh
bmRsZSwNCisJCQkgICAgIHN0cnVjdCBzbWJfZmlsZW5hbWUgKnNtYl9mbmFtZSkNCit7DQorCXRp
bWVfdCB0aW1lc3RhbXAgPSAwOw0KKwljaGFyIHN0cmlwcGVkW1BBVEhfTUFYICsgMV07DQorCWNo
YXIgY29udltQQVRIX01BWCArIDFdOw0KKwljaGFyICp0bXA7DQorCWludCByZXQ7DQorDQorCXJl
dCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJCQkJc21iX2ZuYW1l
LT5iYXNlX25hbWUsDQorCQkJCQkmdGltZXN0YW1wLCBzdHJpcHBlZCwgc2l6ZW9mKHN0cmlwcGVk
KSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQor
CX0NCisJaWYgKHRpbWVzdGFtcCA9PSAwKSB7DQorCQlyZXR1cm4gU01CX1ZGU19ORVhUX0xTVEFU
KGhhbmRsZSwgc21iX2ZuYW1lKTsNCisJfQ0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZl
cnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFtcCwgY29udiwgc2l6ZW9mKGNvbnYp
KTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJ
fQ0KKwl0bXAgPSBzbWJfZm5hbWUtPmJhc2VfbmFtZTsNCisJc21iX2ZuYW1lLT5iYXNlX25hbWUg
PSBjb252Ow0KKw0KKwlyZXQgPSBTTUJfVkZTX05FWFRfTFNUQVQoaGFuZGxlLCBzbWJfZm5hbWUp
Ow0KKwlzbWJfZm5hbWUtPmJhc2VfbmFtZSA9IHRtcDsNCisJcmV0dXJuIHJldDsNCit9DQorDQor
c3RhdGljIGludCBjZXBoX3NuYXBfZ210X29wZW4odmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwN
CisJCQkgICAgc3RydWN0IHNtYl9maWxlbmFtZSAqc21iX2ZuYW1lLCBmaWxlc19zdHJ1Y3QgKmZz
cCwNCisJCQkgICAgaW50IGZsYWdzLCBtb2RlX3QgbW9kZSkNCit7DQorCXRpbWVfdCB0aW1lc3Rh
bXAgPSAwOw0KKwljaGFyIHN0cmlwcGVkW1BBVEhfTUFYICsgMV07DQorCWNoYXIgY29udltQQVRI
X01BWCArIDFdOw0KKwljaGFyICp0bXA7DQorCWludCByZXQ7DQorDQorCXJldCA9IGNlcGhfc25h
cF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJCQkJc21iX2ZuYW1lLT5iYXNlX25hbWUs
DQorCQkJCQkmdGltZXN0YW1wLCBzdHJpcHBlZCwgc2l6ZW9mKHN0cmlwcGVkKSk7DQorCWlmIChy
ZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJaWYgKHRp
bWVzdGFtcCA9PSAwKSB7DQorCQlyZXR1cm4gU01CX1ZGU19ORVhUX09QRU4oaGFuZGxlLCBzbWJf
Zm5hbWUsIGZzcCwgZmxhZ3MsIG1vZGUpOw0KKwl9DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRf
Y29udmVydChoYW5kbGUsIHN0cmlwcGVkLA0KKwkJCQkJdGltZXN0YW1wLCBjb252LCBzaXplb2Yo
Y29udikpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0dXJuIC0x
Ow0KKwl9DQorCXRtcCA9IHNtYl9mbmFtZS0+YmFzZV9uYW1lOw0KKwlzbWJfZm5hbWUtPmJhc2Vf
bmFtZSA9IGNvbnY7DQorDQorCXJldCA9IFNNQl9WRlNfTkVYVF9PUEVOKGhhbmRsZSwgc21iX2Zu
YW1lLCBmc3AsIGZsYWdzLCBtb2RlKTsNCisJc21iX2ZuYW1lLT5iYXNlX25hbWUgPSB0bXA7DQor
CXJldHVybiByZXQ7DQorfQ0KKw0KK3N0YXRpYyBpbnQgY2VwaF9zbmFwX2dtdF91bmxpbmsodmZz
X2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwNCisJCQkgICAgICBjb25zdCBzdHJ1Y3Qgc21iX2ZpbGVu
YW1lICpjc21iX2ZuYW1lKQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3Ry
aXBwZWRbUEFUSF9NQVggKyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNoYXIg
KnRtcDsNCisJaW50IHJldDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlp
bnQgc2F2ZWRfZXJybm87DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3Qo
aGFuZGxlLA0KKwkJCQkJY3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwg
c3RyaXBwZWQsIHNpemVvZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8g
PSAtcmV0Ow0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJ
cmV0dXJuIFNNQl9WRlNfTkVYVF9VTkxJTksoaGFuZGxlLCBjc21iX2ZuYW1lKTsNCisJfQ0KKw0K
KwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRp
bWVzdGFtcCwgY29udiwgc2l6ZW9mKGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5v
ID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUgPSBjcF9zbWJfZmlsZW5h
bWUodGFsbG9jX3RvcygpLCBjc21iX2ZuYW1lKTsNCisJaWYgKG5ld19mbmFtZSA9PSBOVUxMKSB7
DQorCQllcnJubyA9IEVOT01FTTsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUtPmJh
c2VfbmFtZSA9IGNvbnY7DQorDQorCXJldCA9IFNNQl9WRlNfTkVYVF9VTkxJTksoaGFuZGxlLCBu
ZXdfZm5hbWUpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0NfRlJFRShuZXdfZm5h
bWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0KK30NCisNCitzdGF0
aWMgaW50IGNlcGhfc25hcF9nbXRfY2htb2QodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwNCisJ
CQljb25zdCBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCW1vZGVfdCBtb2Rl
KQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3RyaXBwZWRbUEFUSF9NQVgg
KyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNoYXIgKnRtcDsNCisJaW50IHJl
dDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlpbnQgc2F2ZWRfZXJybm87
DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJCQkJ
Y3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBwZWQsIHNpemVv
ZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0
dXJuIC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJcmV0dXJuIFNNQl9WRlNf
TkVYVF9DSE1PRChoYW5kbGUsIGNzbWJfZm5hbWUsIG1vZGUpOw0KKwl9DQorDQorCXJldCA9IGNl
cGhfc25hcF9nbXRfY29udmVydChoYW5kbGUsIHN0cmlwcGVkLA0KKwkJCQkJdGltZXN0YW1wLCBj
b252LCBzaXplb2YoY29udikpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0K
KwkJcmV0dXJuIC0xOw0KKwl9DQorCW5ld19mbmFtZSA9IGNwX3NtYl9maWxlbmFtZSh0YWxsb2Nf
dG9zKCksIGNzbWJfZm5hbWUpOw0KKwlpZiAobmV3X2ZuYW1lID09IE5VTEwpIHsNCisJCWVycm5v
ID0gRU5PTUVNOw0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCW5ld19mbmFtZS0+YmFzZV9uYW1lID0g
Y29udjsNCisNCisJcmV0ID0gU01CX1ZGU19ORVhUX0NITU9EKGhhbmRsZSwgbmV3X2ZuYW1lLCBt
b2RlKTsNCisJc2F2ZWRfZXJybm8gPSBlcnJubzsNCisJVEFMTE9DX0ZSRUUobmV3X2ZuYW1lKTsN
CisJZXJybm8gPSBzYXZlZF9lcnJubzsNCisJcmV0dXJuIHJldDsNCit9DQorDQorc3RhdGljIGlu
dCBjZXBoX3NuYXBfZ210X2Nob3duKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQorCQkJY29u
c3Qgc3RydWN0IHNtYl9maWxlbmFtZSAqY3NtYl9mbmFtZSwNCisJCQl1aWRfdCB1aWQsDQorCQkJ
Z2lkX3QgZ2lkKQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3RyaXBwZWRb
UEFUSF9NQVggKyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNoYXIgKnRtcDsN
CisJaW50IHJldDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlpbnQgc2F2
ZWRfZXJybm87DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxl
LA0KKwkJCQkJY3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBw
ZWQsIHNpemVvZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0
Ow0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJcmV0dXJu
IFNNQl9WRlNfTkVYVF9DSE9XTihoYW5kbGUsIGNzbWJfZm5hbWUsIHVpZCwgZ2lkKTsNCisJfQ0K
Kw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJ
CXRpbWVzdGFtcCwgY29udiwgc2l6ZW9mKGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVy
cm5vID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUgPSBjcF9zbWJfZmls
ZW5hbWUodGFsbG9jX3RvcygpLCBjc21iX2ZuYW1lKTsNCisJaWYgKG5ld19mbmFtZSA9PSBOVUxM
KSB7DQorCQllcnJubyA9IEVOT01FTTsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUt
PmJhc2VfbmFtZSA9IGNvbnY7DQorDQorCXJldCA9IFNNQl9WRlNfTkVYVF9DSE9XTihoYW5kbGUs
IG5ld19mbmFtZSwgdWlkLCBnaWQpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0Nf
RlJFRShuZXdfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0K
K30NCisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfY2hkaXIodmZzX2hhbmRsZV9zdHJ1Y3Qg
KmhhbmRsZSwNCisJCQljb25zdCBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lKQ0KK3sN
CisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3RyaXBwZWRbUEFUSF9NQVggKyAxXTsN
CisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNoYXIgKnRtcDsNCisJaW50IHJldDsNCisJ
c3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlpbnQgc2F2ZWRfZXJybm87DQorDQor
CXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJCQkJY3NtYl9m
bmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBwZWQsIHNpemVvZihzdHJp
cHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0dXJuIC0x
Ow0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJcmV0dXJuIFNNQl9WRlNfTkVYVF9D
SERJUihoYW5kbGUsIGNzbWJfZm5hbWUpOw0KKwl9DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRf
Y29udmVydF9kaXIoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFtcCwgY29udiwgc2l6
ZW9mKGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVy
biAtMTsNCisJfQ0KKwluZXdfZm5hbWUgPSBjcF9zbWJfZmlsZW5hbWUodGFsbG9jX3RvcygpLCBj
c21iX2ZuYW1lKTsNCisJaWYgKG5ld19mbmFtZSA9PSBOVUxMKSB7DQorCQllcnJubyA9IEVOT01F
TTsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUtPmJhc2VfbmFtZSA9IGNvbnY7DQor
DQorCXJldCA9IFNNQl9WRlNfTkVYVF9DSERJUihoYW5kbGUsIG5ld19mbmFtZSk7DQorCXNhdmVk
X2Vycm5vID0gZXJybm87DQorCVRBTExPQ19GUkVFKG5ld19mbmFtZSk7DQorCWVycm5vID0gc2F2
ZWRfZXJybm87DQorCXJldHVybiByZXQ7DQorfQ0KKw0KK3N0YXRpYyBpbnQgY2VwaF9zbmFwX2dt
dF9udGltZXModmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwNCisJCQkgICAgICBjb25zdCBzdHJ1
Y3Qgc21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCSAgICAgIHN0cnVjdCBzbWJfZmlsZV90
aW1lICpmdCkNCit7DQorCXRpbWVfdCB0aW1lc3RhbXAgPSAwOw0KKwljaGFyIHN0cmlwcGVkW1BB
VEhfTUFYICsgMV07DQorCWNoYXIgY29udltQQVRIX01BWCArIDFdOw0KKwljaGFyICp0bXA7DQor
CWludCByZXQ7DQorCXN0cnVjdCBzbWJfZmlsZW5hbWUgKm5ld19mbmFtZTsNCisJaW50IHNhdmVk
X2Vycm5vOw0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X3N0cmlwX3NuYXBzaG90KGhhbmRsZSwN
CisJCQkJCWNzbWJfZm5hbWUtPmJhc2VfbmFtZSwNCisJCQkJCSZ0aW1lc3RhbXAsIHN0cmlwcGVk
LCBzaXplb2Yoc3RyaXBwZWQpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsN
CisJCXJldHVybiAtMTsNCisJfQ0KKwlpZiAodGltZXN0YW1wID09IDApIHsNCisJCXJldHVybiBT
TUJfVkZTX05FWFRfTlRJTUVTKGhhbmRsZSwgY3NtYl9mbmFtZSwgZnQpOw0KKwl9DQorDQorCXJl
dCA9IGNlcGhfc25hcF9nbXRfY29udmVydChoYW5kbGUsIHN0cmlwcGVkLA0KKwkJCQkJdGltZXN0
YW1wLCBjb252LCBzaXplb2YoY29udikpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAt
cmV0Ow0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCW5ld19mbmFtZSA9IGNwX3NtYl9maWxlbmFtZSh0
YWxsb2NfdG9zKCksIGNzbWJfZm5hbWUpOw0KKwlpZiAobmV3X2ZuYW1lID09IE5VTEwpIHsNCisJ
CWVycm5vID0gRU5PTUVNOw0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCW5ld19mbmFtZS0+YmFzZV9u
YW1lID0gY29udjsNCisNCisJcmV0ID0gU01CX1ZGU19ORVhUX05USU1FUyhoYW5kbGUsIG5ld19m
bmFtZSwgZnQpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0NfRlJFRShuZXdfZm5h
bWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0KK30NCisNCitzdGF0
aWMgaW50IGNlcGhfc25hcF9nbXRfcmVhZGxpbmsodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwN
CisJCQkJY29uc3Qgc3RydWN0IHNtYl9maWxlbmFtZSAqY3NtYl9mbmFtZSwNCisJCQkJY2hhciAq
YnVmLA0KKwkJCQlzaXplX3QgYnVmc2l6KQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQor
CWNoYXIgc3RyaXBwZWRbUEFUSF9NQVggKyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsgMV07
DQorCWNoYXIgKnRtcDsNCisJaW50IHJldDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2Zu
YW1lOw0KKwlpbnQgc2F2ZWRfZXJybm87DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBf
c25hcHNob3QoaGFuZGxlLA0KKwkJCQkJY3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRp
bWVzdGFtcCwgc3RyaXBwZWQsIHNpemVvZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0K
KwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0dXJuIC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0g
MCkgew0KKwkJcmV0dXJuIFNNQl9WRlNfTkVYVF9SRUFETElOSyhoYW5kbGUsIGNzbWJfZm5hbWUs
IGJ1ZiwgYnVmc2l6KTsNCisJfQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnQoaGFuZGxl
LCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFtcCwgY29udiwgc2l6ZW9mKGNvbnYpKTsNCisJaWYg
KHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdf
Zm5hbWUgPSBjcF9zbWJfZmlsZW5hbWUodGFsbG9jX3RvcygpLCBjc21iX2ZuYW1lKTsNCisJaWYg
KG5ld19mbmFtZSA9PSBOVUxMKSB7DQorCQllcnJubyA9IEVOT01FTTsNCisJCXJldHVybiAtMTsN
CisJfQ0KKwluZXdfZm5hbWUtPmJhc2VfbmFtZSA9IGNvbnY7DQorDQorCXJldCA9IFNNQl9WRlNf
TkVYVF9SRUFETElOSyhoYW5kbGUsIG5ld19mbmFtZSwgYnVmLCBidWZzaXopOw0KKwlzYXZlZF9l
cnJubyA9IGVycm5vOw0KKwlUQUxMT0NfRlJFRShuZXdfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVk
X2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0KK30NCisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRf
bWtub2QodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwNCisJCQljb25zdCBzdHJ1Y3Qgc21iX2Zp
bGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCW1vZGVfdCBtb2RlLA0KKwkJCVNNQl9ERVZfVCBkZXYp
DQorew0KKwl0aW1lX3QgdGltZXN0YW1wID0gMDsNCisJY2hhciBzdHJpcHBlZFtQQVRIX01BWCAr
IDFdOw0KKwljaGFyIGNvbnZbUEFUSF9NQVggKyAxXTsNCisJY2hhciAqdG1wOw0KKwlpbnQgcmV0
Ow0KKwlzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpuZXdfZm5hbWU7DQorCWludCBzYXZlZF9lcnJubzsN
CisNCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9zdHJpcF9zbmFwc2hvdChoYW5kbGUsDQorCQkJCQlj
c21iX2ZuYW1lLT5iYXNlX25hbWUsDQorCQkJCQkmdGltZXN0YW1wLCBzdHJpcHBlZCwgc2l6ZW9m
KHN0cmlwcGVkKSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1
cm4gLTE7DQorCX0NCisJaWYgKHRpbWVzdGFtcCA9PSAwKSB7DQorCQlyZXR1cm4gU01CX1ZGU19O
RVhUX01LTk9EKGhhbmRsZSwgY3NtYl9mbmFtZSwgbW9kZSwgZGV2KTsNCisJfQ0KKwlyZXQgPSBj
ZXBoX3NuYXBfZ210X2NvbnZlcnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFtcCwg
Y29udiwgc2l6ZW9mKGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsN
CisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUgPSBjcF9zbWJfZmlsZW5hbWUodGFsbG9j
X3RvcygpLCBjc21iX2ZuYW1lKTsNCisJaWYgKG5ld19mbmFtZSA9PSBOVUxMKSB7DQorCQllcnJu
byA9IEVOT01FTTsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUtPmJhc2VfbmFtZSA9
IGNvbnY7DQorDQorCXJldCA9IFNNQl9WRlNfTkVYVF9NS05PRChoYW5kbGUsIG5ld19mbmFtZSwg
bW9kZSwgZGV2KTsNCisJc2F2ZWRfZXJybm8gPSBlcnJubzsNCisJVEFMTE9DX0ZSRUUobmV3X2Zu
YW1lKTsNCisJZXJybm8gPSBzYXZlZF9lcnJubzsNCisJcmV0dXJuIHJldDsNCit9DQorDQorc3Rh
dGljIHN0cnVjdCBzbWJfZmlsZW5hbWUgKmNlcGhfc25hcF9nbXRfcmVhbHBhdGgodmZzX2hhbmRs
ZV9zdHJ1Y3QgKmhhbmRsZSwNCisJCQkJVEFMTE9DX0NUWCAqY3R4LA0KKwkJCQljb25zdCBzdHJ1
Y3Qgc21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lKQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7
DQorCWNoYXIgc3RyaXBwZWRbUEFUSF9NQVggKyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsg
MV07DQorCWNoYXIgKnRtcDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqcmVzdWx0X2ZuYW1lOw0K
KwlpbnQgcmV0Ow0KKwlzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpuZXdfZm5hbWU7DQorCWludCBzYXZl
ZF9lcnJubzsNCisNCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9zdHJpcF9zbmFwc2hvdChoYW5kbGUs
DQorCQkJCQljc21iX2ZuYW1lLT5iYXNlX25hbWUsDQorCQkJCQkmdGltZXN0YW1wLCBzdHJpcHBl
ZCwgc2l6ZW9mKHN0cmlwcGVkKSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7
DQorCQlyZXR1cm4gTlVMTDsNCisJfQ0KKwlpZiAodGltZXN0YW1wID09IDApIHsNCisJCXJldHVy
biBTTUJfVkZTX05FWFRfUkVBTFBBVEgoaGFuZGxlLCBjdHgsIGNzbWJfZm5hbWUpOw0KKwl9DQor
CXJldCA9IGNlcGhfc25hcF9nbXRfY29udmVydChoYW5kbGUsIHN0cmlwcGVkLA0KKwkJCQkJdGlt
ZXN0YW1wLCBjb252LCBzaXplb2YoY29udikpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8g
PSAtcmV0Ow0KKwkJcmV0dXJuIE5VTEw7DQorCX0NCisJbmV3X2ZuYW1lID0gY3Bfc21iX2ZpbGVu
YW1lKHRhbGxvY190b3MoKSwgY3NtYl9mbmFtZSk7DQorCWlmIChuZXdfZm5hbWUgPT0gTlVMTCkg
ew0KKwkJZXJybm8gPSBFTk9NRU07DQorCQlyZXR1cm4gTlVMTDsNCisJfQ0KKwluZXdfZm5hbWUt
PmJhc2VfbmFtZSA9IGNvbnY7DQorDQorCXJlc3VsdF9mbmFtZSA9IFNNQl9WRlNfTkVYVF9SRUFM
UEFUSChoYW5kbGUsIGN0eCwgbmV3X2ZuYW1lKTsNCisJc2F2ZWRfZXJybm8gPSBlcnJubzsNCisJ
VEFMTE9DX0ZSRUUobmV3X2ZuYW1lKTsNCisJZXJybm8gPSBzYXZlZF9lcnJubzsNCisJcmV0dXJu
IHJlc3VsdF9mbmFtZTsNCit9DQorDQorLyoNCisgKiBYWFggdGhpcyBzaG91bGQgaGF2ZSBnb25l
IHRocm91Z2ggb3BlbigpIGNvbnZlcnNpb24sIHNvIHdoeSBkbyB3ZSBuZWVkDQorICogYSBoYW5k
bGVyIGhlcmU/IHBvc2l4X2ZnZXRfbnRfYWNsKCkgZmFsbHMgYmFjayB0byBwb3NpeF9nZXRfbnRf
YWNsKCkgZm9yDQorICogZGlycyAob3IgZmQgPT0gLTEpLg0KKyAqLw0KK3N0YXRpYyBOVFNUQVRV
UyBjZXBoX3NuYXBfZ210X2ZnZXRfbnRfYWNsKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQor
CQkJCQlzdHJ1Y3QgZmlsZXNfc3RydWN0ICpmc3AsDQorCQkJCQl1aW50MzJfdCBzZWN1cml0eV9p
bmZvLA0KKwkJCQkJVEFMTE9DX0NUWCAqbWVtX2N0eCwNCisJCQkJCXN0cnVjdCBzZWN1cml0eV9k
ZXNjcmlwdG9yICoqcHBkZXNjKQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIg
c3RyaXBwZWRbUEFUSF9NQVggKyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNo
YXIgKnRtcDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqc21iX2ZuYW1lOw0KKwlpbnQgcmV0Ow0K
KwlOVFNUQVRVUyBzdGF0dXM7DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNo
b3QoaGFuZGxlLA0KKwkJCQkJZnNwLT5mc3BfbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVz
dGFtcCwgc3RyaXBwZWQsIHNpemVvZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJ
cmV0dXJuIG1hcF9udF9lcnJvcl9mcm9tX3VuaXgoLXJldCk7DQorCX0NCisJaWYgKHRpbWVzdGFt
cCA9PSAwKSB7DQorCQlyZXR1cm4gU01CX1ZGU19ORVhUX0ZHRVRfTlRfQUNMKGhhbmRsZSwgZnNw
LCBzZWN1cml0eV9pbmZvLA0KKwkJCQkJCW1lbV9jdHgsDQorCQkJCQkJcHBkZXNjKTsNCisJfQ0K
KwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRp
bWVzdGFtcCwgY29udiwgc2l6ZW9mKGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCXJldHVy
biBtYXBfbnRfZXJyb3JfZnJvbV91bml4KC1yZXQpOw0KKwl9DQorDQorCXNtYl9mbmFtZSA9IHN5
bnRoZXRpY19zbWJfZm5hbWUobWVtX2N0eCwNCisJCQkJCWNvbnYsDQorCQkJCQlOVUxMLA0KKwkJ
CQkJTlVMTCwNCisJCQkJCWZzcC0+ZnNwX25hbWUtPmZsYWdzKTsNCisJaWYgKHNtYl9mbmFtZSA9
PSBOVUxMKSB7DQorCQlyZXR1cm4gTlRfU1RBVFVTX05PX01FTU9SWTsNCisJfQ0KKw0KKwlzdGF0
dXMgPSBTTUJfVkZTX05FWFRfR0VUX05UX0FDTChoYW5kbGUsIHNtYl9mbmFtZSwgc2VjdXJpdHlf
aW5mbywNCisJCQkJCSBtZW1fY3R4LCBwcGRlc2MpOw0KKwlUQUxMT0NfRlJFRShzbWJfZm5hbWUp
Ow0KKwlyZXR1cm4gc3RhdHVzOw0KK30NCisNCitzdGF0aWMgTlRTVEFUVVMgY2VwaF9zbmFwX2dt
dF9nZXRfbnRfYWNsKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQorCQkJCSAgICAgICBjb25z
dCBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCQkgICAgICAgdWludDMyX3Qg
c2VjdXJpdHlfaW5mbywNCisJCQkJICAgICAgIFRBTExPQ19DVFggKm1lbV9jdHgsDQorCQkJCSAg
ICAgICBzdHJ1Y3Qgc2VjdXJpdHlfZGVzY3JpcHRvciAqKnBwZGVzYykNCit7DQorCXRpbWVfdCB0
aW1lc3RhbXAgPSAwOw0KKwljaGFyIHN0cmlwcGVkW1BBVEhfTUFYICsgMV07DQorCWNoYXIgY29u
dltQQVRIX01BWCArIDFdOw0KKwljaGFyICp0bXA7DQorCWludCByZXQ7DQorCU5UU1RBVFVTIHN0
YXR1czsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlpbnQgc2F2ZWRfZXJy
bm87DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJ
CQkJY3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBwZWQsIHNp
emVvZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJcmV0dXJuIG1hcF9udF9lcnJv
cl9mcm9tX3VuaXgoLXJldCk7DQorCX0NCisJaWYgKHRpbWVzdGFtcCA9PSAwKSB7DQorCQlyZXR1
cm4gU01CX1ZGU19ORVhUX0dFVF9OVF9BQ0woaGFuZGxlLCBjc21iX2ZuYW1lLCBzZWN1cml0eV9p
bmZvLA0KKwkJCQkJICAgICAgIG1lbV9jdHgsIHBwZGVzYyk7DQorCX0NCisJcmV0ID0gY2VwaF9z
bmFwX2dtdF9jb252ZXJ0KGhhbmRsZSwgc3RyaXBwZWQsDQorCQkJCQl0aW1lc3RhbXAsIGNvbnYs
IHNpemVvZihjb252KSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQlyZXR1cm4gbWFwX250X2Vycm9y
X2Zyb21fdW5peCgtcmV0KTsNCisJfQ0KKwluZXdfZm5hbWUgPSBjcF9zbWJfZmlsZW5hbWUodGFs
bG9jX3RvcygpLCBjc21iX2ZuYW1lKTsNCisJaWYgKG5ld19mbmFtZSA9PSBOVUxMKSB7DQorCQly
ZXR1cm4gTlRfU1RBVFVTX05PX01FTU9SWTsNCisJfQ0KKwluZXdfZm5hbWUtPmJhc2VfbmFtZSA9
IGNvbnY7DQorDQorCXN0YXR1cyA9IFNNQl9WRlNfTkVYVF9HRVRfTlRfQUNMKGhhbmRsZSwgbmV3
X2ZuYW1lLCBzZWN1cml0eV9pbmZvLA0KKwkJCQkJIG1lbV9jdHgsIHBwZGVzYyk7DQorCXNhdmVk
X2Vycm5vID0gZXJybm87DQorCVRBTExPQ19GUkVFKG5ld19mbmFtZSk7DQorCWVycm5vID0gc2F2
ZWRfZXJybm87DQorCXJldHVybiBzdGF0dXM7DQorfQ0KKw0KK3N0YXRpYyBpbnQgY2VwaF9zbmFw
X2dtdF9ta2Rpcih2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLA0KKwkJCQljb25zdCBzdHJ1Y3Qg
c21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCQltb2RlX3QgbW9kZSkNCit7DQorCXRpbWVf
dCB0aW1lc3RhbXAgPSAwOw0KKwljaGFyIHN0cmlwcGVkW1BBVEhfTUFYICsgMV07DQorCWNoYXIg
Y29udltQQVRIX01BWCArIDFdOw0KKwljaGFyICp0bXA7DQorCWludCByZXQ7DQorCXN0cnVjdCBz
bWJfZmlsZW5hbWUgKm5ld19mbmFtZTsNCisJaW50IHNhdmVkX2Vycm5vOw0KKw0KKwlyZXQgPSBj
ZXBoX3NuYXBfZ210X3N0cmlwX3NuYXBzaG90KGhhbmRsZSwNCisJCQkJCWNzbWJfZm5hbWUtPmJh
c2VfbmFtZSwNCisJCQkJCSZ0aW1lc3RhbXAsIHN0cmlwcGVkLCBzaXplb2Yoc3RyaXBwZWQpKTsN
CisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0K
KwlpZiAodGltZXN0YW1wID09IDApIHsNCisJCXJldHVybiBTTUJfVkZTX05FWFRfTUtESVIoaGFu
ZGxlLCBjc21iX2ZuYW1lLCBtb2RlKTsNCisJfQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZl
cnRfZGlyKGhhbmRsZSwgc3RyaXBwZWQsDQorCQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihj
b252KSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7
DQorCX0NCisJbmV3X2ZuYW1lID0gY3Bfc21iX2ZpbGVuYW1lKHRhbGxvY190b3MoKSwgY3NtYl9m
bmFtZSk7DQorCWlmIChuZXdfZm5hbWUgPT0gTlVMTCkgew0KKwkJZXJybm8gPSBFTk9NRU07DQor
CQlyZXR1cm4gLTE7DQorCX0NCisJbmV3X2ZuYW1lLT5iYXNlX25hbWUgPSBjb252Ow0KKw0KKwly
ZXQgPSBTTUJfVkZTX05FWFRfTUtESVIoaGFuZGxlLCBuZXdfZm5hbWUsIG1vZGUpOw0KKwlzYXZl
ZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0NfRlJFRShuZXdfZm5hbWUpOw0KKwllcnJubyA9IHNh
dmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0KK30NCisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9n
bXRfcm1kaXIodmZzX2hhbmRsZV9zdHJ1Y3QgKmhhbmRsZSwNCisJCQkJY29uc3Qgc3RydWN0IHNt
Yl9maWxlbmFtZSAqY3NtYl9mbmFtZSkNCit7DQorCXRpbWVfdCB0aW1lc3RhbXAgPSAwOw0KKwlj
aGFyIHN0cmlwcGVkW1BBVEhfTUFYICsgMV07DQorCWNoYXIgY29udltQQVRIX01BWCArIDFdOw0K
KwljaGFyICp0bXA7DQorCWludCByZXQ7DQorCXN0cnVjdCBzbWJfZmlsZW5hbWUgKm5ld19mbmFt
ZTsNCisJaW50IHNhdmVkX2Vycm5vOw0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X3N0cmlwX3Nu
YXBzaG90KGhhbmRsZSwNCisJCQkJCWNzbWJfZm5hbWUtPmJhc2VfbmFtZSwNCisJCQkJCSZ0aW1l
c3RhbXAsIHN0cmlwcGVkLCBzaXplb2Yoc3RyaXBwZWQpKTsNCisJaWYgKHJldCA8IDApIHsNCisJ
CWVycm5vID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwlpZiAodGltZXN0YW1wID09IDAp
IHsNCisJCXJldHVybiBTTUJfVkZTX05FWFRfUk1ESVIoaGFuZGxlLCBjc21iX2ZuYW1lKTsNCisJ
fQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnRfZGlyKGhhbmRsZSwgc3RyaXBwZWQsDQor
CQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihjb252KSk7DQorCWlmIChyZXQgPCAwKSB7DQor
CQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJbmV3X2ZuYW1lID0gY3Bfc21i
X2ZpbGVuYW1lKHRhbGxvY190b3MoKSwgY3NtYl9mbmFtZSk7DQorCWlmIChuZXdfZm5hbWUgPT0g
TlVMTCkgew0KKwkJZXJybm8gPSBFTk9NRU07DQorCQlyZXR1cm4gLTE7DQorCX0NCisJbmV3X2Zu
YW1lLT5iYXNlX25hbWUgPSBjb252Ow0KKw0KKwlyZXQgPSBTTUJfVkZTX05FWFRfUk1ESVIoaGFu
ZGxlLCBuZXdfZm5hbWUpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0NfRlJFRShu
ZXdfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0KK30NCisN
CitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfY2hmbGFncyh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFu
ZGxlLA0KKwkJCQljb25zdCBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCQl1
bnNpZ25lZCBpbnQgZmxhZ3MpDQorew0KKwl0aW1lX3QgdGltZXN0YW1wID0gMDsNCisJY2hhciBz
dHJpcHBlZFtQQVRIX01BWCArIDFdOw0KKwljaGFyIGNvbnZbUEFUSF9NQVggKyAxXTsNCisJY2hh
ciAqdG1wOw0KKwlpbnQgcmV0Ow0KKwlzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpuZXdfZm5hbWU7DQor
CWludCBzYXZlZF9lcnJubzsNCisNCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9zdHJpcF9zbmFwc2hv
dChoYW5kbGUsDQorCQkJCQljc21iX2ZuYW1lLT5iYXNlX25hbWUsDQorCQkJCQkmdGltZXN0YW1w
LCBzdHJpcHBlZCwgc2l6ZW9mKHN0cmlwcGVkKSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJu
byA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJaWYgKHRpbWVzdGFtcCA9PSAwKSB7DQor
CQlyZXR1cm4gU01CX1ZGU19ORVhUX0NIRkxBR1MoaGFuZGxlLCBjc21iX2ZuYW1lLCBmbGFncyk7
DQorCX0NCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9jb252ZXJ0KGhhbmRsZSwgc3RyaXBwZWQsDQor
CQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihjb252KSk7DQorCWlmIChyZXQgPCAwKSB7DQor
CQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJbmV3X2ZuYW1lID0gY3Bfc21i
X2ZpbGVuYW1lKHRhbGxvY190b3MoKSwgY3NtYl9mbmFtZSk7DQorCWlmIChuZXdfZm5hbWUgPT0g
TlVMTCkgew0KKwkJZXJybm8gPSBFTk9NRU07DQorCQlyZXR1cm4gLTE7DQorCX0NCisJbmV3X2Zu
YW1lLT5iYXNlX25hbWUgPSBjb252Ow0KKw0KKwlyZXQgPSBTTUJfVkZTX05FWFRfQ0hGTEFHUyho
YW5kbGUsIG5ld19mbmFtZSwgZmxhZ3MpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxM
T0NfRlJFRShuZXdfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0
Ow0KK30NCisNCitzdGF0aWMgc3NpemVfdCBjZXBoX3NuYXBfZ210X2dldHhhdHRyKHZmc19oYW5k
bGVfc3RydWN0ICpoYW5kbGUsDQorCQkJCWNvbnN0IHN0cnVjdCBzbWJfZmlsZW5hbWUgKmNzbWJf
Zm5hbWUsDQorCQkJCWNvbnN0IGNoYXIgKmFuYW1lLA0KKwkJCQl2b2lkICp2YWx1ZSwNCisJCQkJ
c2l6ZV90IHNpemUpDQorew0KKwl0aW1lX3QgdGltZXN0YW1wID0gMDsNCisJY2hhciBzdHJpcHBl
ZFtQQVRIX01BWCArIDFdOw0KKwljaGFyIGNvbnZbUEFUSF9NQVggKyAxXTsNCisJY2hhciAqdG1w
Ow0KKwlpbnQgcmV0Ow0KKwlzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpuZXdfZm5hbWU7DQorCWludCBz
YXZlZF9lcnJubzsNCisNCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9zdHJpcF9zbmFwc2hvdChoYW5k
bGUsDQorCQkJCQljc21iX2ZuYW1lLT5iYXNlX25hbWUsDQorCQkJCQkmdGltZXN0YW1wLCBzdHJp
cHBlZCwgc2l6ZW9mKHN0cmlwcGVkKSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1y
ZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJaWYgKHRpbWVzdGFtcCA9PSAwKSB7DQorCQlyZXR1
cm4gU01CX1ZGU19ORVhUX0dFVFhBVFRSKGhhbmRsZSwgY3NtYl9mbmFtZSwgYW5hbWUsIHZhbHVl
LA0KKwkJCQkJICAgICBzaXplKTsNCisJfQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnQo
aGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFtcCwgY29udiwgc2l6ZW9mKGNvbnYpKTsN
CisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0K
KwluZXdfZm5hbWUgPSBjcF9zbWJfZmlsZW5hbWUodGFsbG9jX3RvcygpLCBjc21iX2ZuYW1lKTsN
CisJaWYgKG5ld19mbmFtZSA9PSBOVUxMKSB7DQorCQllcnJubyA9IEVOT01FTTsNCisJCXJldHVy
biAtMTsNCisJfQ0KKwluZXdfZm5hbWUtPmJhc2VfbmFtZSA9IGNvbnY7DQorDQorCXJldCA9IFNN
Ql9WRlNfTkVYVF9HRVRYQVRUUihoYW5kbGUsIG5ld19mbmFtZSwgYW5hbWUsIHZhbHVlLCBzaXpl
KTsNCisJc2F2ZWRfZXJybm8gPSBlcnJubzsNCisJVEFMTE9DX0ZSRUUobmV3X2ZuYW1lKTsNCisJ
ZXJybm8gPSBzYXZlZF9lcnJubzsNCisJcmV0dXJuIHJldDsNCit9DQorDQorc3RhdGljIHNzaXpl
X3QgY2VwaF9zbmFwX2dtdF9saXN0eGF0dHIoc3RydWN0IHZmc19oYW5kbGVfc3RydWN0ICpoYW5k
bGUsDQorCQkJCSAgICAgY29uc3Qgc3RydWN0IHNtYl9maWxlbmFtZSAqY3NtYl9mbmFtZSwNCisJ
CQkJICAgICBjaGFyICpsaXN0LCBzaXplX3Qgc2l6ZSkNCit7DQorCXRpbWVfdCB0aW1lc3RhbXAg
PSAwOw0KKwljaGFyIHN0cmlwcGVkW1BBVEhfTUFYICsgMV07DQorCWNoYXIgY29udltQQVRIX01B
WCArIDFdOw0KKwljaGFyICp0bXA7DQorCWludCByZXQ7DQorCXN0cnVjdCBzbWJfZmlsZW5hbWUg
Km5ld19mbmFtZTsNCisJaW50IHNhdmVkX2Vycm5vOw0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210
X3N0cmlwX3NuYXBzaG90KGhhbmRsZSwNCisJCQkJCWNzbWJfZm5hbWUtPmJhc2VfbmFtZSwNCisJ
CQkJCSZ0aW1lc3RhbXAsIHN0cmlwcGVkLCBzaXplb2Yoc3RyaXBwZWQpKTsNCisJaWYgKHJldCA8
IDApIHsNCisJCWVycm5vID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwlpZiAodGltZXN0
YW1wID09IDApIHsNCisJCXJldHVybiBTTUJfVkZTX05FWFRfTElTVFhBVFRSKGhhbmRsZSwgY3Nt
Yl9mbmFtZSwgbGlzdCwgc2l6ZSk7DQorCX0NCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9jb252ZXJ0
KGhhbmRsZSwgc3RyaXBwZWQsDQorCQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihjb252KSk7
DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0N
CisJbmV3X2ZuYW1lID0gY3Bfc21iX2ZpbGVuYW1lKHRhbGxvY190b3MoKSwgY3NtYl9mbmFtZSk7
DQorCWlmIChuZXdfZm5hbWUgPT0gTlVMTCkgew0KKwkJZXJybm8gPSBFTk9NRU07DQorCQlyZXR1
cm4gLTE7DQorCX0NCisJbmV3X2ZuYW1lLT5iYXNlX25hbWUgPSBjb252Ow0KKw0KKwlyZXQgPSBT
TUJfVkZTX05FWFRfTElTVFhBVFRSKGhhbmRsZSwgbmV3X2ZuYW1lLCBsaXN0LCBzaXplKTsNCisJ
c2F2ZWRfZXJybm8gPSBlcnJubzsNCisJVEFMTE9DX0ZSRUUobmV3X2ZuYW1lKTsNCisJZXJybm8g
PSBzYXZlZF9lcnJubzsNCisJcmV0dXJuIHJldDsNCit9DQorDQorc3RhdGljIGludCBjZXBoX3Nu
YXBfZ210X3JlbW92ZXhhdHRyKHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQorCQkJCWNvbnN0
IHN0cnVjdCBzbWJfZmlsZW5hbWUgKmNzbWJfZm5hbWUsDQorCQkJCWNvbnN0IGNoYXIgKmFuYW1l
KQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3RyaXBwZWRbUEFUSF9NQVgg
KyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNoYXIgKnRtcDsNCisJaW50IHJl
dDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlpbnQgc2F2ZWRfZXJybm87
DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJCQkJ
Y3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBwZWQsIHNpemVv
ZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0
dXJuIC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJcmV0dXJuIFNNQl9WRlNf
TkVYVF9SRU1PVkVYQVRUUihoYW5kbGUsIGNzbWJfZm5hbWUsIGFuYW1lKTsNCisJfQ0KKwlyZXQg
PSBjZXBoX3NuYXBfZ210X2NvbnZlcnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFt
cCwgY29udiwgc2l6ZW9mKGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJl
dDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUgPSBjcF9zbWJfZmlsZW5hbWUodGFs
bG9jX3RvcygpLCBjc21iX2ZuYW1lKTsNCisJaWYgKG5ld19mbmFtZSA9PSBOVUxMKSB7DQorCQll
cnJubyA9IEVOT01FTTsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUtPmJhc2VfbmFt
ZSA9IGNvbnY7DQorDQorCXJldCA9IFNNQl9WRlNfTkVYVF9SRU1PVkVYQVRUUihoYW5kbGUsIG5l
d19mbmFtZSwgYW5hbWUpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0NfRlJFRShu
ZXdfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0KK30NCisN
CitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfc2V0eGF0dHIoc3RydWN0IHZmc19oYW5kbGVfc3Ry
dWN0ICpoYW5kbGUsDQorCQkJCWNvbnN0IHN0cnVjdCBzbWJfZmlsZW5hbWUgKmNzbWJfZm5hbWUs
DQorCQkJCWNvbnN0IGNoYXIgKmFuYW1lLCBjb25zdCB2b2lkICp2YWx1ZSwNCisJCQkJc2l6ZV90
IHNpemUsIGludCBmbGFncykNCit7DQorCXRpbWVfdCB0aW1lc3RhbXAgPSAwOw0KKwljaGFyIHN0
cmlwcGVkW1BBVEhfTUFYICsgMV07DQorCWNoYXIgY29udltQQVRIX01BWCArIDFdOw0KKwljaGFy
ICp0bXA7DQorCWludCByZXQ7DQorCXN0cnVjdCBzbWJfZmlsZW5hbWUgKm5ld19mbmFtZTsNCisJ
aW50IHNhdmVkX2Vycm5vOw0KKw0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X3N0cmlwX3NuYXBzaG90
KGhhbmRsZSwNCisJCQkJCWNzbWJfZm5hbWUtPmJhc2VfbmFtZSwNCisJCQkJCSZ0aW1lc3RhbXAs
IHN0cmlwcGVkLCBzaXplb2Yoc3RyaXBwZWQpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5v
ID0gLXJldDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwlpZiAodGltZXN0YW1wID09IDApIHsNCisJ
CXJldHVybiBTTUJfVkZTX05FWFRfU0VUWEFUVFIoaGFuZGxlLCBjc21iX2ZuYW1lLA0KKwkJCQkJ
YW5hbWUsIHZhbHVlLCBzaXplLCBmbGFncyk7DQorCX0NCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9j
b252ZXJ0KGhhbmRsZSwgc3RyaXBwZWQsDQorCQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihj
b252KSk7DQorCWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7
DQorCX0NCisJbmV3X2ZuYW1lID0gY3Bfc21iX2ZpbGVuYW1lKHRhbGxvY190b3MoKSwgY3NtYl9m
bmFtZSk7DQorCWlmIChuZXdfZm5hbWUgPT0gTlVMTCkgew0KKwkJZXJybm8gPSBFTk9NRU07DQor
CQlyZXR1cm4gLTE7DQorCX0NCisJbmV3X2ZuYW1lLT5iYXNlX25hbWUgPSBjb252Ow0KKw0KKwly
ZXQgPSBTTUJfVkZTX05FWFRfU0VUWEFUVFIoaGFuZGxlLCBuZXdfZm5hbWUsDQorCQkJCWFuYW1l
LCB2YWx1ZSwgc2l6ZSwgZmxhZ3MpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0Nf
RlJFRShuZXdfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0K
K30NCisNCitzdGF0aWMgaW50IGNlcGhfc25hcF9nbXRfZ2V0X3JlYWxfZmlsZW5hbWUoc3RydWN0
IHZmc19oYW5kbGVfc3RydWN0ICpoYW5kbGUsDQorCQkJCQkgY29uc3QgY2hhciAqcGF0aCwNCisJ
CQkJCSBjb25zdCBjaGFyICpuYW1lLA0KKwkJCQkJIFRBTExPQ19DVFggKm1lbV9jdHgsDQorCQkJ
CQkgY2hhciAqKmZvdW5kX25hbWUpDQorew0KKwl0aW1lX3QgdGltZXN0YW1wID0gMDsNCisJY2hh
ciBzdHJpcHBlZFtQQVRIX01BWCArIDFdOw0KKwljaGFyIGNvbnZbUEFUSF9NQVggKyAxXTsNCisJ
aW50IHJldDsNCisNCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9zdHJpcF9zbmFwc2hvdChoYW5kbGUs
IHBhdGgsDQorCQkJCQkmdGltZXN0YW1wLCBzdHJpcHBlZCwgc2l6ZW9mKHN0cmlwcGVkKSk7DQor
CWlmIChyZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJ
aWYgKHRpbWVzdGFtcCA9PSAwKSB7DQorCQlyZXR1cm4gU01CX1ZGU19ORVhUX0dFVF9SRUFMX0ZJ
TEVOQU1FKGhhbmRsZSwgcGF0aCwgbmFtZSwNCisJCQkJCQkgICAgICBtZW1fY3R4LCBmb3VuZF9u
YW1lKTsNCisJfQ0KKwlyZXQgPSBjZXBoX3NuYXBfZ210X2NvbnZlcnRfZGlyKGhhbmRsZSwgc3Ry
aXBwZWQsDQorCQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihjb252KSk7DQorCWlmIChyZXQg
PCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJcmV0ID0gU01C
X1ZGU19ORVhUX0dFVF9SRUFMX0ZJTEVOQU1FKGhhbmRsZSwgY29udiwgbmFtZSwNCisJCQkJCSAg
ICAgbWVtX2N0eCwgZm91bmRfbmFtZSk7DQorCXJldHVybiByZXQ7DQorfQ0KKw0KK3N0YXRpYyB1
aW50NjRfdCBjZXBoX3NuYXBfZ210X2Rpc2tfZnJlZSh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxl
LA0KKwkJCQljb25zdCBzdHJ1Y3Qgc21iX2ZpbGVuYW1lICpjc21iX2ZuYW1lLA0KKwkJCQl1aW50
NjRfdCAqYnNpemUsDQorCQkJCXVpbnQ2NF90ICpkZnJlZSwNCisJCQkJdWludDY0X3QgKmRzaXpl
KQ0KK3sNCisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3RyaXBwZWRbUEFUSF9NQVgg
KyAxXTsNCisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNoYXIgKnRtcDsNCisJaW50IHJl
dDsNCisJc3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlpbnQgc2F2ZWRfZXJybm87
DQorDQorCXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJCQkJ
Y3NtYl9mbmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBwZWQsIHNpemVv
ZihzdHJpcHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0
dXJuIC0xOw0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJcmV0dXJuIFNNQl9WRlNf
TkVYVF9ESVNLX0ZSRUUoaGFuZGxlLCBjc21iX2ZuYW1lLA0KKwkJCQkJICAgICAgYnNpemUsIGRm
cmVlLCBkc2l6ZSk7DQorCX0NCisJcmV0ID0gY2VwaF9zbmFwX2dtdF9jb252ZXJ0KGhhbmRsZSwg
c3RyaXBwZWQsDQorCQkJCQl0aW1lc3RhbXAsIGNvbnYsIHNpemVvZihjb252KSk7DQorCWlmIChy
ZXQgPCAwKSB7DQorCQllcnJubyA9IC1yZXQ7DQorCQlyZXR1cm4gLTE7DQorCX0NCisJbmV3X2Zu
YW1lID0gY3Bfc21iX2ZpbGVuYW1lKHRhbGxvY190b3MoKSwgY3NtYl9mbmFtZSk7DQorCWlmIChu
ZXdfZm5hbWUgPT0gTlVMTCkgew0KKwkJZXJybm8gPSBFTk9NRU07DQorCQlyZXR1cm4gLTE7DQor
CX0NCisJbmV3X2ZuYW1lLT5iYXNlX25hbWUgPSBjb252Ow0KKw0KKwlyZXQgPSBTTUJfVkZTX05F
WFRfRElTS19GUkVFKGhhbmRsZSwgbmV3X2ZuYW1lLA0KKwkJCQlic2l6ZSwgZGZyZWUsIGRzaXpl
KTsNCisJc2F2ZWRfZXJybm8gPSBlcnJubzsNCisJVEFMTE9DX0ZSRUUobmV3X2ZuYW1lKTsNCisJ
ZXJybm8gPSBzYXZlZF9lcnJubzsNCisJcmV0dXJuIHJldDsNCit9DQorDQorc3RhdGljIGludCBj
ZXBoX3NuYXBfZ210X2dldF9xdW90YSh2ZnNfaGFuZGxlX3N0cnVjdCAqaGFuZGxlLA0KKwkJCWNv
bnN0IHN0cnVjdCBzbWJfZmlsZW5hbWUgKmNzbWJfZm5hbWUsDQorCQkJZW51bSBTTUJfUVVPVEFf
VFlQRSBxdHlwZSwNCisJCQl1bmlkX3QgaWQsDQorCQkJU01CX0RJU0tfUVVPVEEgKmRxKQ0KK3sN
CisJdGltZV90IHRpbWVzdGFtcCA9IDA7DQorCWNoYXIgc3RyaXBwZWRbUEFUSF9NQVggKyAxXTsN
CisJY2hhciBjb252W1BBVEhfTUFYICsgMV07DQorCWNoYXIgKnRtcDsNCisJaW50IHJldDsNCisJ
c3RydWN0IHNtYl9maWxlbmFtZSAqbmV3X2ZuYW1lOw0KKwlpbnQgc2F2ZWRfZXJybm87DQorDQor
CXJldCA9IGNlcGhfc25hcF9nbXRfc3RyaXBfc25hcHNob3QoaGFuZGxlLA0KKwkJCQkJY3NtYl9m
bmFtZS0+YmFzZV9uYW1lLA0KKwkJCQkJJnRpbWVzdGFtcCwgc3RyaXBwZWQsIHNpemVvZihzdHJp
cHBlZCkpOw0KKwlpZiAocmV0IDwgMCkgew0KKwkJZXJybm8gPSAtcmV0Ow0KKwkJcmV0dXJuIC0x
Ow0KKwl9DQorCWlmICh0aW1lc3RhbXAgPT0gMCkgew0KKwkJcmV0dXJuIFNNQl9WRlNfTkVYVF9H
RVRfUVVPVEEoaGFuZGxlLCBjc21iX2ZuYW1lLCBxdHlwZSwgaWQsIGRxKTsNCisJfQ0KKwlyZXQg
PSBjZXBoX3NuYXBfZ210X2NvbnZlcnQoaGFuZGxlLCBzdHJpcHBlZCwNCisJCQkJCXRpbWVzdGFt
cCwgY29udiwgc2l6ZW9mKGNvbnYpKTsNCisJaWYgKHJldCA8IDApIHsNCisJCWVycm5vID0gLXJl
dDsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUgPSBjcF9zbWJfZmlsZW5hbWUodGFs
bG9jX3RvcygpLCBjc21iX2ZuYW1lKTsNCisJaWYgKG5ld19mbmFtZSA9PSBOVUxMKSB7DQorCQll
cnJubyA9IEVOT01FTTsNCisJCXJldHVybiAtMTsNCisJfQ0KKwluZXdfZm5hbWUtPmJhc2VfbmFt
ZSA9IGNvbnY7DQorDQorCXJldCA9IFNNQl9WRlNfTkVYVF9HRVRfUVVPVEEoaGFuZGxlLCBuZXdf
Zm5hbWUsIHF0eXBlLCBpZCwgZHEpOw0KKwlzYXZlZF9lcnJubyA9IGVycm5vOw0KKwlUQUxMT0Nf
RlJFRShuZXdfZm5hbWUpOw0KKwllcnJubyA9IHNhdmVkX2Vycm5vOw0KKwlyZXR1cm4gcmV0Ow0K
K30NCisNCitzdGF0aWMgc3RydWN0IHZmc19mbl9wb2ludGVycyBjZXBoX3NuYXBfZm5zID0gew0K
KwkuZ2V0X3NoYWRvd19jb3B5X2RhdGFfZm4gPSBjZXBoX3NuYXBfZ2V0X3NoYWRvd19jb3B5X2Rh
dGEsDQorCS5vcGVuZGlyX2ZuID0gY2VwaF9zbmFwX2dtdF9vcGVuZGlyLA0KKwkuZGlza19mcmVl
X2ZuID0gY2VwaF9zbmFwX2dtdF9kaXNrX2ZyZWUsDQorCS5nZXRfcXVvdGFfZm4gPSBjZXBoX3Nu
YXBfZ210X2dldF9xdW90YSwNCisJLnJlbmFtZV9mbiA9IGNlcGhfc25hcF9nbXRfcmVuYW1lLA0K
KwkubGlua19mbiA9IGNlcGhfc25hcF9nbXRfbGluaywNCisJLnN5bWxpbmtfZm4gPSBjZXBoX3Nu
YXBfZ210X3N5bWxpbmssDQorCS5zdGF0X2ZuID0gY2VwaF9zbmFwX2dtdF9zdGF0LA0KKwkubHN0
YXRfZm4gPSBjZXBoX3NuYXBfZ210X2xzdGF0LA0KKwkub3Blbl9mbiA9IGNlcGhfc25hcF9nbXRf
b3BlbiwNCisJLnVubGlua19mbiA9IGNlcGhfc25hcF9nbXRfdW5saW5rLA0KKwkuY2htb2RfZm4g
PSBjZXBoX3NuYXBfZ210X2NobW9kLA0KKwkuY2hvd25fZm4gPSBjZXBoX3NuYXBfZ210X2Nob3du
LA0KKwkuY2hkaXJfZm4gPSBjZXBoX3NuYXBfZ210X2NoZGlyLA0KKwkubnRpbWVzX2ZuID0gY2Vw
aF9zbmFwX2dtdF9udGltZXMsDQorCS5yZWFkbGlua19mbiA9IGNlcGhfc25hcF9nbXRfcmVhZGxp
bmssDQorCS5ta25vZF9mbiA9IGNlcGhfc25hcF9nbXRfbWtub2QsDQorCS5yZWFscGF0aF9mbiA9
IGNlcGhfc25hcF9nbXRfcmVhbHBhdGgsDQorCS5nZXRfbnRfYWNsX2ZuID0gY2VwaF9zbmFwX2dt
dF9nZXRfbnRfYWNsLA0KKwkuZmdldF9udF9hY2xfZm4gPSBjZXBoX3NuYXBfZ210X2ZnZXRfbnRf
YWNsLA0KKwkuZ2V0X250X2FjbF9mbiA9IGNlcGhfc25hcF9nbXRfZ2V0X250X2FjbCwNCisJLm1r
ZGlyX2ZuID0gY2VwaF9zbmFwX2dtdF9ta2RpciwNCisJLnJtZGlyX2ZuID0gY2VwaF9zbmFwX2dt
dF9ybWRpciwNCisJLmdldHhhdHRyX2ZuID0gY2VwaF9zbmFwX2dtdF9nZXR4YXR0ciwNCisJLmdl
dHhhdHRyYXRfc2VuZF9mbiA9IHZmc19ub3RfaW1wbGVtZW50ZWRfZ2V0eGF0dHJhdF9zZW5kLA0K
KwkuZ2V0eGF0dHJhdF9yZWN2X2ZuID0gdmZzX25vdF9pbXBsZW1lbnRlZF9nZXR4YXR0cmF0X3Jl
Y3YsDQorCS5saXN0eGF0dHJfZm4gPSBjZXBoX3NuYXBfZ210X2xpc3R4YXR0ciwNCisJLnJlbW92
ZXhhdHRyX2ZuID0gY2VwaF9zbmFwX2dtdF9yZW1vdmV4YXR0ciwNCisJLnNldHhhdHRyX2ZuID0g
Y2VwaF9zbmFwX2dtdF9zZXR4YXR0ciwNCisJLmNoZmxhZ3NfZm4gPSBjZXBoX3NuYXBfZ210X2No
ZmxhZ3MsDQorCS5nZXRfcmVhbF9maWxlbmFtZV9mbiA9IGNlcGhfc25hcF9nbXRfZ2V0X3JlYWxf
ZmlsZW5hbWUsDQorfTsNCisNCitzdGF0aWNfZGVjbF92ZnM7DQorTlRTVEFUVVMgdmZzX2NlcGhf
c25hcHNob3RzX2luaXQoVEFMTE9DX0NUWCAqY3R4KQ0KK3sNCisJcmV0dXJuIHNtYl9yZWdpc3Rl
cl92ZnMoU01CX1ZGU19JTlRFUkZBQ0VfVkVSU0lPTiwNCisJCQkJImNlcGhfc25hcHNob3RzIiwg
JmNlcGhfc25hcF9mbnMpOw0KK30NCmRpZmYgLS1naXQgYS9zb3VyY2UzL21vZHVsZXMvd3Njcmlw
dF9idWlsZCBiL3NvdXJjZTMvbW9kdWxlcy93c2NyaXB0X2J1aWxkDQppbmRleCA4ZDBlMGVlNTdj
MS4uMzUwMTBiYjBlM2IgMTAwNjQ0DQotLS0gYS9zb3VyY2UzL21vZHVsZXMvd3NjcmlwdF9idWls
ZA0KKysrIGIvc291cmNlMy9tb2R1bGVzL3dzY3JpcHRfYnVpbGQNCkBAIC01MjIsNiArNTIyLDE0
IEBAIGJsZC5TQU1CQTNfTU9EVUxFKCd2ZnNfY2VwaCcsDQogICAgICAgICAgICAgICAgICBjZmxh
Z3M9YmxkLkNPTkZJR19HRVQoJ0NGTEFHU19DRVBIRlMnKSwNCiAgICAgICAgICAgICAgICAgIGlu
Y2x1ZGVzPWJsZC5DT05GSUdfR0VUKCdDUFBQQVRIX0NFUEhGUycpKQ0KIA0KK2JsZC5TQU1CQTNf
TU9EVUxFKCd2ZnNfY2VwaF9zbmFwc2hvdHMnLA0KKyAgICAgICAgICAgICAgICAgc3Vic3lzdGVt
PSd2ZnMnLA0KKyAgICAgICAgICAgICAgICAgc291cmNlPSd2ZnNfY2VwaF9zbmFwc2hvdHMuYycs
DQorICAgICAgICAgICAgICAgICBkZXBzPSdzYW1iYS11dGlsJywNCisgICAgICAgICAgICAgICAg
IGluaXRfZnVuY3Rpb249JycsDQorICAgICAgICAgICAgICAgICBpbnRlcm5hbF9tb2R1bGU9Ymxk
LlNBTUJBM19JU19TVEFUSUNfTU9EVUxFKCd2ZnNfY2VwaF9zbmFwc2hvdHMnKSwNCisgICAgICAg
ICAgICAgICAgIGVuYWJsZWQ9YmxkLlNBTUJBM19JU19FTkFCTEVEX01PRFVMRSgndmZzX2NlcGhf
c25hcHNob3RzJykpDQorDQogYmxkLlNBTUJBM19NT0RVTEUoJ3Zmc19nbHVzdGVyZnMnLA0KICAg
ICAgICAgICAgICAgICAgIHN1YnN5c3RlbT0ndmZzJywNCiAgICAgICAgICAgICAgICAgICBzb3Vy
Y2U9J3Zmc19nbHVzdGVyZnMuYycsDQpkaWZmIC0tZ2l0IGEvc291cmNlMy93c2NyaXB0IGIvc291
cmNlMy93c2NyaXB0DQppbmRleCBjZDA2NzNhOTRjNy4uZmY3MmExNzNhNGIgMTAwNjQ0DQotLS0g
YS9zb3VyY2UzL3dzY3JpcHQNCisrKyBiL3NvdXJjZTMvd3NjcmlwdA0KQEAgLTE3NjYsNiArMTc2
NiwxMSBAQCBtYWluKCkgew0KIA0KICAgICBpZiBjb25mLkNPTkZJR19TRVQoIkhBVkVfQ0VQSCIp
Og0KICAgICAgICAgZGVmYXVsdF9zaGFyZWRfbW9kdWxlcy5leHRlbmQoVE9fTElTVCgndmZzX2Nl
cGgnKSkNCisgICAgICAgICMgVW5saWtlIHZmc19jZXBoLCB2ZnNfY2VwaF9zbmFwc2hvdHMgZG9l
c24ndCBkZXBlbmQgb24gbGliY2VwaGZzLCBzbw0KKyAgICAgICAgIyBjYW4gYmUgZW5hYmxlZCBh
dG9wIGEga2VybmVsIENlcGhGUyBzaGFyZSAod2l0aCB2ZnNfZGVmYXVsdCkgaW4NCisgICAgICAg
ICMgYWRkaXRpb24gdG8gdmZzX2NlcGguIFN0aWxsLCBvbmx5IGVuYWJsZSB2ZnNfY2VwaF9zbmFw
c2hvdHMgYnVpbGRzDQorICAgICAgICAjIGlmIHdlJ3JlIGJ1aWxkaW5nIHdpdGggbGliY2VwaGZz
IGZvciBub3cuDQorICAgICAgICBkZWZhdWx0X3NoYXJlZF9tb2R1bGVzLmV4dGVuZChUT19MSVNU
KCd2ZnNfY2VwaF9zbmFwc2hvdHMnKSkNCiANCiAgICAgaWYgY29uZi5DT05GSUdfU0VUKCdIQVZF
X0dMVVNURVJGUycpOg0KICAgICAgICAgZGVmYXVsdF9zaGFyZWRfbW9kdWxlcy5leHRlbmQoVE9f
TElTVCgndmZzX2dsdXN0ZXJmcycpKQ0KLS0gDQoyLjE2LjQNCg0KDQpGcm9tIDM5YmVmMzhkMTVj
NzU1ZmRkNjg4MjM2MjJlMGIzNDc1MWY0ZmUzMjcgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxDQpG
cm9tOiBEYXZpZCBEaXNzZWxkb3JwIDxkZGlzc0BzYW1iYS5vcmc+DQpEYXRlOiBXZWQsIDI3IE1h
ciAyMDE5IDE1OjU3OjQ1ICswMTAwDQpTdWJqZWN0OiBbUEFUQ0ggMy8zXSBkb2NzOiBhZGQgdmZz
X2NlcGhfc25hcHNob3RzIG1hbnBhZ2UNCg0KU2lnbmVkLW9mZi1ieTogRGF2aWQgRGlzc2VsZG9y
cCA8ZGRpc3NAc2FtYmEub3JnPg0KLS0tDQogZG9jcy14bWwvbWFucGFnZXMvdmZzX2NlcGhfc25h
cHNob3RzLjgueG1sIHwgMTMwICsrKysrKysrKysrKysrKysrKysrKysrKysrKysrDQogZG9jcy14
bWwvd3NjcmlwdF9idWlsZCAgICAgICAgICAgICAgICAgICAgIHwgICAxICsNCiAyIGZpbGVzIGNo
YW5nZWQsIDEzMSBpbnNlcnRpb25zKCspDQogY3JlYXRlIG1vZGUgMTAwNjQ0IGRvY3MteG1sL21h
bnBhZ2VzL3Zmc19jZXBoX3NuYXBzaG90cy44LnhtbA0KDQpkaWZmIC0tZ2l0IGEvZG9jcy14bWwv
bWFucGFnZXMvdmZzX2NlcGhfc25hcHNob3RzLjgueG1sIGIvZG9jcy14bWwvbWFucGFnZXMvdmZz
X2NlcGhfc25hcHNob3RzLjgueG1sDQpuZXcgZmlsZSBtb2RlIDEwMDY0NA0KaW5kZXggMDAwMDAw
MDAwMDAuLjdmYTI4MDZmZDk1DQotLS0gL2Rldi9udWxsDQorKysgYi9kb2NzLXhtbC9tYW5wYWdl
cy92ZnNfY2VwaF9zbmFwc2hvdHMuOC54bWwNCkBAIC0wLDAgKzEsMTMwIEBADQorPD94bWwgdmVy
c2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSI/Pg0KKzwhRE9DVFlQRSByZWZlbnRyeSBQ
VUJMSUMgIi0vL1NhbWJhLVRlYW0vL0RURCBEb2NCb29rIFY0LjItQmFzZWQgVmFyaWFudCBWMS4w
Ly9FTiIgImh0dHA6Ly93d3cuc2FtYmEub3JnL3NhbWJhL0RURC9zYW1iYS1kb2MiPg0KKzxyZWZl
bnRyeSBpZD0idmZzX2NlcGhfc25hcHNob3RzLjgiPg0KKw0KKzxyZWZtZXRhPg0KKwk8cmVmZW50
cnl0aXRsZT52ZnNfY2VwaF9zbmFwc2hvdHM8L3JlZmVudHJ5dGl0bGU+DQorCTxtYW52b2xudW0+
ODwvbWFudm9sbnVtPg0KKwk8cmVmbWlzY2luZm8gY2xhc3M9InNvdXJjZSI+U2FtYmE8L3JlZm1p
c2NpbmZvPg0KKwk8cmVmbWlzY2luZm8gY2xhc3M9Im1hbnVhbCI+U3lzdGVtIEFkbWluaXN0cmF0
aW9uIHRvb2xzPC9yZWZtaXNjaW5mbz4NCisJPHJlZm1pc2NpbmZvIGNsYXNzPSJ2ZXJzaW9uIj4m
ZG9jLnZlcnNpb247PC9yZWZtaXNjaW5mbz4NCis8L3JlZm1ldGE+DQorDQorDQorPHJlZm5hbWVk
aXY+DQorCTxyZWZuYW1lPnZmc19jZXBoX3NuYXBzaG90czwvcmVmbmFtZT4NCisJPHJlZnB1cnBv
c2U+DQorCQlFeHBvc2UgQ2VwaEZTIHNuYXBzaG90cyBhcyBzaGFkb3ctY29waWVzDQorCTwvcmVm
cHVycG9zZT4NCis8L3JlZm5hbWVkaXY+DQorDQorPHJlZnN5bm9wc2lzZGl2Pg0KKwk8Y21kc3lu
b3BzaXM+DQorCQk8Y29tbWFuZD52ZnMgb2JqZWN0cyA9IGNlcGhfc25hcHNob3RzPC9jb21tYW5k
Pg0KKwk8L2NtZHN5bm9wc2lzPg0KKzwvcmVmc3lub3BzaXNkaXY+DQorDQorPHJlZnNlY3QxPg0K
Kwk8dGl0bGU+REVTQ1JJUFRJT048L3RpdGxlPg0KKw0KKwk8cGFyYT5UaGlzIFZGUyBtb2R1bGUg
aXMgcGFydCBvZiB0aGUNCisJPGNpdGVyZWZlbnRyeT48cmVmZW50cnl0aXRsZT5zYW1iYTwvcmVm
ZW50cnl0aXRsZT4NCisJPG1hbnZvbG51bT44PC9tYW52b2xudW0+PC9jaXRlcmVmZW50cnk+IHN1
aXRlLjwvcGFyYT4NCisNCisJPHBhcmE+DQorCQlUaGUgPGNvbW1hbmQ+dmZzX2NlcGhfc25hcHNo
b3RzPC9jb21tYW5kPiBWRlMgbW9kdWxlIGV4cG9zZXMNCisJCUNlcGhGUyBzbmFwc2hvdHMgZm9y
IHVzZSBieSBTYW1iYS4gV2hlbiBlbmFibGVkLCBTTUIgY2xpZW50cw0KKwkJc3VjaCBhcyBXaW5k
b3dzIEV4cGxvcmVyJ3MgUHJldmlvdXMgVmVyc2lvbnMgZGlhbG9nLCBjYW4NCisJCWVudW1lcmF0
ZSBzbmFwaG90cyBhbmQgYWNjZXNzIHRoZW0gdmlhICJ0aW1ld2FycCIgdG9rZW5zLg0KKwk8L3Bh
cmE+DQorDQorCTxwYXJhPg0KKwkJVGhpcyBtb2R1bGUgY2FuIGJlIGNvbWJpbmVkIHdpdGggPGNv
bW1hbmQ+dmZzX2NlcGg8L2NvbW1hbmQ+LA0KKwkJYnV0IDxjb21tYW5kPnZmc19jZXBoX3NuYXBz
aG90czwvY29tbWFuZD4gbXVzdCBiZSBsaXN0ZWQgZmlyc3QNCisJCWluIHRoZSA8Y29tbWFuZD52
ZnMgb2JqZWN0czwvY29tbWFuZD4gcGFyYW1ldGVyIGxpc3QuDQorCTwvcGFyYT4NCisNCisJPHBh
cmE+DQorCQlDZXBoRlMgc3VwcG9ydCBmb3IgY2VwaC5zbmFwLmJ0aW1lIHZpcnR1YWwgZXh0ZW5k
ZWQgYXR0cmlidXRlcw0KKwkJaXMgcmVxdWlyZWQgZm9yIHRoaXMgbW9kdWxlIHRvIHdvcmsgcHJv
cGVybHkuIFRoaXMgc3VwcG9ydCB3YXMNCisJCWFkZGVkIHZpYSBodHRwczovL3RyYWNrZXIuY2Vw
aC5jb20vaXNzdWVzLzM4ODM4Lg0KKwk8L3BhcmE+DQorPC9yZWZzZWN0MT4NCisNCis8cmVmc2Vj
dDE+DQorCTx0aXRsZT5DT05GSUdVUkFUSU9OPC90aXRsZT4NCisNCisJPHBhcmE+DQorCQlXaGVu
IHVzZWQgYXRvcCA8Y29tbWFuZD52ZnNfY2VwaDwvY29tbWFuZD4sDQorCQk8Y29tbWFuZD5wYXRo
PC9jb21tYW5kPiByZWZlcnMgdG8gYW4gYWJzb2x1dGUgcGF0aCB3aXRoaW4gdGhlDQorCQlDZXBo
IGZpbGVzeXN0ZW0gYW5kIHNob3VsZCBub3QgYmUgbW91bnRlZCBsb2NhbGx5Og0KKwk8L3BhcmE+
DQorDQorCTxwcm9ncmFtbGlzdGluZz4NCisJCTxzbWJjb25mc2VjdGlvbiBuYW1lPSJbc2hhcmVd
Ii8+DQorCQk8c21iY29uZm9wdGlvbiBuYW1lPSJ2ZnMgb2JqZWN0cyI+Y2VwaF9zbmFwc2hvdHMg
Y2VwaDwvc21iY29uZm9wdGlvbj4NCisJCTxzbWJjb25mb3B0aW9uIG5hbWU9InBhdGgiPi9ub24t
bW91bnRlZC9jZXBoZnMvcGF0aDwvc21iY29uZm9wdGlvbj4NCisJCTxzbWJjb25mb3B0aW9uIG5h
bWU9Imtlcm5lbCBzaGFyZSBtb2RlcyI+bm88L3NtYmNvbmZvcHRpb24+DQorCTwvcHJvZ3JhbWxp
c3Rpbmc+DQorDQorCTxwYXJhPg0KKwkJPGNvbW1hbmQ+dmZzX2NlcGhfc25hcHNob3RzPC9jb21t
YW5kPiBjYW4gYWxzbyBiZSB1c2VkIGF0b3AgYQ0KKwkJa2VybmVsIENlcGhGUyBtb3VudGVkIHNo
YXJlIHBhdGgsIHdpdGhvdXQNCisJCTxjb21tYW5kPnZmc19jZXBoPC9jb21tYW5kPi4gSW4gdGhp
cyBjYXNlIFNhbWJhJ3MgZGVmYXVsdCBWRlMNCisJCWJhY2tlbmQgPGNvbW1hbmQ+dmZzX2RlZmF1
bHQ8L2NvbW1hbmQ+IGlzIHVzZWQ6DQorCTwvcGFyYT4NCisNCisJPHByb2dyYW1saXN0aW5nPg0K
KwkJPHNtYmNvbmZzZWN0aW9uIG5hbWU9IltzaGFyZV0iLz4NCisJCTxzbWJjb25mb3B0aW9uIG5h
bWU9InZmcyBvYmplY3RzIj5jZXBoX3NuYXBzaG90czwvc21iY29uZm9wdGlvbj4NCisJCTxzbWJj
b25mb3B0aW9uIG5hbWU9InBhdGgiPi9tbnQvY2VwaGZzLzwvc21iY29uZm9wdGlvbj4NCisJPC9w
cm9ncmFtbGlzdGluZz4NCis8L3JlZnNlY3QxPg0KKw0KKzxyZWZzZWN0MT4NCisJPHRpdGxlPk9Q
VElPTlM8L3RpdGxlPg0KKw0KKwk8dmFyaWFibGVsaXN0Pg0KKwkJPHZhcmxpc3RlbnRyeT4NCisJ
CTx0ZXJtPmNlcGg6c25hcGRpciA9IHN1YmRpcmVjdG9yeTwvdGVybT4NCisJCTxsaXN0aXRlbT4N
CisJCTxwYXJhPg0KKwkJCUFsbG93cyBmb3IgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHNwZWNp
YWwgQ2VwaEZTDQorCQkJc25hcHNob3Qgc3ViZGlyZWN0b3J5IG5hbWUuIFRoaXMgcGFyYW1ldGVy
IHNob3VsZCBvbmx5DQorCQkJYmUgY2hhbmdlZCBmcm9tIHRoZSAiLnNuYXAiIGRlZmF1bHQgaWYg
dGhlIGNlcGguY29uZg0KKwkJCTxjb21tYW5kPmNsaWVudCBzbmFwZGlyPC9jb21tYW5kPiBvcg0K
KwkJCTxjb21tYW5kPnNuYXBkaXJuYW1lPC9jb21tYW5kPiBtb3VudCBvcHRpb24gc2V0dGluZ3MN
CisJCQlhcmUgY2hhbmdlZCBmcm9tIHRoZWlyIG1hdGNoaW5nICIuc25hcCIgZGVmYXVsdHMuDQor
CQk8L3BhcmE+DQorCQk8cGFyYT4NCisJCQlEZWZhdWx0Og0KKwkJCTxzbWJjb25mb3B0aW9uIG5h
bWU9ImNlcGg6c25hcGRpciI+LnNuYXA8L3NtYmNvbmZvcHRpb24+DQorCQk8L3BhcmE+DQorCQk8
cGFyYT4NCisJCQlFeGFtcGxlOg0KKwkJCTxzbWJjb25mb3B0aW9uIG5hbWU9ImNlcGg6c25hcGRp
ciI+LnNuYXBzaG90czwvc21iY29uZm9wdGlvbj4NCisJCTwvcGFyYT4NCisJCTwvbGlzdGl0ZW0+
DQorCQk8L3Zhcmxpc3RlbnRyeT4NCisJPC92YXJpYWJsZWxpc3Q+DQorPC9yZWZzZWN0MT4NCisN
Cis8cmVmc2VjdDE+DQorCTx0aXRsZT5WRVJTSU9OPC90aXRsZT4NCisNCisJPHBhcmE+DQorCQlU
aGlzIG1hbiBwYWdlIGlzIHBhcnQgb2YgdmVyc2lvbiAmZG9jLnZlcnNpb247IG9mIHRoZSBTYW1i
YSBzdWl0ZS4NCisJPC9wYXJhPg0KKzwvcmVmc2VjdDE+DQorDQorPHJlZnNlY3QxPg0KKwk8dGl0
bGU+QVVUSE9SPC90aXRsZT4NCisNCisJPHBhcmE+VGhlIG9yaWdpbmFsIFNhbWJhIHNvZnR3YXJl
IGFuZCByZWxhdGVkIHV0aWxpdGllcw0KKwl3ZXJlIGNyZWF0ZWQgYnkgQW5kcmV3IFRyaWRnZWxs
LiBTYW1iYSBpcyBub3cgZGV2ZWxvcGVkDQorCWJ5IHRoZSBTYW1iYSBUZWFtIGFzIGFuIE9wZW4g
U291cmNlIHByb2plY3Qgc2ltaWxhcg0KKwl0byB0aGUgd2F5IHRoZSBMaW51eCBrZXJuZWwgaXMg
ZGV2ZWxvcGVkLjwvcGFyYT4NCisNCis8L3JlZnNlY3QxPg0KKw0KKzwvcmVmZW50cnk+DQpkaWZm
IC0tZ2l0IGEvZG9jcy14bWwvd3NjcmlwdF9idWlsZCBiL2RvY3MteG1sL3dzY3JpcHRfYnVpbGQN
CmluZGV4IDc5NmI2ODVjNzA5Li41NzVmYjcwMmI0NiAxMDA2NDQNCi0tLSBhL2RvY3MteG1sL3dz
Y3JpcHRfYnVpbGQNCisrKyBiL2RvY3MteG1sL3dzY3JpcHRfYnVpbGQNCkBAIC03Miw2ICs3Miw3
IEBAIHZmc19tb2R1bGVfbWFucGFnZXMgPSBbJ3Zmc19hY2xfdGRiJywNCiAgICAgICAgICAgICAg
ICAgICAgICAgICd2ZnNfY2FwJywNCiAgICAgICAgICAgICAgICAgICAgICAgICd2ZnNfY2F0aWEn
LA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3Zmc19jZXBoJywNCisgICAgICAgICAgICAgICAg
ICAgICAgICd2ZnNfY2VwaF9zbmFwc2hvdHMnLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3Zm
c19jb21taXQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3Zmc19jcm9zc3JlbmFtZScsDQog
ICAgICAgICAgICAgICAgICAgICAgICAndmZzX2RlZmF1bHRfcXVvdGEnLA0KLS0gDQoyLjE2LjQN
Cg0K

--MP_/ONc0h43l7LTACVLQlPm8iXu--

