Return-Path: <samba-technical-bounces@lists.samba.org>
X-Original-To: lists+samba-technical@lfdr.de
Delivered-To: lists+samba-technical@lfdr.de
Received: from hr1.samba.org (hr1.samba.org [IPv6:2a01:4f8:192:486::1:0])
	by mail.lfdr.de (Postfix) with ESMTPS id EE7A6306AC
	for <lists+samba-technical@lfdr.de>; Fri, 31 May 2019 04:29:13 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.samba.org; s=2954282; h=From:List-Id:Date:Subject:To:cc;
	bh=gOnph9h2LeWI1oo8Ob3DAJQ5FO7KSzWSTRGOqg+cuL0=; b=Kpfgypz2PxXk2f5upMXVaNoSQS
	8nE6W83U9cG6DdfANJ4WRvIouexlfEPQk7QtoluIafB7erYNDURKvQzWjuz59+BELA0KwLj899TX/
	ObMJ3/hRuU7+i3mtX5C4A9yljh3sNfOG+/5vZaACRuqlO678nauIKZu2dfT/iBB67kLfE4LAQMUjB
	E2WJDcEAc6c/68vMPNu5kOwNT1Kel/nvDXZiWepWbGI7XzHDHFmJwGGppTMh7EhDAJjVsCLtoV/w2
	zlZN+70f6eRSF8Eo3xJ7hkBR6ci7ilUi/+2/FA3/9a4if6k3up5yQP+fkfLFTlcNS+49ks5zS3+2O
	80Ykpm4g==;
Received: from localhost ([::1]:48358 helo=hr1.samba.org) 
	by hr1.samba.org with esmtp (Exim)
	id 1hWXHM-002g7P-RO; Fri, 31 May 2019 02:28:24 +0000
Received: from cat-porwal-prod-mail1.catalyst.net.nz ([202.78.240.226]:56850) 
 by hr1.samba.org with esmtps
 (TLS1.2:ECDHE_RSA_AES_256_GCM_SHA384:256) (Exim) id 1hWXHF-002g7I-Gr
 for samba-technical@lists.samba.org; Fri, 31 May 2019 02:28:22 +0000
Received: from [IPv6:2404:130:0:1000:ed06:1c1d:e56c:b595] (unknown
 [IPv6:2404:130:0:1000:ed06:1c1d:e56c:b595])
 (Authenticated sender: timbeale@catalyst.net.nz)
 by cat-porwal-prod-mail1.catalyst.net.nz (Postfix) with ESMTPSA id 5799081283
 for <samba-technical@lists.samba.org>; Fri, 31 May 2019 14:27:51 +1200 (NZST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=catalyst.net.nz;
 s=default; t=1559269671;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:mime-version:mime-version:content-type:content-type: openpgp:openpgp;
 bh=gOnph9h2LeWI1oo8Ob3DAJQ5FO7KSzWSTRGOqg+cuL0=;
 b=Vgkd3l7e7YNMiQB0sy2Wx8Mn2+SjMBtJYgpHMvbSdCt3MKiFhmGpCBxaxXvoPK+YYyQMcR
 E4vbF1nnuKI6vgBITiC28TEf+cR/2kpeTb3blwgYCJZ6ozs2w/WGu3FFu2XXGVvhjCILTI
 2U+eQt9xCspxGY0Hf8+Bp8u3vrI+eJG8RS0KbSIHXc3poFFhdhIXCZS2+TaLHNHtWGD0jt
 eoMnlUpI2rrUxsfxvp9gskU+O01ohs8Q+ympbJdRhuW64YHOMFi9UHvIOevtHji4M/ubRZ
 49R0tgHKJCvx34eOaW+aayXr1crWQB6svFnKEd94jwTRu7cWzTSh2lTV0lLOVg==
Openpgp: preference=signencrypt
To: samba-technical <samba-technical@lists.samba.org>
Subject: [PATCH] selftest: Add support for running tests using linux namespaces
Message-ID: <734dfc03-f7f5-6a49-9a82-c97cf24c03f8@catalyst.net.nz>
Date: Fri, 31 May 2019 14:27:50 +1200
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.7.0
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------19D753CA15187E10AC30AB10"
Content-Language: en-US
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=catalyst.net.nz;
 s=default; t=1559269672;
 h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
 to:to:cc:mime-version:mime-version:content-type:content-type:
 openpgp:openpgp; bh=gOnph9h2LeWI1oo8Ob3DAJQ5FO7KSzWSTRGOqg+cuL0=;
 b=hrvjcLr0yOAX2ZHtaN2WTqaZRQpi/hMdpX5ElCJKdLs1PrqtDZKn8DSL31aNN1bS9oxoFC
 LRihxrnMFq7PyJ4Aa8kW6S3lTQAUxlTI1szkik+gWYJ9YaG7+J7OEnkJyeggbK5Yb27/We
 W10qAD04ZczrZiGxlenT7+cEfq+o9gFBdPZFdiNuvOE72HItE2p4UQvm9D/hbiLEx0l0L/
 6BNfNQbbJq4Y9HSxGcok8/rkPaEyi+dt+LJfI74d32m18ZBFri6woF7nqstyUtf2//o9G4
 OajW/+35ovA5NRYEzmH5ggKhCDYLO3kiA+8uIsCCqjsvokFA9GLjxoGsBvsQZg==
ARC-Seal: i=1; s=default; d=catalyst.net.nz; t=1559269672; a=rsa-sha256;
 cv=none;
 b=woC3RMGbNbxzXmg3sZHF0OQEZiIqUKV2096puqWUd+f8znPPibFlKPw5euEAyyWnqsRJPf
 MBubguNwEuNpsLywB7s7dEzsm9CgxD97m++vfa3ldSPhpbhMbW2q56kcTxX7vsPnbJRKkN
 rACaONEbXbnzS+saqzAlzoG9wolb+lirc5AZIEmbbM4DZ/jqaMc/R4GXiqOwFdiANQYoTp
 KQaO2v4klacDpBClUB2QGwpdlMN4p8vHd10DfWDTzoSD7KwvePkax6iQtu3eo6p1mBNBl4
 WrGXBaQnUerfoWPoGCw3TJudnmQhT8ZgmhU3d2M80TALun34Zgo3ac63Yo/Qsw==
ARC-Authentication-Results: i=1; ORIGINATING;
 auth=pass smtp.auth=timbeale@catalyst.net.nz
 smtp.mailfrom=timbeale@catalyst.net.nz
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
 subscribe to the list samba@lists.samba.org"
 <samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/options/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/pipermail/samba-technical/>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
 <mailto:samba-technical-request@lists.samba.org?subject=subscribe>
From: Tim Beale via samba-technical <samba-technical@lists.samba.org>
Reply-To: Tim Beale <timbeale@catalyst.net.nz>
Errors-To: samba-technical-bounces@lists.samba.org
Sender: "samba-technical" <samba-technical-bounces@lists.samba.org>

This is a multi-part message in MIME format.
--------------19D753CA15187E10AC30AB10
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

This patch-set adds optional/experimental support for using linux
namespaces instead of socket-wrapper.

The namespaces functionality is fairly self-contained in a few new
scripts, and we only need to hook into a couple of places in selftest to
use it. So it doesn't complicate selftest too much.

Socket-wrapper is still very much needed by selftest. However, using
namespaces offers some potential benefits:
- Better testing of DNS. Longer-term we'd like to be able to actually
run BIND9 in selftest.
- More realistic testing of Samba, E.g. we've previously noticed LMDB
was 20% slower when run in a testenv compared to when run outside.
- You can (in theory) join a Windows VM to the samba testenv, or point
the RSAT GUI at a samba testenv.
- You can now have multiple shells that can all run samba utilities
simultaneously.
- The customdc testenv becomes a lot more powerful, e.g. it essentially
becomes a light-weight samba VM that's trivial to spin up.

The basic usage is:
USE_NAMESPACES=1 SELFTEST_TESTENV=ad_dc make testenv

There's then a ./st/<testenv>/nsenter.sh helper script you can run to
attach other shells to the testenv namespace. There's some
example-output attached of using nsenter.sh.

Merge request: https://gitlab.com/samba-team/samba/merge_requests/511


--------------19D753CA15187E10AC30AB10
Content-Type: text/plain; charset=UTF-8;
 name="namespaces-patch.txt"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="namespaces-patch.txt"

RnJvbSBmOTk2MzBmNTFkZTdjZmUwYmMwOGVlMWFiZDUwMjRiYTJiMmJlNDFhIE1vbiBTZXAg
MTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBUaW0gQmVhbGUgPHRpbWJlYWxlQGNhdGFseXN0Lm5l
dC5uej4KRGF0ZTogRnJpLCAzMSBNYXkgMjAxOSAxMjozMzo1OSArMTIwMApTdWJqZWN0OiBb
UEFUQ0ggMS85XSBzZWxmdGVzdDogQWxsb3cgZm9yIHdpZGVyIHJhbmdlIG9mIHRlcm1pbmFs
cyAoYmVzaWRlcwogeHRlcm0pCgpBbGxvdyBkZXZlbG9wZXJzIHRvIG92ZXJyaWRlIHRoZSBk
ZWZhdWx0IEB0ZXJtX2FyZ3MsIGFzIHdlbGwgYXMgdGhlCnRlcm1pbmFsIGl0c2VsZi4KCkN1
cnJlbnRseSwgZHVlIHRvIHRoZSBuYXR1cmUgb2YgdGhlIGFyZ3Mgd2UgcGFzcyB0byB4dGVy
bSAoaS5lLiAnZWNobyAtZQoiYmxhaC4uIiAmJiBiYXNoJyksIGl0IGRvZXNuJ3QgbWFrZSBp
dCB2ZXJ5IGZsZXhpYmxlIGZvciB1c2Ugd2l0aCBvdGhlcgp0ZXJtaW5hbHMuIEJ5IGRyb3Bw
aW5nIHRoZXNlIGFkZGl0aW9uYWwgQHRlcm1fYXJncywgaXQgbWFrZXMgaXQgbXVjaAplYXNp
ZXIgdG8gc2xvdCBpbiBhbiBhbHRlcm5hdGl2ZSB0ZXJtaW5hbC4KCkZvciBleGFtcGxlLCB0
aGVzZSBjb21tYW5kcyBub3cgd29yayAobW9yZSBvciBsZXNzKS4KClRFUk1JTkFMPSJ0ZXJt
aW5hdG9yIiBURVJNSU5BTF9BUkdTPSIteCBiYXNoIiBcCiBTRUxGVEVTVF9URVNURU5WPWFk
X2RjIG1ha2UgdGVzdGVudgoKVEVSTUlOQUw9ImJhc2giIFRFUk1JTkFMX0FSR1M9IiIgXAog
U0VMRlRFU1RfVEVTVEVOVj1udDRfZGMgbWFrZSB0ZXN0ZW52CgpURVJNSU5BTD0iYmFzaCIg
VEVSTUlOQUxfQVJHUz0iLS1ub3JjIiBcCiBTRUxGVEVTVF9URVNURU5WPW5vbmUgbWFrZSB0
ZXN0ZW52CgpiYXNoIGlzIHVzYWJsZSwgYnV0IGEgbGl0dGxlIHdlaXJkIGJlY2F1c2UgaXRz
IG91dHB1dCBpcyBzdGlsbCBiZWluZwpwaXBlZC4gQWxzbyBiYXNoIHdpdGggYWRfZGMgaXMg
YSBsaXR0bGUgd2VpcmQgYmVjYXVzZSB3ZSdyZSB1c2luZyB0ZWUKZm9yIHRoZSBEQydzIHN0
ZG91dC4gKEknZCBhbHNvIHJlY29tbWVuZCAtLW5vcmMsIGFzIGl0IG1ha2VzIGl0IGVhc2ll
cgp0byBkaWZmZXJlbnRpYXRlIGJldHdlZW4gdGhlIHRlc3RlbnYgc2hlbGwpLgoKU2lnbmVk
LW9mZi1ieTogVGltIEJlYWxlIDx0aW1iZWFsZUBjYXRhbHlzdC5uZXQubno+Ci0tLQogc2Vs
ZnRlc3Qvc2VsZnRlc3QucGwgfCA0ICsrKysKIDEgZmlsZSBjaGFuZ2VkLCA0IGluc2VydGlv
bnMoKykKCmRpZmYgLS1naXQgYS9zZWxmdGVzdC9zZWxmdGVzdC5wbCBiL3NlbGZ0ZXN0L3Nl
bGZ0ZXN0LnBsCmluZGV4IDIyOGJiMjkuLjFiYmUyZjggMTAwNzU1Ci0tLSBhL3NlbGZ0ZXN0
L3NlbGZ0ZXN0LnBsCisrKyBiL3NlbGZ0ZXN0L3NlbGZ0ZXN0LnBsCkBAIC05NjQsNiArOTY0
LDEwIEBAICRlbnZ2YXJzdHIKIAlteSBAdGVybSA9ICgpOwogCWlmICgkRU5We1RFUk1JTkFM
fSkgewogCSAgICBAdGVybSA9ICgkRU5We1RFUk1JTkFMfSk7CisJCSMgb3ZlcnJpZGUgdGhl
IGRlZmF1bHQgdGVybWluYWwgYXJncyAoaWYgc3BlY2lmaWVkKQorCQlpZiAoZGVmaW5lZCgk
RU5We1RFUk1JTkFMX0FSR1N9KSkgeworCQkJQHRlcm1fYXJncyA9IHNwbGl0KC8gLywgJEVO
VntURVJNSU5BTF9BUkdTfSk7CisJCX0KIAl9IGVsc2UgewogCSAgICBAdGVybSA9ICgieHRl
cm0iLCAiLWUiKTsKIAkgICAgdW5zaGlmdChAdGVybV9hcmdzLCAoImJhc2giLCAiLWMiKSk7
Ci0tIAoyLjcuNAoKCkZyb20gMjYyY2QzMWM0NTQ3ZWI5MDgzYmJlMGQyNDIxNTRhNzhhMWZl
YzM2OCBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogVGltIEJlYWxlIDx0aW1iZWFs
ZUBjYXRhbHlzdC5uZXQubno+CkRhdGU6IFR1ZSwgMjYgRmViIDIwMTkgMTU6NTQ6MzQgKzEz
MDAKU3ViamVjdDogW1BBVENIIDIvOV0gc2VsZnRlc3Q6IEFkZCBoZWxwZXIgc2NyaXB0cyB0
byBydW4gc2VsZnRlc3QgaW4KIG5hbWVzcGFjZXMKClRoaXMgYWRkcyB0aGUgdW5kZXJseWlu
ZyBzY3JpcHRzLCBidXQgdGhleSBhcmUgbm90IGFjdHVhbGx5IGhvb2tlZCB1cCB0bwp0aGUg
c2VsZnRlc3QgY29kZSB5ZXQsIGFuZCBzbyBhcmUgbm90IGFjdHVhbGx5IHVzZWQuCgpTaWdu
ZWQtb2ZmLWJ5OiBUaW0gQmVhbGUgPHRpbWJlYWxlQGNhdGFseXN0Lm5ldC5uej4KLS0tCiBz
ZWxmdGVzdC9ucy9SRUFETUUgICAgICAgICAgICAgIHwgNjUgKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysrKysrKysKIHNlbGZ0ZXN0L25zL2FkZF9icmlkZ2VfaWZhY2Uu
c2ggfCAyMiArKysrKysrKysrKysrKwogc2VsZnRlc3QvbnMvY3JlYXRlX2JyaWRnZS5zaCAg
ICB8IDE5ICsrKysrKysrKysrKwogc2VsZnRlc3QvbnMvc3RhcnRfaW5fbnMuc2ggICAgICB8
IDU2ICsrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrCiA0IGZpbGVzIGNoYW5n
ZWQsIDE2MiBpbnNlcnRpb25zKCspCiBjcmVhdGUgbW9kZSAxMDA2NDQgc2VsZnRlc3QvbnMv
UkVBRE1FCiBjcmVhdGUgbW9kZSAxMDA3NTUgc2VsZnRlc3QvbnMvYWRkX2JyaWRnZV9pZmFj
ZS5zaAogY3JlYXRlIG1vZGUgMTAwNzU1IHNlbGZ0ZXN0L25zL2NyZWF0ZV9icmlkZ2Uuc2gK
IGNyZWF0ZSBtb2RlIDEwMDc1NSBzZWxmdGVzdC9ucy9zdGFydF9pbl9ucy5zaAoKZGlmZiAt
LWdpdCBhL3NlbGZ0ZXN0L25zL1JFQURNRSBiL3NlbGZ0ZXN0L25zL1JFQURNRQpuZXcgZmls
ZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5lOWU5ZDA2Ci0tLSAvZGV2L251bGwKKysr
IGIvc2VsZnRlc3QvbnMvUkVBRE1FCkBAIC0wLDAgKzEsNjUgQEAKK1RoZSBzY3JpcHRzIGlu
IHRoaXMgZGlyZWN0b3J5IGFyZSBleHBlcmltZW50YWwgYW5kIGFyZSB1c2VkIHRvIGNyZWF0
ZSB0ZXN0ZW52cworaW4gc2VwYXJhdGUgbGludXggbmFtZXNwYWNlcy4gVGhpcyBhdm9pZHMg
dGhlIG5lZWQgZm9yIHNvY2tldC13cmFwcGVyLgorCitXaGF0IGFyZSBOYW1lc3BhY2VzCis9
PT09PT09PT09PT09PT09PT09CitOYW1lc3BhY2VzIGFsbG93IHRoZSBrZXJuZWwgdG8gc2Vn
cmVnYXRlIGl0cyBzeXN0ZW0gcmVzb3VyY2VzIChmaWxlcywgQ1BVLAorZXRjKSwgc28gdGhh
dCBkaWZmZXJlbnQgcHJvY2Vzc2VzIG9ubHkgc2VlIHRoZSBzZXQgb2YgcmVzb3VyY2VzIHRo
ZXkgYXJlCithbGxvd2VkIHRvIHVzZS4gVGhlcmUgYXJlIHNldmVyYWwgZGlmZmVyZW50IHR5
cGVzIG9mIG5hbWVzcGFjZTogbmV0d29yaywKK3VzZXIsIHByb2Nlc3MsIGZpbGUsIElQQywg
YW5kIHNvIG9uLgorCitLZXkgcG9pbnRzIHRvIGdyYXNwIGFyZToKKyogRWFjaCB0eXBlIG9m
IG5hbWVzcGFjZSBnZXRzIG1hbmFnZWQgc2VwYXJhdGVseSBieSB0aGUga2VybmVsLCBpLmUu
IHByb2Nlc3MKK25hbWVzcGFjZXMgYXJlIG1hbmFnZWQgc2VwYXJhdGVseSB0byBuZXR3b3Jr
IG5hbWVzcGFjZXMsIHdoaWNoIGFyZSBzZXBhcmF0ZQordG8gdXNlciBuYW1lc3BhY2VzLiBU
aGVzZSBzY3JpcHRzIGdpdmUgZWFjaCB0ZXN0ZW52IGl0cyBvd24gbmV0d29yayBuYW1lc3Bh
Y2UsCitidXQgb3RoZXJ3aXNlIHRoZXkgYWxsIHN0aWxsIHNoYXJlIHRoZSBzYW1lIHVzZXIv
cHJvY2Vzcy9ldGMgbmFtZXNwYWNlLgorKEluIGZ1dHVyZSwgd2UgbWF5IHdhbnQgdG8gZ2l2
ZSBlYWNoIHRlc3RlbnYgaXRzIG93biBwcm9jZXNzIGFuZCB1c2VyCituYW1lc3BhY2UsIHRv
IGJldHRlciBtaW1pYyBhIHByb2R1Y3Rpb24gREMpLgorKiBOYW1lc3BhY2VzIGFyZSBjcmVh
dGVkIHVzaW5nIHRoZSAndW5zaGFyZScgdXRpbGl0eS4gVGhlIG5ldyBzZWxmdGVzdAorbmFt
ZXNwYWNlcyBhcmUgYW5vbnltb3VzL25hbWVsZXNzLCBhbmQgc28gdGhlIGRpZmZlcmVudCBu
YW1lc3BhY2VzIGFyZQoraWRlbnRpZmllZCBieSB0aGUgUElEIG9mIHRoZSBwcm9jZXNzZXMg
cnVubmluZyB3aXRoaW4gdGhlIG5hbWVzcGFjZQorKHR5cGljYWxseSBzYW1iYSkuCisqIExp
bnV4IHN1cHBvcnRzIG5lc3RpbmcgbmFtZXNwYWNlcyB3aXRoaW4gbmFtZXNwYWNlcy4gSW4g
dGhpcyBjYXNlLCBlYWNoCit0ZXN0ZW52IERDIGhhcyBpdHMgb3duIG5ldHdvcmsgbmFtZXNw
YWNlLCB3aGljaCBpcyBhIGNoaWxkIG9mIHRoZSBvdmVyYXJjaGluZworc2VsZnRlc3QgbmFt
ZXNwYWNlICh3aGljaCBpdHNlbGYgaXMgYSBjaGlsZCBvZiB3aGF0ZXZlciBuYW1lc3BhY2Ug
eW91IHJ1bgorJ21ha2UgdGVzdCcgZnJvbSAtIHVzdWFsbHkgdGhpcyB3b3VsZCBiZSB0aGUg
cm9vdCBuYW1lc3BhY2UpLgorCitIb3cgZG9lcyBpdCB3b3JrPworPT09PT09PT09PT09PT09
PT0KK05vcm1hbGx5IHdoZW4gJ21ha2UgdGVzdCcgaXMgcnVuLCBldmVyeSB0ZXN0ZW52IHVz
ZXMgYSAxMjcuMC4wLnggSVAgYWRkcmVzcworYW5kIHNvY2tldC13cmFwcGVyIHBhc3NlcyB0
aGUgcGFja2V0cyBiZXR3ZWVuIHRoZW0uCisKK1dpdGggbmFtZXNwYWNlcywgd2UgY2FuIHVz
ZSByZWFsIElQIGFkZHJlc3NlcyBhbmQgaGF2ZSB0aGUgcGFja2V0cyBwYXNzIHRocm91Z2gK
K3RoZSBrZXJuZWwncyBJUCBzdGFjayBub3JtYWxseSwgYXMgaXQgZm9yd2FyZHMgdGhlbSBi
ZXR3ZWVuIG5hbWVzcGFjZXMuCisKK1dlIHVzZSB2ZXRoIGludGVyZmFjZXMgZm9yIHRoaXMu
IHZldGggaXMgYSB0eXBlIG9mIHZpcnR1YWwgaW50ZXJmYWNlIHN1cHBvcnRlZAorYnkgdGhl
IGtlcm5lbC4gdmV0aCBpbnRlcmZhY2VzIGNvbWUgaW4gcGFpcnMsIGFuZCBhY3QgYXMgYSB0
dW5uZWwgLSBhbnkgcGFja2V0cworc2VudCBvbiBhIHZldGggaW50ZXJmYWNlIHNpbXBseSBl
bmQgdXAgYXMgcmVjZWl2ZWQgcGFja2V0cyBvbiB0aGUgcGFpciB2ZXRoCitpbnRlcmZhY2Uu
CisKK1dlIGNyZWF0ZSBhIG5ldyB2ZXRoIGludGVyZmFjZSBwYWlyIGZvciBlYWNoIHRlc3Rl
bnYsIGFuZCB1c2UgdGhlbSB0byBjb25uZWN0Cit1cCB0aGUgbmFtZXNwYWNlcy4gT25lIGVu
ZCBvZiB0aGUgdmV0aCBwYWlyIGlzIGFkZGVkIHRvIHRoZSBtYWluIHNlbGZ0ZXN0CituYW1l
c3BhY2UsIGFuZCB0aGUgb3RoZXIgZW5kIGlzIGFkZGVkIHRvIGEgbmV3IG5hbWVzcGFjZSB0
aGF0IHdlJ2xsIHJ1bgorc2FtYmEgaW4uIEUuZy4KKworc2VsZnRlc3QucGwgIHZldGgyMS1i
ciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdmV0aDIxIHNhbWJhIChhZF9kY19udHZmcykK
KyAgICAgICAgICAgICAxMC4wLjAuMTEgICAgICAgICAgICAgICAgICAgICAgICAgIDEwLjAu
MC4yMQorIE5hbWVzcGFjZSAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgTmFtZXNwYWNlIDIKKworSG93ZXZlciwgd2UgbmVlZCB0byBydW4gbXVsdGlwbGUgZGlm
ZmVyZW50IHRlc3RlbnZzIGFuZCBoYXZlIHRoZW0gdGFsayB0bworZWFjaCBvdGhlci4gU28g
dG8gZG8gdGhpcywgd2UgbmVlZCBhIGJyaWRnZSBpbnRlcmZhY2UgKCdzZWxmdGVzdDAnKSB0
byBjb25uZWN0Cit1cCB0aGUgbmFtZXNwYWNlcywgd2hpY2ggZXNzZW50aWFsbHkganVzdCBh
Y3RzIGFzIGEgaHViLiBTbyBjb25uZWN0aW5nIHRvZ2V0aGVyCittdWx0aXBsZSB0ZXN0ZW52
cyBsb29rcyBtb3JlIGxpa2UgdGhpczoKKworc2VsZnRlc3QucGwgICAgICstLSB2ZXRoMjEt
YnIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHZldGgyMSBzYW1iYSAoYWRfZGNfbnR2ZnMp
CisgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgMTAuMC4wLjIxCisgICAgc2VsZnRlc3QwIC0tKyAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBOYW1lc3BhY2UgMgorICAgIDEwLjAuMC4xMSAgIHwKKyAgICAg
ICAgICAgICAgICArLS0gdmV0aDIyLWJyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB2ZXRo
MjIgc2FtYmEgKHZhbXBpcmVfZGMpCisgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgMTAuMC4wLjIyCisgTmFtZXNwYWNlIDEgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lc3BhY2UgMyAgICAg
IAorCitUaGUgdmV0aCBpbnRlcmZhY2VzIGFyZSBuYW1lZCB2ZXRoWCBhbmQgdmV0aFgtYnIs
IHdoZXJlIFggaXMgdGhlCitTT0NLRVRfV1JBUFBFUl9ERUZBVUxUX0lGQUNFIGZvciB0aGUg
dGVzdGVudi4gVGhlIHZldGhYLWJyIGludGVyZmFjZSBpcyBhbHdheXMKK2FkZGVkIHRvIHRo
ZSBzZWxmdGVzdDAgYnJpZGdlIGludGVyZmFjZS4gCisKZGlmZiAtLWdpdCBhL3NlbGZ0ZXN0
L25zL2FkZF9icmlkZ2VfaWZhY2Uuc2ggYi9zZWxmdGVzdC9ucy9hZGRfYnJpZGdlX2lmYWNl
LnNoCm5ldyBmaWxlIG1vZGUgMTAwNzU1CmluZGV4IDAwMDAwMDAuLmRhOWQ1M2EKLS0tIC9k
ZXYvbnVsbAorKysgYi9zZWxmdGVzdC9ucy9hZGRfYnJpZGdlX2lmYWNlLnNoCkBAIC0wLDAg
KzEsMjIgQEAKKyMhL2Jpbi9zaAorIworIyBDb25maWd1cmVzIHRoZSBpbnRlcmZhY2VzIG5l
ZWRlZCBmb3IgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIG5hbWVzcGFjZXMuCisjIFRoaXMgaGFu
ZGxlcyB0aGUgYnJpZGdlLWVuZCBvZiB0aGUgdmV0aCBwYWlyLgoraW50ZXJmYWNlPSQxCisK
KyMgdGhlIG1haW4gYnJpZGdlIGludGVyZmFjZSBpcyBjYWxsZWQgJ3NlbGZ0ZXN0MCcgKGFs
dGhvdWdoIGluIGZ1dHVyZSB3ZSBtYXkKKyMgd2FudCB0byBzZWdyZWdhdGUgdGhlIGRpZmZl
cmVudCBkb21haW5zIGJ5IHVzaW5nIGRpZmZlcmVudCBicmlkZ2VzKQorYnJpZGdlPSQyCisK
KyMgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgY2hpbGQgbmFtZXNwYWNlIHRvIHN0YXJ0IHVw
IGFuZCBhZGQgdGhlIG5ldworIyBpbnRlcmZhY2UgYmFjayB0byBvdXIgbmV3IG5hbWVzcGFj
ZQord2hpbGUgISBpcCBsaW5rIHNob3cgJGludGVyZmFjZSA+IC9kZXYvbnVsbCAyPiYxCitk
bworICAgIHNsZWVwIDAuMQorICAgIGVjaG8gIldhaXRpbmcgZm9yICRpbnRlcmZhY2UgdG8g
YmUgY3JlYXRlZC4uLiIKK2RvbmUKKworIyBicmluZyB0aGUgYnJpZGdlLWVuZCBvZiB0aGUg
bGluayB1cCBhbmQgYWRkIGl0IHRvIHRoZSBicmlkZ2UKK2lwIGxpbmsgc2V0IGRldiAkaW50
ZXJmYWNlIHVwCitpcCBsaW5rIHNldCAkaW50ZXJmYWNlIG1hc3RlciAkYnJpZGdlCisKZGlm
ZiAtLWdpdCBhL3NlbGZ0ZXN0L25zL2NyZWF0ZV9icmlkZ2Uuc2ggYi9zZWxmdGVzdC9ucy9j
cmVhdGVfYnJpZGdlLnNoCm5ldyBmaWxlIG1vZGUgMTAwNzU1CmluZGV4IDAwMDAwMDAuLjk3
NjZjZDgKLS0tIC9kZXYvbnVsbAorKysgYi9zZWxmdGVzdC9ucy9jcmVhdGVfYnJpZGdlLnNo
CkBAIC0wLDAgKzEsMTkgQEAKKyMhL2Jpbi9zaAorCisjIGNyZWF0ZXMgYSBicmlkZ2UgaW50
ZXJmYWNlIChpLmUuICdzZWxmdGVzdDAnKSB0aGF0IGNvbm5lY3RzIHRvZ2V0aGVyIHRoZQor
IyB2ZXRoIGludGVyZmFjZXMgZm9yIHRoZSB2YXJpb3VzIHRlc3RlbnZzCisKK2JyX25hbWU9
JDEKK2lwX2FkZHI9JDIKK2lwdjZfYWRkcj0kMworCisjIG1ha2Ugc3VyZSB0aGUgbG9vcGJh
Y2sgaXMgdXAgKG5lZWRlZCBmb3IgcGluZ2luZyBiZXR3ZWVuIG5hbWVzcGFjZXMsIGV0YykK
K2lwIGxpbmsgc2V0IGRldiBsbyB1cAorCisjIGNyZWF0ZSB0aGUgYnJpZGdlIGludGVyZmFj
ZSBhbmQgZW5hYmxlIGl0CitpcCBsaW5rIGFkZCAkYnJfbmFtZSB0eXBlIGJyaWRnZQoraXAg
YWRkciBhZGQgJGlwX2FkZHIvMjQgZGV2ICRicl9uYW1lCitpcCBhZGRyIGFkZCAkaXB2Nl9h
ZGRyLzExMiBkZXYgJGJyX25hbWUKK2lwIGxpbmsgc2V0ICRicl9uYW1lIHVwCisKKwpkaWZm
IC0tZ2l0IGEvc2VsZnRlc3QvbnMvc3RhcnRfaW5fbnMuc2ggYi9zZWxmdGVzdC9ucy9zdGFy
dF9pbl9ucy5zaApuZXcgZmlsZSBtb2RlIDEwMDc1NQppbmRleCAwMDAwMDAwLi41ODMxYTBi
Ci0tLSAvZGV2L251bGwKKysrIGIvc2VsZnRlc3QvbnMvc3RhcnRfaW5fbnMuc2gKQEAgLTAs
MCArMSw1NiBAQAorIyEvYmluL3NoCisjCisjIFN0YXJ0cyBzYW1iYSBpbiBhIHNlcGFyYXRl
IG5hbWVzcGFjZS4gVGhpcyBnZXRzIHBhc3NlZCB0aGUgaW50ZXJmYWNlL0lQCisjIHRvIHVz
ZSwgYXMgd2VsbCBhcyB0aGUgU2FtYmEgY29tbWFuZCB0byBydW4uIFRoZSB3aG9sZSBzY3Jp
cHQgZ2V0cyBydW4KKyMgKHZpYSB1bnNoYXJlKSBpbiBhIHNlcGFyYXRlIG5hbWVzcGFjZS4K
KworIyB0aGUgZmlyc3QgMyBhcmdzIGFyZSBvdXIgaW50ZXJmYWNlLW5hbWUsIHBhcmVudC1Q
SUQsIGFuZCBhIGV4cG9ydHMgZmlsZQorIyBjb250YWluaW5nIGVudmlyb25tZW50IHZhcmlh
YmxlcyAoJFNFUlZFUiwgJFNFUlZFUl9JUCwgZXRjKQoraW50ZXJmYWNlPSQxCitleHBvcnRz
X2ZpbGU9JDIKK3BhcmVudF9waWQ9JDMKKworIyB3ZSB3cml0ZSB0aGUgdGVzdGVudiBlbnZp
cm9ubWVudCB2YXJpYWJsZXMgdG8gZmlsZSwgd2hpY2ggbWFrZXMgaXQgZWFzaWVyCisjIHRv
IHdvcmsgb3V0IHRoZSAkU0VSVkVSLCAkU0VSVkVSX0lQLCBldGMKKy4gJGV4cG9ydHNfZmls
ZQorCisjIFRoZSBuYW1lc3BhY2VzIHdlIHVzZSBhcmUgYW5vbnltb3VzLCB3aGljaCBtZWFu
cyBvdGhlciBwcm9jZXNzZXMgd291bGQgbmVlZAorIyB0byB1c2Ugb3VyIFBJRCB0byBhY2Nl
c3MgdGhlIG5ldyBuYW1lc3BhY2UKK2VjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCitlY2hvICJDcmVhdGVkIG5h
bWVzcGFjZSBmb3IgJE5FVEJJT1NOQU1FIgorZWNobyAiVG8gY29tbXVuaWNhdGUgd2l0aCB0
aGlzIHRlc3RlbnYsIHVzZTogbnNlbnRlciAtdCAkJCAtLW5ldCBzaCIKK2VjaG8gIlRvIGNv
cHkgaXRzIGVudmlyb25tZW50IHZhcmlhYmxlcywgdXNlOiAuICRleHBvcnRzX2ZpbGUiCitl
Y2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tIgorCisjIHRoZSByZXN0IG9mIHRoZSBhcmdzIGFyZSB0aGUgc2FtYmEg
Y29tbWFuZCB0byBydW4KK3NoaWZ0IDMKK1NBTUJBX0NNRD0kQAorCisjIG1ha2Ugc3VyZSBu
YW1lc3BhY2UgbG9vcGJhY2sgaXMgdXAgKGl0J3MgbmVlZGVkIGZvciBwaW5nLCBldGMpCitp
cCBsaW5rIHNldCBkZXYgbG8gdXAKKworIyBDcmVhdGUgdGhlIGludGVyZmFjZXMgbmVlZGVk
IGZvciBjb21tdW5pY2F0aW9uIGJldHdlZW4gbmFtZXNwYWNlcy4KKyMgV2UgdXNlIGEgdmV0
aCBwYWlyLCB3aGljaCBhY3RzIGFzIGEgdHVubmVsIGJldHdlZW4gdGhlIG5hbWVzcGFjZXMu
CisjIE9uZSBlbmQgb2YgdGhlIHZldGggbGluayBpcyBhZGRlZCB0byBhIGNvbW1vbiBicmlk
Z2UgaW4gdGhlIHRvcC1sZXZlbCAoaS5lLgorIyBzZWxmdGVzdCkgbmFtZXNwYWNlLCBhbmQg
dGhlIG90aGVyIGVuZCBpcyBhZGRlZCB0byB0aGUgdGVzdGVudidzIG5hbWVzcGFjZS4KKyMg
VGhpcyBtZWFucyBlYWNoIHRlc3RlbnYgREMgaXMgaW4gaXRzIG93biBuYW1lc3BhY2UsIGJ1
dCB0aGV5IGNhbiB0YWxrIHRvCisjIGVhY2ggb3RoZXIgdmlhIHRoZSBjb21tb24gYnJpZGdl
IGludGVyZmFjZS4KKyMgVGhlIG5ldyB2ZXRoIGludGVyZmFjZXMgYXJlIG5hbWVkICJ2ZXRo
WCIgYW5kICJ2ZXRoWC1iciIsIHdoZXJlCisjIFggPSB0aGUgdGVzdGVudiBJUCAoaS5lLiBT
YW1iYTo6Z2V0X2ludGVyZmFjZSgpKS4gRS5nLiBhZF9kYyA9IHZldGgzMCwKKyMgYW5kIHZl
dGgzMC1ici4KKyMgVGhlICJ2ZXRoWCIgaW50ZXJmYWNlIHdpbGwgbGl2ZSBpbiB0aGUgbmV3
IHRlc3RlbnYncyBuYW1lc3BhY2UuCisjIFRoZSAidmV0aFgtYnIiIGVuZCBpcyBhZGRlZCB0
byB0aGUgYnJpZGdlIGluIHRoZSBtYWluIHNlbGZ0ZXN0IG5hbWVzcGFjZS4KK2lwIGxpbmsg
YWRkIGRldiAkaW50ZXJmYWNlLWJyIHR5cGUgdmV0aCBwZWVyIG5hbWUgJGludGVyZmFjZQor
CisjIG1vdmUgdGhlIGJyaWRnZSBlbmQgb2YgdGhlIGxpbmsgYmFjayBpbnRvIHRoZSBwYXJl
bnQgbmFtZXNwYWNlLgoraXAgbGluayBzZXQgJGludGVyZmFjZS1iciBuZXRucyAkcGFyZW50
X3BpZAorCisjIGNvbmZpZ3VyZSBvdXIgSVAgYWRkcmVzcyBhbmQgYnJpbmcgdGhlIGludGVy
ZmFjZSB1cAoraXAgYWRkciBhZGQgJFNFUlZFUl9JUC8yNCBkZXYgJGludGVyZmFjZQorIyBO
b3RlIHRoYXQgc2FtYmEgY2FuJ3QgYmluZCB0byB0aGUgSVB2NiBhZGRyZXNzIHdoaWxlIERB
RCBpcyBpbiBwcm9ncmVzcywKKyMgc28gd2UgdXNlICdub2RhZCcgd2hlbiBjb25maWd1cmlu
ZyB0aGUgYWRkcmVzcworaXAgYWRkciBhZGQgJFNFUlZFUl9JUFY2LzExMiBkZXYgJGludGVy
ZmFjZSBub2RhZAoraXAgbGluayBzZXQgZGV2ICRpbnRlcmZhY2UgdXAKKworIyBzdGFydCBz
YW1iYQorJFNBTUJBX0NNRAotLSAKMi43LjQKCgpGcm9tIDY0OTU3MTkyNWViODhiMGZhNjFj
NGQwY2JhMzdlMjU0ZDg3YTg5ZDIgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFRp
bSBCZWFsZSA8dGltYmVhbGVAY2F0YWx5c3QubmV0Lm56PgpEYXRlOiBUaHUsIDE0IE1hciAy
MDE5IDE3OjM4OjIyICsxMzAwClN1YmplY3Q6IFtQQVRDSCAzLzldIHNlbGZ0ZXN0OiBBZGQg
VEVTVEVOVl9ESVIgImVudiIgdmFyaWFibGUKCldlIHN0b3JlIHRoZSB0ZXN0ZW52IGRpcmVj
dG9yeSBwYXRoIGZvciB0aGUgJ2N0eCcgaGFzaG1hcCwgYnV0IG5vdCBmb3IKdGhlIHRlc3Rl
bnYtdmFycyBoYXNobWFwIChhbmQgdGhhdCBjYW4gYmUgcmVhbGx5IGFubm95aW5nIHNvbWV0
aW1lcykuCkFkZCBpdCBpbnRvIHRoZSBzZWNvbmQgaGFzaG1hcCB0aGF0IHNlbGZ0ZXN0IGFj
dHVhbGx5IGtlZXBzIHRyYWNrIG9mLgpDdXJyZW50bHkgaXQncyBvbmx5IHN0b3JlZCBpbiB0
aGUgaGFzaG1hcCwgbm90IGFjdHVhbGx5IGV4cG9ydGVkIGFzIGFuCmVudmlyb25tZW50IHZh
cmlhYmxlIChidXQgd2UgY291bGQgZWFzaWx5IGRvIHRoYXQgaWYgYSB0ZXN0LWNhc2UgbmVl
ZAp0aGlzIGluZm8pLgoKU2lnbmVkLW9mZi1ieTogVGltIEJlYWxlIDx0aW1iZWFsZUBjYXRh
bHlzdC5uZXQubno+Ci0tLQogc2VsZnRlc3QvdGFyZ2V0L1NhbWJhMy5wbSB8IDEgKwogc2Vs
ZnRlc3QvdGFyZ2V0L1NhbWJhNC5wbSB8IDMgKystCiAyIGZpbGVzIGNoYW5nZWQsIDMgaW5z
ZXJ0aW9ucygrKSwgMSBkZWxldGlvbigtKQoKZGlmZiAtLWdpdCBhL3NlbGZ0ZXN0L3Rhcmdl
dC9TYW1iYTMucG0gYi9zZWxmdGVzdC90YXJnZXQvU2FtYmEzLnBtCmluZGV4IDVlMjgyNTMu
Ljk4ODYzOTUgMTAwNzU1Ci0tLSBhL3NlbGZ0ZXN0L3RhcmdldC9TYW1iYTMucG0KKysrIGIv
c2VsZnRlc3QvdGFyZ2V0L1NhbWJhMy5wbQpAQCAtMjM4Nyw2ICsyMzg3LDcgQEAgZm9yY2Vf
dXNlcjp4OiRnaWRfZm9yY2VfdXNlcjoKIAkkcmV0e1NNQkRfVEVTVF9MT0d9ID0gIiRwcmVm
aXgvc21iZF90ZXN0LmxvZyI7CiAJJHJldHtTTUJEX1RFU1RfTE9HX1BPU30gPSAwOwogCSRy
ZXR7U0VSVkVSQ09ORkZJTEV9ID0gJGNvbmZmaWxlOworCSRyZXR7VEVTVEVOVl9ESVJ9ID0g
JHByZWZpeF9hYnM7CiAJJHJldHtDT05GSUdVUkFUSU9OfSA9Ii1zICRjb25mZmlsZSI7CiAJ
JHJldHtMT0NLX0RJUn0gPSAkbG9ja2RpcjsKIAkkcmV0e1NFUlZFUn0gPSAkc2VydmVyOwpk
aWZmIC0tZ2l0IGEvc2VsZnRlc3QvdGFyZ2V0L1NhbWJhNC5wbSBiL3NlbGZ0ZXN0L3Rhcmdl
dC9TYW1iYTQucG0KaW5kZXggNTZjYThiZC4uNjA5ZmY4MyAxMDA3NTUKLS0tIGEvc2VsZnRl
c3QvdGFyZ2V0L1NhbWJhNC5wbQorKysgYi9zZWxmdGVzdC90YXJnZXQvU2FtYmE0LnBtCkBA
IC0zNzYsOCArMzc2LDggQEAgc3ViIHNldHVwX2Ruc19odWJfaW50ZXJuYWwoJCQkKQogCSRl
bnYtPntTRVJWRVJfSVBWNn0gPSBTYW1iYTo6Z2V0X2lwdjZfYWRkcigkaG9zdG5hbWUpOwog
CSRlbnYtPntTT0NLRVRfV1JBUFBFUl9ERUZBVUxUX0lGQUNFfSA9IFNhbWJhOjpnZXRfaW50
ZXJmYWNlKCRob3N0bmFtZSk7CiAJJGVudi0+e0ROU19IVUJfTE9HfSA9ICIkcHJlZml4X2Fi
cy9kbnNfaHViLmxvZyI7Ci0KIAkkZW52LT57UkVTT0xWX0NPTkZ9ID0gIiRwcmVmaXhfYWJz
L3Jlc29sdi5jb25mIjsKKwkkZW52LT57VEVTVEVOVl9ESVJ9ID0gJHByZWZpeF9hYnM7CiAK
IAlvcGVuKFJFU09MVl9DT05GLCAiPiRlbnYtPntSRVNPTFZfQ09ORn0iKTsKIAlwcmludCBS
RVNPTFZfQ09ORiAibmFtZXNlcnZlciAkZW52LT57U0VSVkVSX0lQfVxuIjsKQEAgLTkxNiw2
ICs5MTYsNyBAQCBub2dyb3VwOng6NjU1MzQ6bm9ib2R5CiAJCVBSSVZBVEVESVIgPT4gJGN0
eC0+e3ByaXZhdGVkaXJ9LAogCQlCSU5ERE5TRElSID0+ICRjdHgtPntiaW5kZG5zZGlyfSwK
IAkJU0VSVkVSQ09ORkZJTEUgPT4gJGN0eC0+e3NtYl9jb25mfSwKKwkJVEVTVEVOVl9ESVIg
PT4gJGN0eC0+e3ByZWZpeF9hYnN9LAogCQlDT05GSUdVUkFUSU9OID0+ICRjb25maWd1cmF0
aW9uLAogCQlTT0NLRVRfV1JBUFBFUl9ERUZBVUxUX0lGQUNFID0+ICRjdHgtPntzd2lmYWNl
fSwKIAkJTlNTX1dSQVBQRVJfUEFTU1dEID0+ICRjdHgtPntuc3N3cmFwX3Bhc3N3ZH0sCi0t
IAoyLjcuNAoKCkZyb20gNThjMDFlODc5NDEwMjg4NTU2ODlkNWQ3MDQ5YmM0YTdmODJiZWQ0
NCBNb24gU2VwIDE3IDAwOjAwOjAwIDIwMDEKRnJvbTogVGltIEJlYWxlIDx0aW1iZWFsZUBj
YXRhbHlzdC5uZXQubno+CkRhdGU6IFRodSwgMjMgTWF5IDIwMTkgMTc6NDQ6MzcgKzEyMDAK
U3ViamVjdDogW1BBVENIIDQvOV0gc2VsZnRlc3Q6IEFkZCBsaW51eCBuYW1lc3BhY2Ugc3Vw
cG9ydCAoVVNFX05BTUVTUEFDRVM9MSkKClRoaXMgaG9va3MgdXAgdGhlIHNlbGZ0ZXN0L25z
Lyogc2NyaXB0cyBhZGRlZCBlYXJsaWVyIHdpdGggdGhlIHNlbGZ0ZXN0CnN5c3RlbSwgc28g
ZGV2ZWxvcGVycyBjYW4gb3B0aW9uYWxseSBydW4gYSB0ZXN0ZW52IG9yIHRlc3QgdXNpbmcg
bGludXgKbmFtZXNwYWNlcyBpbnN0ZWFkIG9mIHNvY2tldC13cmFwcGVyLgoKVGhlIGlkZWEg
aXMgdGhpcyBpcyBleHBlcmltZW50YWwgZnVuY3Rpb25hbGl0eSB0aGF0IHdlIGNhbiBleHRl
bmQKZnVydGhlciBpbiBmdXR1cmUsIGluIG9yZGVyIHRvIG1ha2UgdGVzdGluZyBTYW1iYSBt
b3JlIHZlcnNhdGlsZS4KCisgVGhlIHRvcC1sZXZlbCBXQUYgc2NyaXB0IG5vdyBkb2VzIGFu
ICd1bnNoYXJlJyB0byBjcmVhdGUgYSBuZXcKdG9wLWxldmVsICdzZWxmdGVzdCcgbmFtZXNw
YWNlIGluIHdoaWNoIHRvIGNyZWF0ZSB0aGUgdGVzdGVudihzKS4KKyBzZWxmdGVzdC5wbCBj
cmVhdGVzIGEgY29tbW9uICdzZWxmdGVzdDAnIGJyaWRnZSB0byBjb25uZWN0IHRvZ2V0aGVy
CnRoZSBpbmRpdmlkdWFsIERDcy4KKyBVcGRhdGUgU2FtYmEucG0gc28gaXQgY2FuIHVzZSBy
ZWFsIElQcyBpbnN0ZWFkIG9mIGxvb3BiYWNrIGFkZHJlc3Nlcy4KSW4gZm9ya19hbmRfZXhl
YygpLCB3ZSBhZGQgYSBjb3VwbGUgb2YgaG9va3Mgc28gdGhhdCB0aGUgYmluYXJ5IGdldHMK
c3RhcnRlZCBpbiBhIGRpZmZlcmVudCBuYW1lc3BhY2UgKHVzaW5nIHVuc2hhcmUvc3RhcnRf
aW5fbnMuc2gpLCBhbmQKdGhlIHBhcmVudCBwcm9jZXNzIGNvbm5lY3RzIHRoZSBuZXcgY2hp
bGQgbmFtZXNwYWNlIHVwIHRvIHRoZSBjb21tb24Kc2VsZnRlc3QwIGJyaWRnZSAodXNpbmcg
YWRkX2JyaWRnZV9pZmFjZS5zaCkuCgpTaWduZWQtb2ZmLWJ5OiBUaW0gQmVhbGUgPHRpbWJl
YWxlQGNhdGFseXN0Lm5ldC5uej4KLS0tCiBzZWxmdGVzdC9zZWxmdGVzdC5wbCAgICAgIHwg
IDEwICsrKysrCiBzZWxmdGVzdC90YXJnZXQvU2FtYmEucG0gIHwgMTA5ICsrKysrKysrKysr
KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLS0KIHNlbGZ0ZXN0L3RhcmdldC9T
YW1iYTQucG0gfCAgIDMgKysKIHNlbGZ0ZXN0L3dzY3JpcHQgICAgICAgICAgfCAgMTIgKysr
Ky0KIDQgZmlsZXMgY2hhbmdlZCwgMTMwIGluc2VydGlvbnMoKyksIDQgZGVsZXRpb25zKC0p
CgpkaWZmIC0tZ2l0IGEvc2VsZnRlc3Qvc2VsZnRlc3QucGwgYi9zZWxmdGVzdC9zZWxmdGVz
dC5wbAppbmRleCAxYmJlMmY4Li45ZTNkODE4IDEwMDc1NQotLS0gYS9zZWxmdGVzdC9zZWxm
dGVzdC5wbAorKysgYi9zZWxmdGVzdC9zZWxmdGVzdC5wbApAQCAtNDI0LDYgKzQyNCwxNiBA
QCBpZiAoJG9wdF9saWJ1aWRfd3JhcHBlcl9zb19wYXRoKSB7CiAJfQogfQogCitpZiAoZGVm
aW5lZCgkRU5We1VTRV9OQU1FU1BBQ0VTfSkpIHsKKwlwcmludCAiVXNpbmcgbGludXggY29u
dGFpbmVyaXphdGlvbiBmb3Igc2VsZnRlc3QgdGVzdGVudihzKS4uLlxuIjsKKworCSMgQ3Jl
YXRlIGEgY29tbW9uIGJyaWRnZSB0byBjb25uZWN0IHVwIHRoZSB0ZXN0ZW52IG5hbWVzcGFj
ZXMuIFdlIGdpdmUKKwkjIGl0IHRoZSBjbGllbnQncyBJUCBhZGRyZXNzLCBhcyB0aGlzIGlz
IHdoZXJlIHRoZSB0ZXN0cyB3aWxsIHJ1biBmcm9tCisJbXkgJGlwdjRfYWRkciA9IFNhbWJh
OjpnZXRfaXB2NF9hZGRyKCJjbGllbnQiKTsKKwlteSAkaXB2Nl9hZGRyID0gU2FtYmE6Omdl
dF9pcHY2X2FkZHIoImNsaWVudCIpOworCXN5c3RlbSAiJEVOVntTUkNESVJfQUJTfS9zZWxm
dGVzdC9ucy9jcmVhdGVfYnJpZGdlLnNoIHNlbGZ0ZXN0MCAkaXB2NF9hZGRyICRpcHY2X2Fk
ZHIiOworfQorCiAkRU5We0xEX1BSRUxPQUR9ID0gJGxkX3ByZWxvYWQ7CiBwcmludCAiTERf
UFJFTE9BRD0kRU5We0xEX1BSRUxPQUR9XG4iOwogCmRpZmYgLS1naXQgYS9zZWxmdGVzdC90
YXJnZXQvU2FtYmEucG0gYi9zZWxmdGVzdC90YXJnZXQvU2FtYmEucG0KaW5kZXggNmZkOGQw
MS4uY2EzMDk5YyAxMDA2NDQKLS0tIGEvc2VsZnRlc3QvdGFyZ2V0L1NhbWJhLnBtCisrKyBi
L3NlbGZ0ZXN0L3RhcmdldC9TYW1iYS5wbQpAQCAtNTE2LDcgKzUxNiwxMyBAQCBzdWIgZ2V0
X2lwdjRfYWRkcgogCQkkc3dpZmFjZSArPSAkaWZhY2VfbnVtOwogCX0KIAotCXJldHVybiAi
MTI3LjAuMC4kc3dpZmFjZSI7CisJaWYgKHVzZV9uYW1lc3BhY2VzKCkpIHsKKwkJIyB1c2Ug
cmVhbCBJUHMgaWYgc2VsZnRlc3QgaXMgcnVubmluZyBpbiBpdHMgb3duIG5ldHdvcmsgbmFt
ZXNwYWNlCisJCXJldHVybiAiMTAuMC4wLiRzd2lmYWNlIjsKKwl9IGVsc2UgeworCQkjIHVz
ZSBsb29wYmFjayBJUHMgd2l0aCBzb2NrZXQtd3JhcHBlcgorCQlyZXR1cm4gIjEyNy4wLjAu
JHN3aWZhY2UiOworCX0KIH0KIAogc3ViIGdldF9pcHY2X2FkZHIKQEAgLTU0MSw3ICs1NDcs
MTIgQEAgc3ViIGdldF9pbnRlcmZhY2VzX2NvbmZpZwogCX0KIAlmb3IgKG15ICRpID0gMDsg
JGkgPCAkbnVtX2lwczsgJGkrKykgewogCQlteSAkaXB2NF9hZGRyID0gU2FtYmE6OmdldF9p
cHY0X2FkZHIoJGhvc3RuYW1lLCAkaSk7Ci0JCSRpbnRlcmZhY2VzIC49ICIkaXB2NF9hZGRy
LzggIjsKKwkJaWYgKHVzZV9uYW1lc3BhY2VzKCkpIHsKKwkJCSMgdXNlIGEgLzI0IHN1Ym5l
dCB3aXRoIG5ldHdvcmsgbmFtZXNwYWNlcworCQkJJGludGVyZmFjZXMgLj0gIiRpcHY0X2Fk
ZHIvMjQgIjsKKwkJfSBlbHNlIHsKKwkJCSRpbnRlcmZhY2VzIC49ICIkaXB2NF9hZGRyLzgg
IjsKKwkJfQogCX0KIAogCW15ICRpcHY2X2FkZHIgPSBTYW1iYTo6Z2V0X2lwdjZfYWRkcigk
aG9zdG5hbWUpOwpAQCAtNjI3LDEwICs2MzgsMTMgQEAgc3ViIGZvcmtfYW5kX2V4ZWMKIAl1
bmxpbmsoJGRhZW1vbl9jdHgtPntMT0dfRklMRX0pOwogCXByaW50ICJTVEFSVElORyAkZGFl
bW9uX2N0eC0+e05BTUV9IGZvciAkRU5We0VOVk5BTUV9Li4uIjsKIAorCW15ICRwYXJlbnRf
cGlkID0gJCQ7CiAJbXkgJHBpZCA9IGZvcmsoKTsKIAogCSMgZXhlYyB0aGUgZGFlbW9uIGlu
IHRoZSBjaGlsZCBwcm9jZXNzCiAJaWYgKCRwaWQgPT0gMCkgeworCQlteSBAcHJlYXJncyA9
ICgpOworCiAJCSMgcmVkaXJlY3QgdGhlIGRhZW1vbidzIHN0ZG91dC9zdGRlcnIgdG8gYSBs
b2cgZmlsZQogCQlpZiAoZGVmaW5lZCgkZGFlbW9uX2N0eC0+e1RFRV9TVERPVVR9KSkgewog
CQkJIyBpbiBzb21lIGNhc2VzLCB3ZSB3YW50IG91dCBmcm9tIHNhbWJhIHRvIGdvIHRvIHRo
ZSBsb2cgZmlsZSwKQEAgLTY3MSwxMiArNjg1LDI3IEBAIHN1YiBmb3JrX2FuZF9leGVjCiAJ
CWNsb3NlKCRlbnZfdmFycy0+e1NURElOX1BJUEV9KTsKIAkJb3BlbiBTVERJTiwgIj4mIiwg
JFNURElOX1JFQURFUiBvciBkaWUgImNhbid0IGR1cCBTVERJTl9SRUFERVIgdG8gU1RESU46
ICQhIjsKIAorCQkjIGlmIHVzaW5nIGtlcm5lbCBuYW1lc3BhY2VzLCBwcmVwZW5kIHRoZSBj
b21tYW5kIHNvIHRoZSBwcm9jZXNzIHJ1bnMgaW4KKwkJIyBpdHMgb3duIG5hbWVzcGFjZQor
CQlpZiAoU2FtYmE6OnVzZV9uYW1lc3BhY2VzKCkpIHsKKwkJCUBwcmVhcmdzID0gbnNfZXhl
Y19wcmVhcmdzKCRwYXJlbnRfcGlkLCAkZW52X3ZhcnMpOworCQl9CisKIAkJIyB0aGUgY29t
bWFuZCBhcmdzIGFyZSBzdG9yZWQgYXMgYW4gYXJyYXkgcmVmZXJlbmNlIChiZWNhdXNlLi4u
UGVybCksCiAJCSMgc28gY29udmVydCB0aGUgcmVmZXJlbmNlIGJhY2sgdG8gYW4gYXJyYXkK
IAkJbXkgQGZ1bGxfY21kID0gQHsgJGRhZW1vbl9jdHgtPntGVUxMX0NNRH0gfTsKLQkJZXhl
YyhAZnVsbF9jbWQpIG9yIGRpZSgiVW5hYmxlIHRvIHN0YXJ0ICRFTlZ7TUFLRV9URVNUX0JJ
TkFSWX06ICQhIik7CisKKwkJZXhlYyhAcHJlYXJncywgQGZ1bGxfY21kKSBvciBkaWUoIlVu
YWJsZSB0byBzdGFydCAkRU5We01BS0VfVEVTVF9CSU5BUll9OiAkISIpOwogCX0KKwogCXBy
aW50ICJET05FICgkcGlkKVxuIjsKKworCSMgaWYgdXNpbmcga2VybmVsIG5hbWVzcGFjZXMs
IHdlIG5vdyBlc3RhYmxpc2ggYSBjb25uZWN0aW9uIGJldHdlZW4gdGhlCisJIyBtYWluIHNl
bGZ0ZXN0IG5hbWVzcGFjZSAoaS5lLiB0aGlzIHByb2Nlc3MpIGFuZCB0aGUgbmV3IGNoaWxk
IG5hbWVzcGFjZQorCWlmICh1c2VfbmFtZXNwYWNlcygpKSB7CisJCW5zX2NoaWxkX2Zvcmtl
ZCgkcGlkLCAkZW52X3ZhcnMpOworCX0KKwogCXJldHVybiAkcGlkOwogfQogCkBAIC03OTcs
NCArODI2LDc4IEBAIHN1YiBleHBvcnRfZW52dmFyc190b19maWxlCiAJY2xvc2UoRklMRSk7
CiB9CiAKKyMgUmV0dXJucyB0cnVlIGlmIGtlcm5lbCBuYW1lc3BhY2VzIGFyZSBiZWluZyB1
c2VkIGluc3RlYWQgb2Ygc29ja2V0LXdyYXBwZXIuCisjIFRoZSBkZWZhdWx0IGlzIGZhbHNl
Lgorc3ViIHVzZV9uYW1lc3BhY2VzCit7CisJcmV0dXJuIGRlZmluZWQoJEVOVntVU0VfTkFN
RVNQQUNFU30pOworfQorCisjIHJldHVybnMgYSBnaXZlbiB0ZXN0ZW52J3MgaW50ZXJmYWNl
LW5hbWUgKG9ubHkgd2hlbiBVU0VfTkFNRVNQQUNFUz0xKQorc3ViIG5zX2ludGVyZmFjZV9u
YW1lCit7CisJbXkgKCRob3N0bmFtZSkgPSBAXzsKKworCSMgd2hlbiB1c2luZyBuYW1lc3Bh
Y2VzLCBlYWNoIHRlc3RlbnYgaGFzIGl0cyBvd24gdmV0aFggaW50ZXJmYWNlLAorCSMgd2hl
cmUgWCA9IFNhbWJhOjpnZXRfaW50ZXJmYWNlKHRlc3RlbnZfbmFtZSkKKwlteSAkaWZhY2Ug
PSBnZXRfaW50ZXJmYWNlKCRob3N0bmFtZSk7CisJcmV0dXJuICJ2ZXRoJGlmYWNlIjsKK30K
KworIyBDYWxsZWQgYWZ0ZXIgYSBuZXcgY2hpbGQgbmFtZXNwYWNlIGhhcyBiZWVuIGZvcmtl
ZAorc3ViIG5zX2NoaWxkX2ZvcmtlZAoreworCW15ICgkY2hpbGRfcGlkLCAkZW52X3ZhcnMp
ID0gQF87CisKKwkjIHdlIG9ubHkgbmVlZCB0byBkbyB0aGlzIGZvciB0aGUgZmlyc3QgY2hp
bGQgZm9ya2VkIGZvciB0aGlzIHRlc3RlbnYKKwlpZiAoZGVmaW5lZCgkZW52X3ZhcnMtPntO
U19QSUR9KSkgeworCQlyZXR1cm47CisJfQorCisJIyBzdG9yZSB0aGUgY2hpbGQgUElELiBJ
dCdzIHRoZSBvbmx5IHdheSB0aGUgbWFpbiAoc2VsZnRlc3QpIG5hbWVzcGFjZSBjYW4KKwkj
IGFjY2VzcyB0aGUgbmV3IGNoaWxkICh0ZXN0ZW52KSBuYW1lc3BhY2UuCisJJGVudl92YXJz
LT57TlNfUElEfSA9ICRjaGlsZF9waWQ7CisKKwkjIEFkZCB0aGUgbmV3IGNoaWxkIG5hbWVz
cGFjZSdzIGludGVyZmFjZSB0byB0aGUgbWFpbiBzZWxmdGVzdCBicmlkZ2UuCisJIyBUaGlz
IGNvbm5lY3RzIHRvZ2V0aGVyIHRoZSB2YXJpb3VzIHRlc3RlbnZzIHNvIHRoYXQgc2VsZnRl
c3QgY2FuIHRhbGsgdG8KKwkjIHRoZW0gYWxsCisJbXkgJGlmYWNlID0gbnNfaW50ZXJmYWNl
X25hbWUoJGVudl92YXJzLT57TkVUQklPU05BTUV9KTsKKwlzeXN0ZW0gIiRFTlZ7U1JDRElS
fS9zZWxmdGVzdC9ucy9hZGRfYnJpZGdlX2lmYWNlLnNoICRpZmFjZS1iciBzZWxmdGVzdDAi
OworfQorCisjIHJldHVybnMgYXJncyB0byBwcmVwZW5kIHRvIGEgY29tbWFuZCBpbiBvcmRl
ciB0byBleGVjdXRlIGl0IHRoZSBjb3JyZWN0CisjIG5hbWVzcGFjZSBmb3IgdGhlIHRlc3Rl
bnYgKGNyZWF0aW5nIGEgbmV3IG5hbWVzcGFjZSBpZiBuZWVkZWQpLgorIyBUaGlzIHNob3Vs
ZCBvbmx5IHVzZWQgd2hlbiBVU0VfTkFNRVNQQUNFUz0xIGlzIHNldC4KK3N1YiBuc19leGVj
X3ByZWFyZ3MKK3sKKwlteSAoJHBhcmVudF9waWQsICRlbnZfdmFycykgPSBAXzsKKworCSMg
TlNfUElEIHN0b3JlcyB0aGUgcGlkIG9mIHRoZSBmaXJzdCBjaGlsZCBkYWVtb24gcnVuIGlu
IHRoaXMgbmFtZXNwYWNlCisJaWYgKGRlZmluZWQoJGVudl92YXJzLT57TlNfUElEfSkpIHsK
KworCQkjIHRoZSBuYW1lc3BhY2UgaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkIHByZXZpb3Vz
bHkuIFNvIHdlIHVzZSBuc2VudGVyCisJCSMgdG8gZXhlY3V0ZSB0aGUgY29tbWFuZCBpbiB0
aGUgZ2l2ZW4gdGVzdGVudidzIG5hbWVzcGFjZS4gV2UgbmVlZCB0bworCQkjIHVzZSB0aGUg
TlNfUElEIHRvIGlkZW50aWZ5IHRoaXMgcGFydGljdWxhciBuYW1lc3BhY2UKKwkJcmV0dXJu
ICgibnNlbnRlciIsICItdCIsICIkZW52X3ZhcnMtPntOU19QSUR9IiwgIi0tbmV0Iik7CisJ
fSBlbHNlIHsKKworCQkjIFdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IG5hbWVzcGFjZSBmb3Ig
dGhpcyBkYWVtb24gKGkuZS4gd2UncmUKKwkJIyBzZXR0aW5nIHVwIGEgbmV3IHRlc3RlbnYp
LiBGaXJzdCwgd3JpdGUgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyB0bworCQkjIGFuIGV4
cG9ydHMuc2ggZmlsZSBmb3IgdGhpcyB0ZXN0ZW52IChmb3IgY29udmVuaWVudCBhY2Nlc3Mg
YnkgdGhlCisJCSMgbmFtZXNwYWNlIHNjcmlwdHMpLgorCQlteSAkZXhwb3J0c19maWxlID0g
IiRlbnZfdmFycy0+e1RFU1RFTlZfRElSfS9leHBvcnRzLnNoIjsKKwkJZXhwb3J0X2VudnZh
cnNfdG9fZmlsZSgkZXhwb3J0c19maWxlLCAkZW52X3ZhcnMpOworCisJCSMgd2hlbiB1c2lu
ZyBuYW1lc3BhY2VzLCBlYWNoIHRlc3RlbnYgaGFzIGl0cyBvd24gdmV0aCBpbnRlcmZhY2UK
KwkJbXkgJGludGVyZmFjZSA9IG5zX2ludGVyZmFjZV9uYW1lKCRlbnZfdmFycy0+e05FVEJJ
T1NOQU1FfSk7CisKKwkJIyB3ZSB1c2UgdW5zaGFyZSB0byBjcmVhdGUgYSBuZXcgbmV0d29y
ayBuYW1lc3BhY2UuIFRoZSBzdGFydF9pbl9ucy5zaAorCQkjIGhlbHBlciBzY3JpcHQgZ2V0
cyBydW4gZmlyc3QgdG8gc2V0dXAgdGhlIG5ldyBuYW1lc3BhY2UncyBpbnRlcmZhY2VzLgor
CQkjIChUaGlzIGFsbCBnZXRzIHByZXBlbmRlZCBhcm91bmQgdGhlIGFjdHVhbCBjb21tYW5k
IHRvIHJ1biBpbiB0aGUgbmV3CisJCSMgbmFtZXNwYWNlKQorCQlyZXR1cm4gKCJ1bnNoYXJl
IiwgIi0tbmV0IiwgIiRFTlZ7U1JDRElSfS9zZWxmdGVzdC9ucy9zdGFydF9pbl9ucy5zaCIs
CisJCQkJJGludGVyZmFjZSwgJGV4cG9ydHNfZmlsZSwgJHBhcmVudF9waWQpOworCX0KK30K
KwogMTsKZGlmZiAtLWdpdCBhL3NlbGZ0ZXN0L3RhcmdldC9TYW1iYTQucG0gYi9zZWxmdGVz
dC90YXJnZXQvU2FtYmE0LnBtCmluZGV4IDYwOWZmODMuLmIxYzZhYTQgMTAwNzU1Ci0tLSBh
L3NlbGZ0ZXN0L3RhcmdldC9TYW1iYTQucG0KKysrIGIvc2VsZnRlc3QvdGFyZ2V0L1NhbWJh
NC5wbQpAQCAtNDY4LDYgKzQ2OCw5IEBAIHN1YiBnZXRfY21kX2Vudl92YXJzCiAJcmV0dXJu
ICRjbWRfZW52OwogfQogCisjIFNldHMgdXAgYSBmb3Jlc3QgdHJ1c3QgbmFtZXNwYWNlLgor
IyAoTm90ZSB0aGlzIGlzIGRpZmZlcmVudCB0byBrZXJuZWwgbmFtZXNwYWNlcywgc2V0dXAg
YnkgdGhlCisjIFVTRV9OQU1FU1BBQ0VTPTEgb3B0aW9uKQogc3ViIHNldHVwX25hbWVzcGFj
ZXMoJCQ6JCQpCiB7CiAJbXkgKCRzZWxmLCAkbG9jYWxlbnYsICR1cG5fYXJyYXksICRzcG5f
YXJyYXkpID0gQF87CmRpZmYgLS1naXQgYS9zZWxmdGVzdC93c2NyaXB0IGIvc2VsZnRlc3Qv
d3NjcmlwdAppbmRleCA1Yzg2NGViLi5mMjA0ZjM0IDEwMDY0NAotLS0gYS9zZWxmdGVzdC93
c2NyaXB0CisrKyBiL3NlbGZ0ZXN0L3dzY3JpcHQKQEAgLTI0Niw5ICsyNDYsMTIgQEAgZGVm
IGNtZF90ZXN0b25seShvcHQpOgogCiAgICAgZW52Lk9QVElPTlMgKz0gIiAtLW5zc193cmFw
cGVyX3NvX3BhdGg9IiArIENPTkZJR19HRVQob3B0LCAnTElCTlNTX1dSQVBQRVJfU09fUEFU
SCcpCiAgICAgZW52Lk9QVElPTlMgKz0gIiAtLXJlc29sdl93cmFwcGVyX3NvX3BhdGg9IiAr
IENPTkZJR19HRVQob3B0LCAnTElCUkVTT0xWX1dSQVBQRVJfU09fUEFUSCcpCi0gICAgZW52
Lk9QVElPTlMgKz0gIiAtLXNvY2tldF93cmFwcGVyX3NvX3BhdGg9IiArIENPTkZJR19HRVQo
b3B0LCAnTElCU09DS0VUX1dSQVBQRVJfU09fUEFUSCcpCiAgICAgZW52Lk9QVElPTlMgKz0g
IiAtLXVpZF93cmFwcGVyX3NvX3BhdGg9IiArIENPTkZJR19HRVQob3B0LCAnTElCVUlEX1dS
QVBQRVJfU09fUEFUSCcpCiAKKyAgICAjIHNlbGZ0ZXN0IGNhbiBvcHRpb25hbGx5IHVzZSBr
ZXJuZWwgbmFtZXNwYWNlcyBpbnN0ZWFkIG9mIHNvY2tldC13cmFwcGVyCisgICAgaWYgb3Mu
ZW52aXJvbi5nZXQoJ1VTRV9OQU1FU1BBQ0VTJykgaXMgTm9uZToKKyAgICAgICAgZW52Lk9Q
VElPTlMgKz0gIiAtLXNvY2tldF93cmFwcGVyX3NvX3BhdGg9IiArIENPTkZJR19HRVQob3B0
LCAnTElCU09DS0VUX1dSQVBQRVJfU09fUEFUSCcpCisKICAgICAjaWYgdW52ZXJzaW9uZWRf
c3lzX3BsYXRmb3JtIGluICgnZnJlZWJzZCcsICduZXRic2QnLCAnb3BlbmJzZCcsICdzdW5v
cycpOgogICAgICMgICAgZW52Lk9QVElPTlMgKz0gIiAtLXVzZS1kbnMtZmFraW5nIgogCkBA
IC0yNzcsNiArMjgwLDEzIEBAIGRlZiBjbWRfdGVzdG9ubHkob3B0KToKICAgICAjIFdlIHVz
ZSB0aGUgZnVsbCBwYXRoIHJhdGhlciB0aGFuIHJlbGF0aXZlIHBhdGggdG8gYXZvaWQgcHJv
YmxlbXMgb24gc29tZSBwbGF0Zm9ybXMgKGllLiBzb2xhcmlzIDgpLgogICAgIGVudi5DT1JF
X0NPTU1BTkQgPSAnJHtQRVJMfSAke3NyY2Rpcn0vc2VsZnRlc3Qvc2VsZnRlc3QucGwgLS10
YXJnZXQ9JHtTRUxGVEVTVF9UQVJHRVR9IC0tcHJlZml4PSR7U0VMRlRFU1RfUFJFRklYfSAt
LXNyY2Rpcj0ke3NyY2Rpcn0gLS1leGNsdWRlPSR7c3JjZGlyfS9zZWxmdGVzdC9za2lwICR7
VEVTVExJU1RTfSAke09QVElPTlN9ICR7VEVTVFN9JwogCisgICAgIyBJZiB1c2luZyBuYW1l
c3BhY2VzIChyYXRoZXIgdGhhbiBzb2NrZXQtd3JhcHBlciksIHJ1biB0aGUgc2VsZnRlc3Qg
c2NyaXB0CisgICAgIyBpbiBpdHMgb3duIG5ldHdvcmsgbmFtZXNwYWNlIChieSBkb2luZyBh
biAndW5zaGFyZScpLiAoVG8gY3JlYXRlIGEgbmV3CisgICAgIyBuYW1lc3BhY2UgYXMgYSBu
b24tcm9vdCB1c2VyLCB3ZSBoYXZlIHRvIGFsc28gdW5zaGFyZSB0aGUgY3VycmVudCB1c2Vy
CisgICAgIyBuYW1lc3BhY2UsIGFuZCByZW1hcCBvdXJzZWxmIGFzIHJvb3QgaW4gdGhlIG5h
bWVzcGFjZSBjcmVhdGVkKQorICAgIGlmIG9zLmVudmlyb24uZ2V0KCdVU0VfTkFNRVNQQUNF
UycpIGlzIG5vdCBOb25lOgorICAgICAgICBlbnYuQ09SRV9DT01NQU5EID0gJ3Vuc2hhcmUg
LS1uZXQgLS11c2VyIC0tbWFwLXJvb3QtdXNlciAnICsgZW52LkNPUkVfQ09NTUFORAorCiAg
ICAgaWYgZW52LkFERFJFU1NfU0FOSVRJWkVSOgogICAgICAgICAjIEZvciBub3cgd2UgY2Fu
bm90IHJ1biB3aXRoIGxlYWsgZGV0ZWN0aW9uCiAgICAgICAgIG5vX2xlYWtfY2hlY2sgPSAi
QVNBTl9PUFRJT05TPWRldGVjdF9sZWFrcz0wIgotLSAKMi43LjQKCgpGcm9tIDllOGYwMTUz
MDE3ZDg1Yjg4MTU5MTRkNzljYzIzMmQyYTA0YTk1ZGQgTW9uIFNlcCAxNyAwMDowMDowMCAy
MDAxCkZyb206IFRpbSBCZWFsZSA8dGltYmVhbGVAY2F0YWx5c3QubmV0Lm56PgpEYXRlOiBU
aHUsIDI4IE1hciAyMDE5IDE3OjQwOjQ2ICsxMzAwClN1YmplY3Q6IFtQQVRDSCA1LzldIHNl
bGZ0ZXN0OiBBZGQgaGVscGVyIHNjcmlwdHMgZm9yIGFjY2Vzc2luZyB0aGUgdGVzdGVudgog
bmFtZXNwYWNlCgpUaGlzIHBhdGNoIGFkZHMgc29tZSBoZWxwZXIgc2NyaXB0cyB0aGF0IG1h
a2UgdGFsa2luZyB0byBhIGdpdmVuCnRlc3RlbnYncyBuYW1lc3BhY2Ugc2xpZ2h0bHkgZWFz
aWVyLgoKT25lIG9mIHRoZSByZWFsbHkgY29vbCB0aGluZ3MgYWJvdXQgbmFtZXNwYWNlcyBp
cyB5b3UgY2FuIHJ1biBtdWx0aXBsZQpkaWZmZXJlbnQgcHJvZ3JhbXMgdGhhdCBjYW4gYWxs
IHRhbGsgdG8gdGhlIHRlc3RlbnYgREMuIEhvd2V2ZXIsIHRoZQpjb21tYW5kIHRvIGRvIHRo
aXMgaXMgYSBiaXQgdW53ZWlsZGx5LCBpdCdzIGJhc2VkIG9uIFBJRCBzbyBpdCBjaGFuZ2Vz
CmV2ZXJ5dGltZSB5b3Ugc3RhcnQgdXAgYSB0ZXN0ZW52LCBhbmQgeW91IGxvb3NlIGFsbCB0
aGUgZW52aXJvbm1lbnQKdmFyaWFibGVzIHRoYXQgc2VsZnRlc3Qgbm9ybWFsbHkgc2V0cyB1
cC4KClRoaXMgcGF0Y2ggYWRkcyBhIGNvdXBsZSBvZiBoZWxwZXIgc2NyaXB0czoKLSBuc2Vu
dGVyLWhlbHBlci5zaDogdGhpcyB0YWtlcyB0aGUgdmFyaWFibGVzIGRlZmluZWQgaW4gYW4g
ZXhwb3J0c19maWxlCiAgYW5kIGV4cG9ydHMgdGhlbSBhbGwuIEl0IHByaW50cyBzb21lIGJh
c2ljIGhlbHAgYW5kIHRoZW4gc3RhcnRzIGEgbmV3CiAgc2hlbGwgc2Vzc2lvbiAodGhpcyB3
aG9sZSBzY3JpcHQgZ2V0cyBydW4gaW4gdGhlIG5ldyBuYW1lc3BhY2UpLgogIEVzc2VudGlh
bGx5IHRoaXMgYWNoaWV2ZXMgc29tZXRoaW5nIHNpbWlsYXIgdG8gdGhlIGxlZ2FjeQogIHNl
bGZ0ZXN0LXZhcnMuc2ggc2NyaXB0IChleGNlcHQgdGhpcyBvbmUgYWN0dWFsbHkgd29ya3Mp
LgotIG1rX25zZW50ZXIuc2g6IHRoaXMgZ2VuZXJhdGVzIGEgc2ltcGxlIHdyYXBwZXIgc2Ny
aXB0IHRoYXQnbGwgcnVuCiAgbnNlbnRlciBhbmQgdGhlbiBjYWxsIG5zZW50ZXItaGVscGVy
LnNoLiBBIHNlcGFyYXRlIHdyYXBwZXIgc2NyaXB0CiAgZ2V0cyBjcmVhdGVkIGZvciBlYWNo
IHRlc3RlbnYuIEUuZy4gdG8gcnVuIGl0LCBqdXN0IGdvOgogICAgLi9zdC9hZF9kYy9uc2Vu
dGVyLnNoCgogIFRoaXMgaXMgYSB3cmFwcGVyIGZvciBhIG1vcmUgY29tcGxpY2F0ZWQgY29t
bWFuZCB1bmRlcm5lYXRoIGxpa2U6CiAgICBuc2VudGVyIC10IDQzNzM1MyAtLW5ldCAtLXVz
ZXIgLS1wcmVzZXJ2ZS1jcmVkZW50aWFscyBcCiAgICAgIC9ob21lL3RpbWJlYWxlL2NvZGUv
c2FtYmEvc2VsZnRlc3QvbnMvbnNlbnRlci1oZWxwZXIuc2ggXAogICAgICAvaG9tZS90aW1i
ZWFsZS9jb2RlL3NhbWJhL3N0L2FkX2RjL2V4cG9ydHMuc2gKClNpZ25lZC1vZmYtYnk6IFRp
bSBCZWFsZSA8dGltYmVhbGVAY2F0YWx5c3QubmV0Lm56PgotLS0KIHNlbGZ0ZXN0L25zL21r
X25zZW50ZXIuc2ggICAgIHwgMzIgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysK
IHNlbGZ0ZXN0L25zL25zZW50ZXItaGVscGVyLnNoIHwgMzEgKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKwogc2VsZnRlc3QvbnMvc3RhcnRfaW5fbnMuc2ggICAgfCAxMSArKysr
KysrKy0tLQogMyBmaWxlcyBjaGFuZ2VkLCA3MSBpbnNlcnRpb25zKCspLCAzIGRlbGV0aW9u
cygtKQogY3JlYXRlIG1vZGUgMTAwNzU1IHNlbGZ0ZXN0L25zL21rX25zZW50ZXIuc2gKIGNy
ZWF0ZSBtb2RlIDEwMDc1NSBzZWxmdGVzdC9ucy9uc2VudGVyLWhlbHBlci5zaAoKZGlmZiAt
LWdpdCBhL3NlbGZ0ZXN0L25zL21rX25zZW50ZXIuc2ggYi9zZWxmdGVzdC9ucy9ta19uc2Vu
dGVyLnNoCm5ldyBmaWxlIG1vZGUgMTAwNzU1CmluZGV4IDAwMDAwMDAuLmYxNzVkNmIKLS0t
IC9kZXYvbnVsbAorKysgYi9zZWxmdGVzdC9ucy9ta19uc2VudGVyLnNoCkBAIC0wLDAgKzEs
MzIgQEAKKyMhL2Jpbi9zaAorIworIyBIZWxwZXIgc2NyaXB0LiBJZiB5b3Ugd2FudCBhIDJu
ZCBzaGVsbCB0aGF0IGNvbW11bmljYXRlcyB3aXRoIHRoZSB0ZXN0ZW52IERDCisjIHlvdSBj
YW4gdXNlIHRoZSBuc2VudGVyIGNvbW1hbmQgdG8gY2hhbmdlIHRoZSBuYW1lc3BhY2UgeW91
J3JlIGluLiBIb3dldmVyLAorIyB0aGlzIGNvbW1hbmQgaXMgYSBiaXQgdW53aWVsZGx5IGFu
ZCBjaGFuZ2VzIGRlcGVuZGluZyBvbiB0aGUgdGVzdGVudiBQSUQuCisjIFdlIGNhbiBnZW5l
cmF0ZSBhIGhlbHBlciBzY3JpcHQgb24gdGhlIGZseSB0aGF0IGFic3RyYWN0cyBhbGwgdGhp
cworIyBjb21wbGV4aXR5LCBhbGxvd2luZyB5b3UgdG8gdXNlIHRoZSBzYW1lLCBzaW1wbGUg
Y29tbWFuZCB0byBjaGFuZ2UgdGhlCisjIG5hbWVzcGFjZSB0aGF0IHlvdSdyZSBpbiwgZS5n
LgorIyAgIHN0L2FkX2RjL25zZW50ZXIuc2gKKworcGlkPSQxCitleHBvcnRzX2ZpbGU9JDIK
KworIyBUaGUgYmFzaWMgY29tbWFuZCB0byBlbnRlciB0aGUgdGVzdGVudidzIG5ldHdvcmsg
bmFtZXNwYWNlLgorIyBXZSBlbnRlciB0aGUgdXNlciBuYW1lc3BhY2UgYXMgd2VsbCAoYXMg
b3Vyc2VsZiwgd2hpY2ggaXMgcmVhbGx5IHRoZSByb290CisjIHVzZXIgZm9yIHRoZSBuYW1l
c3BhY2UpLCBvdGhlcndpc2Ugd2UgbmVlZCBzdWRvIHRvIG1ha2UgdGhpcyB3b3JrLgorbnNl
bnRlcl9jbWQ9Im5zZW50ZXIgLXQgJHBpZCAtLW5ldCAtLXVzZXIgLS1wcmVzZXJ2ZS1jcmVk
ZW50aWFscyIKKworIyBCeSBkZWZhdWx0LCB0aGUgbnNlbnRlciBjb21tYW5kIHdpbGwganVz
dCBzdGFydCBhIG5ldyBzaGVsbCBpbiB0aGUgbmFtZXNwYWNlLgorIyB3ZSB1c2UgYSB3cmFw
cGVyIGhlbHBlciBzY3JpcHQsIHdoaWNoIGZpcnN0IGxvYWRzIGFsbCB0aGUgZW52aXJvbm1l
bnQKKyMgdmFyaWFibGVzIHRoYXQgYXJlIHVzdWFsbHkgZGVmaW5lZCBpbiBzZWxmdGVzdCAo
YW5kIHByaW50cyBzb21lIGJhc2ljIGhlbHApLgoraGVscGVyX3NjcmlwdD0iJChkaXJuYW1l
ICQwKS9uc2VudGVyLWhlbHBlci5zaCAkZXhwb3J0c19maWxlIgorCisjIGdlbmVyYXRlIHRo
ZSBkeW5hbWljIHNjcmlwdAorZHluX3NjcmlwdD0iJChkaXJuYW1lICQyKS9uc2VudGVyLnNo
IgorZWNobyAiIyEvYmluL3NoIiA+ICRkeW5fc2NyaXB0CitlY2hvICIkbnNlbnRlcl9jbWQg
JGhlbHBlcl9zY3JpcHQiID4+ICRkeW5fc2NyaXB0CitjaG1vZCA3NTUgJGR5bl9zY3JpcHQK
KworIyByZXR1cm4gdGhlIHNjcmlwdCB3ZSBjcmVhdGVkCitlY2hvICIkZHluX3NjcmlwdCIK
KwpkaWZmIC0tZ2l0IGEvc2VsZnRlc3QvbnMvbnNlbnRlci1oZWxwZXIuc2ggYi9zZWxmdGVz
dC9ucy9uc2VudGVyLWhlbHBlci5zaApuZXcgZmlsZSBtb2RlIDEwMDc1NQppbmRleCAwMDAw
MDAwLi5mMzk2ZWQ0Ci0tLSAvZGV2L251bGwKKysrIGIvc2VsZnRlc3QvbnMvbnNlbnRlci1o
ZWxwZXIuc2gKQEAgLTAsMCArMSwzMSBAQAorIyEvYmluL3NoCisjCisjIEhlbHBlciBzY3Jp
cHQgdGhhdCBnZXRzIHJ1biB3aXRoIG5zZW50ZXIgdG8gbWFudWFsbHkgc2V0dXAgYSBzZWNv
bmRhcnkgc2hlbGwKKyMgc2Vzc2lvbiB0byBhIGdpdmVuIG5hbWVzcGFjZSB0ZXN0ZW52LiBU
aGlzIGJhc2ljYWxseSBqdXN0IHNldHMgdXAgdGhlIHNhbWUKKyMgZW52aXJvbm1lbnQgdmFy
aWFibGVzIGFzIHlvdSBub3JtYWxseSBnZXQgd2l0aCBzZWxmdGVzdCwgZm9yIGNvbnZlbmll
bmNlLgorCitpZiBbICQjIC1sdCAxIF0gOyB0aGVuCisgICAgZWNobyAiVXNhZ2U6ICQwIDxl
eHBvcnRzLWZpbGU+IgorICAgIGV4aXQgMQorZmkKKworIyB3ZSBnZXQgcGFzc2VkIGEgZXhw
b3J0cyBmaWxlIHdpdGggYWxsIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZGVmaW5lZAor
ZXhwb3J0c19maWxlPSQxCisKKyMgcmVhZCB0aGUgZXhwb3J0cyBmaWxlIHNvIHRoZSBuZXcg
c2hlbGwgaGFzIGFwcHJvcHJpYXRlIHZhcmlhYmxlcyBzZXR1cAorIyAod2UgZXhwb3J0IHJh
dGhlciB0aGFuIHNvdXJjaW5nIGhlcmUgc28gdGhleSBnZXQgaW5oZXJpdGVkIGJ5IHRoZSBz
dWJzaGVsbCkKK3doaWxlIHJlYWQgLXIgbGluZSA7IGRvCisgICAgZXhwb3J0ICRsaW5lCisg
ICAgIyBkdW1wIHRoZW0gZm9yIHRoZSB1c2VyIHRvbworICAgIGVjaG8gJGxpbmUKK2RvbmUg
PCAkZXhwb3J0c19maWxlCisKK2VjaG8gIiIKK2VjaG8gIkVudGVyZWQgJE5FVEJJT1NOQU1F
IG5hbWVzcGFjZSwgd2l0aCBhYm92ZSB2YXJpYWJsZXMgZGVmaW5lZC4iCitlY2hvICJVc2Ug
Q1RSTCtEIG9yIGV4aXQgdG8gbGVhdmUgdGhlIG5hbWVzcGFjZS4iCitlY2hvICIiCisKKyMg
c3RhcnQgYSBzaGVsbCBzZXNzaW9uIGluIHRoZSBuZXcgbmFtZXNwYWNlCiskU0hFTEwKKwor
CmRpZmYgLS1naXQgYS9zZWxmdGVzdC9ucy9zdGFydF9pbl9ucy5zaCBiL3NlbGZ0ZXN0L25z
L3N0YXJ0X2luX25zLnNoCmluZGV4IDU4MzFhMGIuLmYxNjc2N2QgMTAwNzU1Ci0tLSBhL3Nl
bGZ0ZXN0L25zL3N0YXJ0X2luX25zLnNoCisrKyBiL3NlbGZ0ZXN0L25zL3N0YXJ0X2luX25z
LnNoCkBAIC0xNyw5ICsxNywxNCBAQCBwYXJlbnRfcGlkPSQzCiAjIFRoZSBuYW1lc3BhY2Vz
IHdlIHVzZSBhcmUgYW5vbnltb3VzLCB3aGljaCBtZWFucyBvdGhlciBwcm9jZXNzZXMgd291
bGQgbmVlZAogIyB0byB1c2Ugb3VyIFBJRCB0byBhY2Nlc3MgdGhlIG5ldyBuYW1lc3BhY2UK
IGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0iCi1lY2hvICJDcmVhdGVkIG5hbWVzcGFjZSBmb3IgJE5FVEJJT1NO
QU1FIgotZWNobyAiVG8gY29tbXVuaWNhdGUgd2l0aCB0aGlzIHRlc3RlbnYsIHVzZTogbnNl
bnRlciAtdCAkJCAtLW5ldCBzaCIKLWVjaG8gIlRvIGNvcHkgaXRzIGVudmlyb25tZW50IHZh
cmlhYmxlcywgdXNlOiAuICRleHBvcnRzX2ZpbGUiCitlY2hvICJDcmVhdGVkIG5hbWVzcGFj
ZSBmb3IgJE5FVEJJT1NOQU1FICgkRU5WTkFNRSkgUElEICQkIgorCisjIGdlbmVyYXRlIGEg
aGVscGVyIHNjcmlwdCBpZiB0aGUgZGV2ZWxvcGVyIHdhbnRzIHRvIHRhbGsgdG8gdGhpcyBu
YW1lc3BhY2UKKyMgaW4gYW5vdGhlciBzaGVsbAorbWtfbnNlbnRlcl9zY3JpcHQ9IiQoZGly
bmFtZSAkMCkvbWtfbnNlbnRlci5zaCIKK2hlbHBlcl9zY3JpcHQ9JCgkbWtfbnNlbnRlcl9z
Y3JpcHQgJCQgJGV4cG9ydHNfZmlsZSkKKworZWNobyAiVG8gY29tbXVuaWNhdGUgd2l0aCB0
aGlzIHRlc3RlbnYsIHVzZTogJGhlbHBlcl9zY3JpcHQiCiBlY2hvICItLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIgogCiAj
IHRoZSByZXN0IG9mIHRoZSBhcmdzIGFyZSB0aGUgc2FtYmEgY29tbWFuZCB0byBydW4KLS0g
CjIuNy40CgoKRnJvbSA0NWJlNjQ3MWM0ODM3MWQwY2Y3NTAwMmUwNTU3ZDY3ZTY2MDg1OTU3
IE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBUaW0gQmVhbGUgPHRpbWJlYWxlQGNh
dGFseXN0Lm5ldC5uej4KRGF0ZTogRnJpLCAzMSBNYXkgMjAxOSAxMToyMzo0OSArMTIwMApT
dWJqZWN0OiBbUEFUQ0ggNi85XSBzZWxmdGVzdDogQWRkIG1vcmUgbm90ZXMgb24gdXNpbmcg
c2VsZnRlc3Qgd2l0aAogbmFtZXNwYWNlcwoKSW4gcGFydGljdWxhciwgZG9jdW1lbnQgaG93
IHRvIGhvb2sgdXAgYSB0ZXN0ZW52IHRvIGEgV2luZG93cyBWTQooaWRlYWxseSB0aGVyZSBz
aG91bGQgYmUgYSBoZWxwZXIgc2NyaXB0IHRvIGRvIHRoaXMsIGJ1dCBpbiB0aGUKbWVhbnRp
bWUgc29tZSBpbnN0cnVjdGlvbnMgYXJlIGJldHRlciB0aGFuIG5vdGhpbmcpLgoKU2lnbmVk
LW9mZi1ieTogVGltIEJlYWxlIDx0aW1iZWFsZUBjYXRhbHlzdC5uZXQubno+Ci0tLQogc2Vs
ZnRlc3QvbnMvUkVBRE1FIHwgOTcgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrKysrKysrCiAxIGZpbGUgY2hhbmdlZCwgOTcgaW5zZXJ0aW9ucygr
KQoKZGlmZiAtLWdpdCBhL3NlbGZ0ZXN0L25zL1JFQURNRSBiL3NlbGZ0ZXN0L25zL1JFQURN
RQppbmRleCBlOWU5ZDA2Li5hOGFkMWMwIDEwMDY0NAotLS0gYS9zZWxmdGVzdC9ucy9SRUFE
TUUKKysrIGIvc2VsZnRlc3QvbnMvUkVBRE1FCkBAIC02MywzICs2MywxMDAgQEAgVGhlIHZl
dGggaW50ZXJmYWNlcyBhcmUgbmFtZWQgdmV0aFggYW5kIHZldGhYLWJyLCB3aGVyZSBYIGlz
IHRoZQogU09DS0VUX1dSQVBQRVJfREVGQVVMVF9JRkFDRSBmb3IgdGhlIHRlc3RlbnYuIFRo
ZSB2ZXRoWC1iciBpbnRlcmZhY2UgaXMgYWx3YXlzCiBhZGRlZCB0byB0aGUgc2VsZnRlc3Qw
IGJyaWRnZSBpbnRlcmZhY2UuIAogCitIb3cgZG8gSSB1c2UgaXQ/Cis9PT09PT09PT09PT09
PT09CitUbyB1c2UgbmFtZXNwYWNlcyBpbnN0ZWFkIG9mIHNvY2tldC13cmFwcGVyLCBqdXN0
IGFkZCAnVVNFX05BTUVTUEFDRVM9MScgdG8gdGhlCittYWtlIGNvbW1hbmQsIGUuZy4KKwor
VG8gcnVuIHRoZSAncXVpY2snIHRlc3QgY2FzZXMgdXNpbmcgbmFtZXNwYWNlczoKK1VTRV9O
QU1FU1BBQ0VTPTEgbWFrZSB0ZXN0IFRFU1RTPXF1aWNrCisKK1RvIHNldHVwIGFuIGFkX2Rj
IHRlc3RlbnYgdXNpbmcgbmFtZXNwYWNlczoKK1VTRV9OQU1FU1BBQ0VTPTEgU0VMRlRFU1Rf
VEVTVEVOVj1hZF9kYyBtYWtlIHRlc3RlbnYKKworWW91IGNhbiBjb25uZWN0IHNlY29uZGFy
eSBzaGVsbHMgdG8gdGhlIG5hbWVzcGFjZSB5b3VyIHRlc3RlbnYgaXMgcnVubmluZyBpbi4K
K1RoZSBjb21tYW5kIHRvIGRvIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQsIHNvIGEg
aGVscGVyICduc2VudGVyLnNoJyBzY3JpcHQKK2dldHMgYXV0b2dlbmVyYXRlZCB3aGVuIHRo
ZSB0ZXN0ZW52IGlzIGNyZWF0ZWQuIEUuZy4gdG8gY29ubmVjdCB0byB0aGUgdGVzdGVudgor
dGhhdCB0aGUgYWRfZGMgaXMgcnVubmluZyBpbiwgdXNlOgorLi9zdC9hZF9kYy9uc2VudGVy
LnNoCisKK1RoaXMgc2NyaXB0IGFsc28gc2V0cyB1cCB0aGUgc2hlbGwgd2l0aCBhbGwgdGhl
IHNhbWUgJFNFUlZFUi8kVVNFUk5BTUUvZXRjCit2YXJpYWJsZXMgdGhhdCB5b3Ugbm9ybWFs
bHkgZ2V0IGluIHh0ZXJtLgorCitUbyBydW4gdGhlIGFkLWRjLWJhY2t1cCBhdXRvYnVpbGQg
am9iIHVzaW5nIG5hbWVzcGFjZXM6CitVU0VfTkFNRVNQQUNFUz0xIHNjcmlwdC9hdXRvYnVp
bGQucHkgc2FtYmEtYWQtZGMtYmFja3VwIC0tdmVyYm9zZSAtLW5vY2xlYW51cCBcCisgLS1r
ZWVwbG9ncyAtLXRhaWwgLS10ZXN0YmFzZSAvdG1wL3NhbWJhLXRlc3RiYXNlCisKK1VzaW5n
IHRoZSBjdXN0b21kYyB0ZXN0ZW52LCB5b3UgY2FuIGJhc2ljYWxseSBub3cgZXNzZW50aWFs
bHkgeW91ciBvd24KK2xpZ2h0LXdlaWdodCBzYW1iYSBWTS4gRS5nLgorTVlfQkFDS1VQPS9o
b21lLyRVU0VSL3NhbWJhLWJhY2t1cC1wcm9kLWRvbWFpbi50YXIuYnoyCitVU0VfTkFNRVNQ
QUNFUz0xIEJBQ0tVUF9GSUxFPSRNWV9CQUNLVVAgU0VMRlRFU1RfVEVTVEVOVj1jdXN0b21k
YyBtYWtlIHRlc3RlbnYKKworWW91IGNhbiB0aGVuIHRhbGsgdG8gdGhhdCBEQyBpbiBhbnkg
b3RoZXIgc2hlbGwgYnkgdXNpbmcKKy4vc3QvY3VzdG9tZGMvbnNlbnRlci5zaCB3aGljaCBl
bnRlcnMgdGhlIERDJ3MgbmV0d29yayBuYW1lc3BhY2UgKHdpdGgKK2FsbCB0aGUgJFNFUlZF
Ui9ldGMgZW52IHZhcmlhYmxlcyBkZWZpbmVkKS4KKworSG93IHRvIGpvaW4gVk1zIHRvIHRo
ZSB0ZXN0ZW52CistLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCitJ
IGhhdmVuJ3QgdHJpZWQgdGhpcyAoYmV5b25kIGJhc2ljIElQIGNvbm5lY3Rpdml0eSksIGJ1
dCB1c2luZyBuYW1lc3BhY2VzIGl0CitzaG91bGQgbm93IGJlIHBvc3NpYmxlIHRvIGNvbm5l
Y3QgYSBXaW5kb3dzIFZNIHRvIGEgU2FtYmEgdGVzdGVudi4KKworMS4gV29yayBvdXQgdGhl
IG1haW4gc2VsZnRlc3QucGwgbmFtZXNwYWNlIFBJRCBtYW51YWxseSwgZS5nLgorU0VMRlRF
U1RfUElEPSBwcyB3YXV4IHwgZ3JlcCBzZWxmdGVzdC5wbAorCisyLiBDcmVhdGUgYSBuZXcg
dmV0aCB0byBicmlkZ2UgYmV0d2VlbiB0aGUgc2VsZnRlc3QgbmFtZXNwYWNlIGFuZCB5b3Vy
IFBDJ3MKK2RlZmF1bHQgbmFtZXNwYWNlOgorc3VkbyBpcCBsaW5rIGFkZCBkZXYgdGVzdGVu
di12ZXRoMCB0eXBlIHZldGggcGVlciBuYW1lIHRlc3RlbnYtdmV0aDEKKworMy4gTW92ZSBv
bmUgZW5kIG9mIHRoZSB2ZXRoIHR1bm5lbCBpbnRvIHRoZSBzZWxmdGVzdCBuYW1lc3BhY2U6
CitzdWRvIGlwIGxpbmsgc2V0IHRlc3RlbnYtdmV0aDEgbmV0bnMgJFNFTEZURVNUX1BJRAor
Cis0LiBDb25maWd1cmUgdGhlIHZldGggZW5kIGluIHRoZSBkZWZhdWx0IG5hbWVzcGFjZSB0
byBiZSBpbiB0aGUgc2FtZSBzdWJuZXQKK2FzIHRoZSBzZWxmdGVzdCBuZXR3b3JrOgorc3Vk
byBpcCBsaW5rIHNldCBkZXYgdGVzdGVudi12ZXRoMCB1cAorc3VkbyBpcCBhZGRyIGFkZCAx
MC4wLjAuNjMvMjQgZGV2IHRlc3RlbnYtdmV0aDAKKworNS4gRW50ZXIgdGhlIHNlbGZ0ZXN0
IG5hbWVzcGFjZSwgYnJpbmcgdGhhdCBlbmQgb2YgdGhlIHBpcGUgdXAsIGFuZCBhZGQgaXQg
dG8KK3RvIHRoZSBtYWluIHNlbGZ0ZXN0MCBicmlkZ2UgKHRoYXQgY29ubmVjdHMgYWxsIHRo
ZSBEQ3MgdG9nZXRoZXIpLiBXZSBhbHNvIG5lZWQKK3RvIGFkZCBhIGRlZmF1bHQgcm91dGUg
ZnJvbSBzZWxmdGVzdCBiYWNrIHRvIHlvdXIgUEMncyBkZWZhdWx0IG5hbWVzcGFjZS4KK25z
ZW50ZXIgLXQgJFNFTEZURVNUX1BJRCAtLW5ldCAtLXVzZXIgLS1wcmVzZXJ2ZS1jcmVkZW50
aWFscworaXAgbGluayBzZXQgZGV2IHRlc3RlbnYtdmV0aDEgdXAKK2lwIGxpbmsgc2V0IHRl
c3RlbnYtdmV0aDEgbWFzdGVyIHNlbGZ0ZXN0MAoraXAgcm91dGUgYWRkIGRlZmF1bHQgdmlh
IDEwLjAuMC42MworbG9nb3V0CisKK1lvdXIgV2luZG93cyBWTSBhbmQgc2FtYmEgdGVzdGVu
diBzaG91bGQgbm93IGJlIGFibGUgdG8gdGFsayB0byBlYWNoCitvdGhlciBvdmVyIElQIQor
Cis2LiBUaGUgb3RoZXIgc3RlcCBpcyB0byBnZXQgRE5TIHdvcmtpbmcuIFlvdSBwcm9iYWJs
eSBuZWVkIHRvIGFkZCBkbnNfaHViCisoMTAuMC4wLjY0KSBhcyBhIG5hbWVzZXJ2ZXIgKGF0
IGxlYXN0IG9uIHlvdXIgV2luZG93cyBWTSkuCisKK1RoaXMgc2hvdWxkIHdvcmsgZm9yIHVz
aW5nIFJTQVQgdG9vbHMgb24gc2FtYmEsIG9yIGpvaW5pbmcgV2luZG93cyB0byBTYW1iYQor
KGRlcGVuZGluZyBvbiB0aGUgc2NoZW1hIHZlcnNpb24pLiBKb2luaW5nIHNhbWJhIHRvIFdp
bmRvd3MgaXMgYSBiaXQgbW9yZQordHJpY2t5LCBhcyB0aGUgbmFtZXNwYWNlcyBhcmUgdGll
ZCB0byB0aGUgKnJ1bm5pbmcqIHNhbWJhIHByb2Nlc3MuCisKK1doYXQgeW91J2QgcHJvYmFi
bHkgd2FudCB0byBkbyBpcyBydW4gdGhlIGpvaW4gY29tbWFuZCB0byB0aGUgd2luZG93cyBW
TQorb3V0c2lkZSBvZiB0ZXN0ZW52LCBjcmVhdGUgYW4gb2ZmbGluZSBiYWNrdXAtZmlsZSBv
ZiB0aGUgcmVzdWx0aW5nIERCLCBhbmQKK3RoZW4gcGx1ZyB0aGF0IGJhY2t1cC1maWxlIGlu
dG8gdGhlIGN1c3RvbWRjIHRlc3RlbnYuIChBbmQgdGhlbiBmb2xsb3cgdGhlCithYm92ZSB2
ZXRoL2JyaWRnZSBzdGVwcyB0byBqb2luIHNhbWJhIHRvIHRoZSBWTSkuCisKK05vdGUgdGhh
dCB0aGUgbmFtZXNwYWNlIGRpc2FwcGVhcnMgb25jZSB5b3Ugc3RvcCB0aGUgdGVzdGVudiwg
c28geW91J2QKK25lZWQgdG8gZG8gdGhlIGFib3ZlIHN0ZXBzIHdpdGggY3JlYXRpbmcgdGhl
IHZldGggaW50ZXJmYWNlIGV2ZXJ5IHRpbWUKK3lvdSByZXN0YXJ0ZWQgdGhlIHRlc3RlbnYu
CisKK0tub3duIGxpbWl0YXRpb25zCis9PT09PT09PT09PT09PT09PQorLSBXaGVuIHJ1bm5p
bmcgYSB0ZXN0ZW52LCBzb21ldGltZXMgeHRlcm0gY2FuIGZhaWwgdG8gc3RhcnR1cCwgZHVl
IHRvIGEKKyAgcGVybWlzc2lvbnMgcHJvYmxlbSB3aXRoIC9kZXYvcHRzLiBUaGlzIHNlZW1z
IHRvIGJlIGEgcGFydGljdWxhciBwcm9ibGVtCisgIHdpdGggdGhlICdub25lJyB0ZXN0ZW52
LgorICBBIHNob3J0LXRlcm0gd29yay1hcm91bmQgaXMgdG8gdXNlIGEgdGVybWluYWwgdGhh
dCBkb2Vzbid0IHRyeSB0byBhY2Nlc3MKKyAgL2Rldi9wdHMsIGUuZy4ganVzdCB1c2UgYmFz
aCBhcyB0aGUgdGVybWluYWw6CisgIFRFUk1JTkFMPWJhc2ggVEVSTUlOQUxfQVJHUz0nLS1u
b3JjJyBVU0VfTkFNRVNQQUNFUz0xIFwKKyAgICBTRUxGVEVTVF9URVNURU5WPW5vbmUgbWFr
ZSB0ZXN0ZW52CistIFNvbWUgdGVzdCBjYXNlcyByZWx5IG9uIHNvY2tldC13cmFwcGVyLCBz
byB3aWxsIGZhaWwgd2hlbiBydW4gdXNpbmcKKyAgbmFtZXNwYWNlcy4KKy0gQ3VycmVudGx5
IFVTRV9OQU1FU1BBQ0VTIG1hcHMgeW91IChpLmUuICRVU0VSKSB0byByb290IGluIHRoZSBu
ZXcgbmFtZXNwYWNlLgorICBUaGlzIG1lYW5zIGFueSB0ZXN0IGNhc2VzIHRoYXQgcmVseSBv
biBiZWluZyBhIG5vbi1yb290IHVzZXIgd2lsbCBmYWlsIChpLmUuCisgIGFueXRoaW5nIHRo
YXQgZmFpbHMgdW5kZXIgJ3N1ZG8gbWFrZSB0ZXN0JyB3aWxsIGFsc28gZmFpbCB3aXRoIG5h
bWVzcGFjZXMpLgorLSBOYW1lc3BhY2VzIHNob3VsZCB3b3JrIHdpdGhpbiBkb2NrZXIsIGJ1
dCBjdXJyZW50bHkgdGhlICd1bnNoYXJlJyBzeXN0ZW0KKyAgY2FsbCBpcyBkaXNhbGxvd2Vk
IG9uIHRoZSBnaXRsYWIgQ0kgcnVubmVycy4KLS0gCjIuNy40CgoKRnJvbSBjOWU4ZGZmNTY2
MWNhZjdlOGNhNjc0NGY0Y2E0ZmJhNGQ4OGUwM2Q2IE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAw
MQpGcm9tOiBUaW0gQmVhbGUgPHRpbWJlYWxlQGNhdGFseXN0Lm5ldC5uej4KRGF0ZTogV2Vk
LCAzIE9jdCAyMDE4IDA4OjU2OjQ1ICsxMzAwClN1YmplY3Q6IFtQQVRDSCA3LzldIHByb3Zp
c2lvbjogRmFsbGJhY2sgdG8gYXNzdW1wdGlvbiByb290LVVJRD09emVybwoKV2hpY2ggaXMg
bm90IGEgdGVycmlibGUgYXNzdW1wdGlvbiB0byBtYWtlLiBUaGUgc3VwZXItdXNlciBvbiBs
aW51eCB3aWxsCmFsd2F5cyBoYXZlIFVJRCBvZiB6ZXJvLCBob3dldmVyLCB0aGUgc3VwZXIt
dXNlciB3aWxsIG5vdCBuZWNlc3NhcmlseSBiZQpjYWxsZWQgInJvb3QiLgoKVGhpcyBtYWtl
cyB0aGUgcHJvdmlzaW9uL2pvaW4gY29tbWFuZHMgd29yayBiZXR0ZXIgd2hlbiBydW4gaW4g
YQpjb250YWluZXIuIChBbmQgd2hpbGUgZGVwbG95aW5nIFNhbWJhIGluIGEgY29udGFpbmVy
IGlzIHBlcmhhcHMgbm90IHRoZQpzbWFydGVzdCBtb3ZlLCB0aGlzIGdpdmVzIHVzIHNvbWUg
dmVyc2F0aWxpdHkgd2hlbiB0ZXN0aW5nIFNhbWJhKS4KClRoaXMgaXMgbmVlZGVkIHRvIGdl
dCB0aGUgcHJvdmlzaW9uIGNvbW1hbmRzIHdvcmtpbmcgaW4gdGhlIGRvbWFpbl9iYWNrdXAK
dGVzdHMgd2hlbiBydW4gd2l0aCBVU0VfTkFNRVNQQUNFUz0xLgoKU2lnbmVkLW9mZi1ieTog
VGltIEJlYWxlIDx0aW1iZWFsZUBjYXRhbHlzdC5uZXQubno+Ci0tLQogcHl0aG9uL3NhbWJh
L3Byb3Zpc2lvbi9fX2luaXRfXy5weSB8IDEyICsrKysrKysrKysrLQogMSBmaWxlIGNoYW5n
ZWQsIDExIGluc2VydGlvbnMoKyksIDEgZGVsZXRpb24oLSkKCmRpZmYgLS1naXQgYS9weXRo
b24vc2FtYmEvcHJvdmlzaW9uL19faW5pdF9fLnB5IGIvcHl0aG9uL3NhbWJhL3Byb3Zpc2lv
bi9fX2luaXRfXy5weQppbmRleCAyYmIyNjE0Li4xNGFiNDFiIDEwMDY0NAotLS0gYS9weXRo
b24vc2FtYmEvcHJvdmlzaW9uL19faW5pdF9fLnB5CisrKyBiL3B5dGhvbi9zYW1iYS9wcm92
aXNpb24vX19pbml0X18ucHkKQEAgLTU0MCw2ICs1NDAsMTYgQEAgZGVmIGZpbmRuc3NfZ2lk
KG5hbWVzKToKICAgICByZXR1cm4gZmluZG5zcyhncnAuZ2V0Z3JuYW0sIG5hbWVzKVsyXQog
CiAKK2RlZiBnZXRfcm9vdF91aWQocm9vdCwgbG9nZ2VyKToKKyAgICB0cnk6CisgICAgICAg
IHJvb3RfdWlkID0gZmluZG5zc191aWQocm9vdCkKKyAgICBleGNlcHQgS2V5RXJyb3IgYXMg
ZToKKyAgICAgICAgbG9nZ2VyLmluZm8oZSkKKyAgICAgICAgbG9nZ2VyLmluZm8oIkFzc3Vt
aW5nIHJvb3QgdXNlciBoYXMgVUlEIHplcm8iKQorICAgICAgICByb290X3VpZCA9IDAKKyAg
ICByZXR1cm4gcm9vdF91aWQKKworCiBkZWYgcHJvdmlzaW9uX3BhdGhzX2Zyb21fbHAobHAs
IGRuc2RvbWFpbik6CiAgICAgIiIiU2V0IHRoZSBkZWZhdWx0IHBhdGhzIGZvciBwcm92aXNp
b25pbmcuCiAKQEAgLTIxNTIsNyArMjE2Miw3IEBAIGRlZiBwcm92aXNpb24obG9nZ2VyLCBz
ZXNzaW9uX2luZm8sIHNtYmNvbmY9Tm9uZSwKICAgICBpZiBkb21haW5zaWQgaXMgTm9uZToK
ICAgICAgICAgZG9tYWluc2lkID0gc2VjdXJpdHkucmFuZG9tX3NpZCgpCiAKLSAgICByb290
X3VpZCA9IGZpbmRuc3NfdWlkKFtyb290IG9yICJyb290Il0pCisgICAgcm9vdF91aWQgPSBn
ZXRfcm9vdF91aWQoW3Jvb3Qgb3IgInJvb3QiXSwgbG9nZ2VyKQogICAgIG5vYm9keV91aWQg
PSBmaW5kbnNzX3VpZChbbm9ib2R5IG9yICJub2JvZHkiXSkKICAgICB1c2Vyc19naWQgPSBm
aW5kbnNzX2dpZChbdXNlcnMgb3IgInVzZXJzIiwgJ3VzZXJzJywgJ290aGVyJywgJ3N0YWZm
J10pCiAgICAgcm9vdF9naWQgPSBwd2QuZ2V0cHd1aWQocm9vdF91aWQpLnB3X2dpZAotLSAK
Mi43LjQKCgpGcm9tIDhiNjZjMTRkNzE2NDA0ZGE4YWNjMWE0MDcxZDY5NzdlNDNmOTE2NTYg
TW9uIFNlcCAxNyAwMDowMDowMCAyMDAxCkZyb206IFRpbSBCZWFsZSA8dGltYmVhbGVAY2F0
YWx5c3QubmV0Lm56PgpEYXRlOiBUaHUsIDMwIE1heSAyMDE5IDE0OjQ2OjM1ICsxMjAwClN1
YmplY3Q6IFtQQVRDSCA4LzldIHNlbGZ0ZXN0OiBBZGQgY2hlY2sgY3VzdG9tZGMgaGFzIHZh
bGlkIHJlYWxtL2RvbWFpbgoKSWYgd2UgY291bGRuJ3QgZGV0ZXJtaW5lIHRoZSByZWFsbS9k
b21haW4gZnJvbSB0aGUgYmFja3VwIGZpbGUsIGl0J3MgYQpsb3QgbmljZXIgdG8gZmFpbCBl
YXJseSB3aXRoIGEgY2xlYXIgZXJyb3IgbWVzc2FnZSAocmF0aGVyIHRoYW4gZmFpbGluZwps
YXRlciBvbiB3aXRoIGEgcmVhbGx5IG9ic2N1cmUgbWVzc2FnZSkuCgpTaWduZWQtb2ZmLWJ5
OiBUaW0gQmVhbGUgPHRpbWJlYWxlQGNhdGFseXN0Lm5ldC5uej4KLS0tCiBzZWxmdGVzdC90
YXJnZXQvU2FtYmE0LnBtIHwgNCArKysrCiAxIGZpbGUgY2hhbmdlZCwgNCBpbnNlcnRpb25z
KCspCgpkaWZmIC0tZ2l0IGEvc2VsZnRlc3QvdGFyZ2V0L1NhbWJhNC5wbSBiL3NlbGZ0ZXN0
L3RhcmdldC9TYW1iYTQucG0KaW5kZXggYjFjNmFhNC4uZDY0N2E1YyAxMDA3NTUKLS0tIGEv
c2VsZnRlc3QvdGFyZ2V0L1NhbWJhNC5wbQorKysgYi9zZWxmdGVzdC90YXJnZXQvU2FtYmE0
LnBtCkBAIC0zMzEwLDYgKzMzMTAsMTAgQEAgc3ViIHNldHVwX2N1c3RvbWRjCiAKIAkjIHdv
cmsgb3V0IHRoZSBjb3JyZWN0IGRvbWFpbi9yZWFsbSBlbnYgdmFsdWVzIGZyb20gdGhlIGJh
Y2t1cC1maWxlCiAJbXkgKCRkb21haW4sICRyZWFsbSkgPSAkc2VsZi0+Z2V0X2JhY2t1cF9k
b21haW5fcmVhbG0oJGJhY2t1cF9maWxlKTsKKwlpZiAoJGRvbWFpbiBlcSAnJyBvciAkcmVh
bG0gZXEgJycpIHsKKwkJd2FybigiQ291bGQgbm90IGRldGVybWluZSBkb21haW4gb3IgcmVh
bG0iKTsKKwkJcmV0dXJuIHVuZGVmOworCX0KIAogCSMgY3JlYXRlIGEgcGxhY2Vob2xkZXIg
ZGlyZWN0b3J5IGFuZCBzbWIuY29uZiwgYXMgd2VsbCBhcyB0aGUgZW52IHZhcnMuCiAJbXkg
KCRlbnYsICRjdHgpID0gJHNlbGYtPnByZXBhcmVfZGNfdGVzdGVudigkcHJlZml4LCAkZGNf
bmFtZSwKLS0gCjIuNy40CgoKRnJvbSA5MzMwYjQ4MWUyZTVlMGExYmNmNDJjMTM1MWQ3NWNj
NWExZTBiYjhjIE1vbiBTZXAgMTcgMDA6MDA6MDAgMjAwMQpGcm9tOiBUaW0gQmVhbGUgPHRp
bWJlYWxlQGNhdGFseXN0Lm5ldC5uej4KRGF0ZTogVGh1LCAzMCBNYXkgMjAxOSAxNDo1NTo1
MiArMTIwMApTdWJqZWN0OiBbUEFUQ0ggOS85XSBzZWxmdGVzdDogRG9uJ3QgdXNlIGdsb2Jh
bCBkaXJzIHdoZW4gcGFyc2luZyBjdXN0b21kYwogcmVhbG0KCldoZW4gY3JlYXRpbmcgdGhl
IGN1c3RvbWRjLCB0ZXN0cGFybSB3b3VsZCBkZWZhdWx0IHRvIHVzaW5nCi91c3IvbG9jYWwv
c2FtYmEgc3ViLWRpcmVjdG9yaWVzIGZvciBjcmVhdGluZyBzb2NrZXRzIGFuZCBsb2NrIGZp
bGVzLgpJbnN0ZWFkLCBwYXNzIGluIHRoZSB0bXBkaXIgd2UganVzdCBjcmVhdGVkIGFzIGFu
IG9wdGlvbiB0byB0aGUgY29tbWFuZC4KCk5vcm1hbGx5IHRoaXMgZGlkbid0IGNhdXNlIGEg
bm90aWNlYWJsZSBwcm9ibGVtLCBob3dldmVyLCBpZiB3ZSBydW4gdGhlCmNvbW1hbmQgd2l0
aCBVSUQtd3JhcHBlciBidXQgd2l0aG91dCBzb2NrZXQtd3JhcHBlciAoaS5lLgpVU0VfTkFN
RVNQQUNFUz0xKSwgdGhlbiBpdCBmYWlscyBjb21wbGV0ZWx5LgoKU2lnbmVkLW9mZi1ieTog
VGltIEJlYWxlIDx0aW1iZWFsZUBjYXRhbHlzdC5uZXQubno+Ci0tLQogc2VsZnRlc3QvdGFy
Z2V0L1NhbWJhNC5wbSB8IDkgKysrKysrKy0tCiAxIGZpbGUgY2hhbmdlZCwgNyBpbnNlcnRp
b25zKCspLCAyIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL3NlbGZ0ZXN0L3RhcmdldC9T
YW1iYTQucG0gYi9zZWxmdGVzdC90YXJnZXQvU2FtYmE0LnBtCmluZGV4IGQ2NDdhNWMuLmM2
NjFhMTAgMTAwNzU1Ci0tLSBhL3NlbGZ0ZXN0L3RhcmdldC9TYW1iYTQucG0KKysrIGIvc2Vs
ZnRlc3QvdGFyZ2V0L1NhbWJhNC5wbQpAQCAtMzI4MCwxMCArMzI4MCwxNSBAQCBzdWIgZ2V0
X2JhY2t1cF9kb21haW5fcmVhbG0KIAkJcmV0dXJuIHVuZGVmLCB1bmRlZjsKIAl9CiAKKwkj
IG1ha2Ugc3VyZSB3ZSBkb24ndCB0cnkgdG8gY3JlYXRlIGxvY2tzL3NvY2tldHMgaW4gdGhl
IGRlZmF1bHQgaW5zdGFsbAorCSMgbG9jYXRpb24gKGkuZS4gL3Vzci9sb2NhbC9zYW1iYS8p
CisJbXkgJG9wdGlvbnMgPSAiLS1vcHRpb249XCJwcml2YXRlIGRpciA9ICR0bXBkaXJcIiI7
CisJJG9wdGlvbnMgLj0gICIgLS1vcHRpb249XCJsb2NrIGRpciA9ICR0bXBkaXJcIiI7CisK
IAkjIG5vdyB1c2UgdGVzdHBhcm0gdG8gcmVhZCB0aGUgdmFsdWVzIHdlJ3JlIGludGVyZXN0
ZWQgaW4KIAlteSAkdGVzdHBhcm0gPSBTYW1iYTo6YmluZGlyX3BhdGgoJHNlbGYsICJ0ZXN0
cGFybSIpOwotCW15ICRkb21haW4gPSBgJHRlc3RwYXJtICRzbWJjb25mIC1zbCAtLXBhcmFt
ZXRlci1uYW1lPVdPUktHUk9VUGA7Ci0JbXkgJHJlYWxtID0gYCR0ZXN0cGFybSAkc21iY29u
ZiAtc2wgLS1wYXJhbWV0ZXItbmFtZT1SRUFMTWA7CisJbXkgJGRvbWFpbiA9IGAkdGVzdHBh
cm0gJHNtYmNvbmYgLXNsIC0tcGFyYW1ldGVyLW5hbWU9V09SS0dST1VQICRvcHRpb25zYDsK
KwlteSAkcmVhbG0gPSBgJHRlc3RwYXJtICRzbWJjb25mIC1zbCAtLXBhcmFtZXRlci1uYW1l
PVJFQUxNICRvcHRpb25zYDsKIAljaG9tcCAkcmVhbG07CiAJY2hvbXAgJGRvbWFpbjsKIAlw
cmludCAiQmFja3VwLWZpbGUgUkVBTE0gaXMgJHJlYWxtLCBET01BSU4gaXMgJGRvbWFpblxu
IjsKLS0gCjIuNy40Cgo=
--------------19D753CA15187E10AC30AB10
Content-Type: text/plain; charset=UTF-8;
 name="example-output.txt"
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
 filename="example-output.txt"

dGltYmVhbGVAdGltYmVhbGUtcGM6fi9jb2RlL3NhbWJhJCAuL3N0L2FkX2RjL25zZW50ZXIu
c2gKRE9NQUlOPUFERE9NQUlOCkROU05BTUU9YWRkb20uc2FtYmEuZXhhbXBsZS5jb20KUkVB
TE09QURET00uU0FNQkEuRVhBTVBMRS5DT00KRE9NU0lEPVMtMS01LTIxLTUwODkyODAyMC0y
NjU1Mzg0NjY0LTQxMTU4NjQ1ODgKRENfU0VSVkVSPWFkZGMKRENfU0VSVkVSX0lQPTEwLjAu
MC4zMApEQ19TRVJWRVJfSVBWNj1mZDAwOjAwMDA6MDAwMDowMDAwOjAwMDA6MDAwMDo1MzU3
OjVmMWUKRENfTkVUQklPU05BTUU9QUREQwpTRVJWRVI9YWRkYwpTRVJWRVJfSVA9MTAuMC4w
LjMwClNFUlZFUl9JUFY2PWZkMDA6MDAwMDowMDAwOjAwMDA6MDAwMDowMDAwOjUzNTc6NWYx
ZQpORVRCSU9TTkFNRT1BRERDClNBTVNJRD1TLTEtNS0yMS01MDg5MjgwMjAtMjY1NTM4NDY2
NC00MTE1ODY0NTg4ClNFUlZFUkNPTkZGSUxFPS9ob21lL3RpbWJlYWxlL2NvZGUvc2FtYmEv
c3QvYWRfZGMvZXRjL3NtYi5jb25mClVTRVJOQU1FPUFkbWluaXN0cmF0b3IKUEFTU1dPUkQ9
bG9jRENwYXNzMQpEQ19VU0VSTkFNRT1BZG1pbmlzdHJhdG9yCkRDX1BBU1NXT1JEPWxvY0RD
cGFzczEKVUlEX1JGQzIzMDdURVNUPTY1NTMzCkdJRF9SRkMyMzA3VEVTVD02NTUzMgpLUkI1
X0NPTkZJRz0vaG9tZS90aW1iZWFsZS9jb2RlL3NhbWJhL3N0L2FkX2RjL2V0Yy9rcmI1LmNv
bmYKU0VMRlRFU1RfV0lOQklORERfU09DS0VUX0RJUj0vaG9tZS90aW1iZWFsZS9jb2RlL3Nh
bWJhL3N0L2FkX2RjL3dpbmJpbmRkX3NvY2tldApMT0NBTF9QQVRIPS9ob21lL3RpbWJlYWxl
L2NvZGUvc2FtYmEvc3QvYWRfZGMvc2hhcmUKUkVTT0xWX0NPTkY9L2hvbWUvdGltYmVhbGUv
Y29kZS9zYW1iYS9zdC9kbnNfaHViL3Jvb3RkbnNmb3J3YXJkZXIvcmVzb2x2LmNvbmYKTlNT
X1dSQVBQRVJfUEFTU1dEPS9ob21lL3RpbWJlYWxlL2NvZGUvc2FtYmEvc3QvYWRfZGMvZXRj
L3Bhc3N3ZApOU1NfV1JBUFBFUl9HUk9VUD0vaG9tZS90aW1iZWFsZS9jb2RlL3NhbWJhL3N0
L2FkX2RjL2V0Yy9ncm91cApOU1NfV1JBUFBFUl9IT1NUUz0vaG9tZS90aW1iZWFsZS9jb2Rl
L3NhbWJhL3N0L2hvc3RzCk5TU19XUkFQUEVSX0hPU1ROQU1FPWFkZGMuYWRkb20uc2FtYmEu
ZXhhbXBsZS5jb20KTlNTX1dSQVBQRVJfTU9EVUxFX1NPX1BBVEg9L2hvbWUvdGltYmVhbGUv
Y29kZS9zYW1iYS9iaW4vZGVmYXVsdC9uc3N3aXRjaC9saWJuc3Mtd3JhcHBlci13aW5iaW5k
LnNvCk5TU19XUkFQUEVSX01PRFVMRV9GTl9QUkVGSVg9d2luYmluZApSRVNPTFZfV1JBUFBF
Ul9IT1NUUz0vaG9tZS90aW1iZWFsZS9jb2RlL3NhbWJhL3N0L2Ruc19ob3N0X2ZpbGUKCkVu
dGVyZWQgQUREQyBuYW1lc3BhY2UsIHdpdGggYWJvdmUgdmFyaWFibGVzIGRlZmluZWQuClVz
ZSBDVFJMK0Qgb3IgZXhpdCB0byBsZWF2ZSB0aGUgbmFtZXNwYWNlLgoKcm9vdEB0aW1iZWFs
ZS1wYzp+L2NvZGUvc2FtYmEjIGlwIC00IGFkZHIKMTogbG86IDxMT09QQkFDSyxVUCxMT1dF
Ul9VUD4gbXR1IDY1NTM2IHFkaXNjIG5vcXVldWUgc3RhdGUgVU5LTk9XTiBncm91cCBkZWZh
dWx0IHFsZW4gMTAwMAogICAgaW5ldCAxMjcuMC4wLjEvOCBzY29wZSBob3N0IGxvCiAgICAg
ICB2YWxpZF9sZnQgZm9yZXZlciBwcmVmZXJyZWRfbGZ0IGZvcmV2ZXIKMjogdmV0aDMwQGlm
NDogPEJST0FEQ0FTVCxNVUxUSUNBU1QsVVAsTE9XRVJfVVA+IG10dSAxNTAwIHFkaXNjIG5v
cXVldWUgc3RhdGUgVVAgZ3JvdXAgZGVmYXVsdCBxbGVuIDEwMDAgbGluay1uZXRuc2lkIDAK
ICAgIGluZXQgMTAuMC4wLjMwLzI0IHNjb3BlIGdsb2JhbCB2ZXRoMzAKICAgICAgIHZhbGlk
X2xmdCBmb3JldmVyIHByZWZlcnJlZF9sZnQgZm9yZXZlcgpyb290QHRpbWJlYWxlLXBjOn4v
Y29kZS9zYW1iYSMgYmluL2xkYnNlYXJjaCAtSCBsZGFwOi8vJFNFUlZFUiAtVSRVU0VSTkFN
RSUkUEFTU1dPUkQgJyhjbj1BZG1pbmlzdHJhdG9yKScgZG4KIyByZWNvcmQgMQpkbjogQ049
QWRtaW5pc3RyYXRvcixDTj1Vc2VycyxEQz1hZGRvbSxEQz1zYW1iYSxEQz1leGFtcGxlLERD
PWNvbQoKIyBSZWZlcnJhbApyZWY6IGxkYXA6Ly9hZGRvbS5zYW1iYS5leGFtcGxlLmNvbS9D
Tj1Db25maWd1cmF0aW9uLERDPWFkZG9tLERDPXNhbWJhLERDPWV4YW1wbGUsREM9Y29tCgoj
IFJlZmVycmFsCnJlZjogbGRhcDovL2FkZG9tLnNhbWJhLmV4YW1wbGUuY29tL0RDPURvbWFp
bkRuc1pvbmVzLERDPWFkZG9tLERDPXNhbWJhLERDPWV4YW1wbGUsREM9Y29tCgojIFJlZmVy
cmFsCnJlZjogbGRhcDovL2FkZG9tLnNhbWJhLmV4YW1wbGUuY29tL0RDPUZvcmVzdERuc1pv
bmVzLERDPWFkZG9tLERDPXNhbWJhLERDPWV4YW1wbGUsREM9Y29tCgojIHJldHVybmVkIDQg
cmVjb3JkcwojIDEgZW50cmllcwojIDMgcmVmZXJyYWxzCnJvb3RAdGltYmVhbGUtcGM6fi9j
b2RlL3NhbWJhIyAK
--------------19D753CA15187E10AC30AB10--

